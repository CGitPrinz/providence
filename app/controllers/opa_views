./administrate/access/UsersController.php:		$this->opo_app_plugin_manager = new ApplicationPluginManager();
./administrate/access/UsersController.php:		$t_user = $this->getUserObject();
./administrate/access/UsersController.php:			$this->view->setVar("profile_settings", $va_elements);
./administrate/access/UsersController.php:		$this->render('user_edit_html.php');
./administrate/access/UsersController.php:		$t_user = $this->getUserObject();
./administrate/access/UsersController.php:		$this->opo_app_plugin_manager->hookBeforeUserSaveData(array('user_id' => $t_user->getPrimaryKey(), 'instance' => $t_user));
./administrate/access/UsersController.php:		if($t_user->get("user_id") && $this->request->config->get("email_user_when_account_activated") && ($_REQUEST["active"] != $t_user->get("active"))){
./administrate/access/UsersController.php:				$this->request->addActionErrors($t_user->errors(), 'field_'.$vs_f);
./administrate/access/UsersController.php:		if ($this->request->getParameter('entity_id', pInteger) == 0) {
./administrate/access/UsersController.php:			if ($this->request->getParameter('password', pString) != $this->request->getParameter('password_confirm', pString)) {
./administrate/access/UsersController.php:				$this->request->addActionError(new ApplicationError(1050, _t("Password does not match confirmation. Please try again."), "administrate/UserController->Save()", '', false, false), 'field_password');
./administrate/access/UsersController.php:		AppNavigation::clearMenuBarCache($this->request);	// clear menu bar cache since changes may affect content
./administrate/access/UsersController.php:		if($this->request->numActionErrors() == 0) {
./administrate/access/UsersController.php:			$this->opo_app_plugin_manager->hookAfterUserSaveData(array('user_id' => $t_user->getPrimaryKey(), 'instance' => $t_user));
./administrate/access/UsersController.php:					$this->request->addActionError($o_e, 'general');
./administrate/access/UsersController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/UsersController.php:				$va_set_user_roles = $this->request->getParameter('roles', pArray);
./administrate/access/UsersController.php:				$va_set_user_groups = $this->request->getParameter('groups', pArray);
./administrate/access/UsersController.php:					$this->opo_app_plugin_manager->hookBeforeUserSavePrefs(array('user_id' => $t_user->getPrimaryKey(), 'instance' => $t_user));
./administrate/access/UsersController.php:						if ($this->request->getParameter('pref_'.$vs_pref, pString) != $t_user->getPreference($vs_pref)) {
./administrate/access/UsersController.php:						$t_user->setPreference($vs_pref, $this->request->getParameter('pref_'.$vs_pref, pString));
./administrate/access/UsersController.php:					$this->opo_app_plugin_manager->hookAfterUserSavePrefs(array('user_id' => $t_user->getPrimaryKey(), 'instance' => $t_user, 'modified_prefs' => $va_changed_prefs));
./administrate/access/UsersController.php:					$o_view = new View($this->request, array($this->request->getViewsDirectoryPath()));
./administrate/access/UsersController.php:					caSendmail($t_user->get('email'), $this->request->config->get("ca_admin_email"), $vs_subject_line, $vs_mail_message_text, $vs_mail_message_html, null, null, null, ['source' => 'Account activation']);						
./administrate/access/UsersController.php:				$this->notification->addNotification($vs_message, __NOTIFICATION_TYPE_INFO__);
./administrate/access/UsersController.php:			$this->notification->addNotification(_t("Your entry has errors. See below for details."), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/UsersController.php:		if ($this->request->numActionErrors()) {
./administrate/access/UsersController.php:			$this->render('user_edit_html.php');
./administrate/access/UsersController.php:			if ($t_user->getPrimaryKey() == $this->request->user->getPrimaryKey()) {
./administrate/access/UsersController.php:				$this->request->user->load($t_user->getPrimaryKey());
./administrate/access/UsersController.php:			$this->ListUsers();
./administrate/access/UsersController.php:		if (!strlen($vn_userclass = $this->request->getParameter('userclass', pString))) {
./administrate/access/UsersController.php:			$vn_userclass = $this->request->user->getVar('ca_users_default_userclass');
./administrate/access/UsersController.php:			$this->request->user->setVar('ca_users_default_userclass', $vn_userclass);
./administrate/access/UsersController.php:		$t_user = $this->getUserObject();
./administrate/access/UsersController.php:		$this->view->setVar('userclass', $vn_userclass);
./administrate/access/UsersController.php:		$this->view->setVar('userclass_displayname', $t_user->getChoiceListValue('userclass', $vn_userclass));
./administrate/access/UsersController.php:		$vs_sort_field = $this->request->getParameter('sort', pString);
./administrate/access/UsersController.php:		$this->view->setVar('user_list', $t_user->getUserList(array('sort' => $vs_sort_field, 'sort_direction' => 'asc', 'userclass' => $vn_userclass)));
./administrate/access/UsersController.php:		$this->render('user_list_html.php');
./administrate/access/UsersController.php:		$t_user = $this->getUserObject();
./administrate/access/UsersController.php:		if ($this->request->getParameter('confirm', pInteger)) {
./administrate/access/UsersController.php:					$this->request->addActionError($o_e, 'general');
./administrate/access/UsersController.php:				$this->notification->addNotification(_t("Deleted user"), __NOTIFICATION_TYPE_INFO__);
./administrate/access/UsersController.php:			$this->ListUsers();
./administrate/access/UsersController.php:			$this->render('user_delete_html.php');
./administrate/access/UsersController.php:		$vs_download_format = $this->request->getParameter("download_format", pString);
./administrate/access/UsersController.php:		$this->view->setVar("download_format", $vs_download_format);
./administrate/access/UsersController.php:				$this->view->setVar("file_extension", "txt");
./administrate/access/UsersController.php:				$this->view->setVar("mimetype", "text/plain");
./administrate/access/UsersController.php:				$this->view->setVar("file_extension", "txt");
./administrate/access/UsersController.php:				$this->view->setVar("mimetype", "text/plain");
./administrate/access/UsersController.php:			$this->view->setVar("file_contents", $vs_file_contents);
./administrate/access/UsersController.php:			return $this->render('user_report.php');
./administrate/access/UsersController.php:			$this->notification->addNotification(_t("There are no users"), __NOTIFICATION_TYPE_INFO__);
./administrate/access/UsersController.php:			$this->ListUsers();
./administrate/access/UsersController.php:		$pa_user_ids = $this->request->getParameter('user_id', pArray);
./administrate/access/UsersController.php:		$ps_mode = $this->request->getParameter('mode', pString);
./administrate/access/UsersController.php:			if($this->request->config->get("email_user_when_account_activated")){
./administrate/access/UsersController.php:							$o_view = new View($this->request, array($this->request->getViewsDirectoryPath()));
./administrate/access/UsersController.php:							caSendmail($t_user->get('email'), $this->request->config->get("ca_admin_email"), $vs_subject_line, $vs_mail_message_text, $vs_mail_message_html, null, null, null, ['source' => 'Account activation']);						
./administrate/access/UsersController.php:				$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/UsersController.php:				$this->notification->addNotification(_t("The registrations have been approved"), __NOTIFICATION_TYPE_INFO__);
./administrate/access/UsersController.php:			$this->notification->addNotification(_t("Please use the checkboxes to select registrations for approval"), __NOTIFICATION_TYPE_WARNING__);
./administrate/access/UsersController.php:				$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./administrate/access/UsersController.php:				$this->ListUsers();
./administrate/access/UsersController.php:		if (!($t_user = $this->pt_user)) {
./administrate/access/UsersController.php:			if (!($vn_user_id = $this->request->getParameter('user_id', pInteger))) {
./administrate/access/UsersController.php:			$this->view->setVar('user_id', $vn_user_id);
./administrate/access/UsersController.php:			$this->view->setVar('t_user', $t_user);
./administrate/access/UsersController.php:		$this->pt_user = $t_user;
./administrate/access/RolesController.php:		$t_role = $this->getRoleObject();
./administrate/access/RolesController.php:		$vn_default_bundle_access_level = (int)$this->request->config->get('default_bundle_access_level');
./administrate/access/RolesController.php:		$this->view->setVar('bundle_list', $va_bundle_list);
./administrate/access/RolesController.php:		$vn_default_type_access_level = (int)$this->request->config->get('default_type_access_level');
./administrate/access/RolesController.php:		$vn_default_source_access_level = (int)$this->request->config->get('default_source_access_level');
./administrate/access/RolesController.php:		$this->view->setVar('type_list', $va_type_list);
./administrate/access/RolesController.php:		$this->view->setVar('source_list', $va_source_list);
./administrate/access/RolesController.php:		$this->view->setVar('access_status_list', $va_access_status_list);
./administrate/access/RolesController.php:		$this->view->setVar('table_display_names', $va_table_names);
./administrate/access/RolesController.php:		$this->render('role_edit_html.php');
./administrate/access/RolesController.php:		$t_role = $this->getRoleObject();
./administrate/access/RolesController.php:				$this->request->addActionErrors($t_role->errors(), 'field_'.$vs_f);
./administrate/access/RolesController.php:				$vn_access = $this->request->getParameter($vs_bundle_name_proc, pInteger);
./administrate/access/RolesController.php:						$vn_access = $this->request->getParameter($vs_table.'_type_'.$vn_item_id, pInteger);
./administrate/access/RolesController.php:						$vn_access = $this->request->getParameter($vs_table.'_source_'.$vn_item_id, pInteger);
./administrate/access/RolesController.php:				$va_source_access_settings[$vs_table.'_default_id'] = $this->request->getParameter($vs_table.'_default_source', pInteger);
./administrate/access/RolesController.php:				$vs_access = $this->request->getParameter('access_status_'.$vn_item_id, pString);
./administrate/access/RolesController.php:				if ($this->request->getParameter($vs_action, pInteger) > 0) {
./administrate/access/RolesController.php:		AppNavigation::clearMenuBarCache($this->request);	// clear menu bar cache since role changes may affect content
./administrate/access/RolesController.php:		if($this->request->numActionErrors() == 0) {
./administrate/access/RolesController.php:					$this->request->addActionError($o_e, 'general');
./administrate/access/RolesController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/RolesController.php:				$this->notification->addNotification($vs_message, __NOTIFICATION_TYPE_INFO__);
./administrate/access/RolesController.php:			$this->notification->addNotification(_t("Your entry has errors. See below for details."), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/RolesController.php:		if ($this->request->numActionErrors()) {
./administrate/access/RolesController.php:			$this->render('role_edit_html.php');
./administrate/access/RolesController.php:			$this->view->setVar('role_list', $t_role->getRoleList());
./administrate/access/RolesController.php:			$this->render('role_list_html.php');
./administrate/access/RolesController.php:		$t_role = $this->getRoleObject();
./administrate/access/RolesController.php:		$vs_sort_field = $this->request->getParameter('sort', pString);
./administrate/access/RolesController.php:		$this->view->setVar('role_list', $t_role->getRoleList($vs_sort_field, 'asc'));
./administrate/access/RolesController.php:		$this->render('role_list_html.php');
./administrate/access/RolesController.php:		$t_role = $this->getRoleObject();
./administrate/access/RolesController.php:		if ($this->request->getParameter('confirm', pInteger)) {
./administrate/access/RolesController.php:					$this->request->addActionError($o_e, 'general');
./administrate/access/RolesController.php:				$this->notification->addNotification(_t("Deleted role"), __NOTIFICATION_TYPE_INFO__);
./administrate/access/RolesController.php:			$this->ListRoles();
./administrate/access/RolesController.php:			$this->render('role_delete_html.php');
./administrate/access/RolesController.php:		if (!($t_role = $this->pt_role)) {
./administrate/access/RolesController.php:			if (!($vn_role_id = $this->request->getParameter('role_id', pInteger))) {
./administrate/access/RolesController.php:			$this->view->setVar('role_id', $vn_role_id);
./administrate/access/RolesController.php:			$this->view->setVar('t_role', $t_role);
./administrate/access/RolesController.php:		$this->pt_role = $t_role;
./administrate/access/GroupsController.php:		$t_group = $this->getGroupObject();
./administrate/access/GroupsController.php:		$this->render('group_edit_html.php');
./administrate/access/GroupsController.php:		$t_group = $this->getGroupObject();
./administrate/access/GroupsController.php:				$this->request->addActionErrors($t_group->errors(), 'field_'.$vs_f);
./administrate/access/GroupsController.php:		if ($this->request->getParameter('password', pString) != $this->request->getParameter('password_confirm', pString)) {
./administrate/access/GroupsController.php:			$this->request->addActionError(new ApplicationError(1050, _t("Password does not match confirmation. Please try again."), "administrate/GroupsController->Save()", '', false, false), 'field_password');
./administrate/access/GroupsController.php:		AppNavigation::clearMenuBarCache($this->request);	// clear menu bar cache since changes may affect content
./administrate/access/GroupsController.php:		if($this->request->numActionErrors() == 0) {
./administrate/access/GroupsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/access/GroupsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/GroupsController.php:				$va_set_group_roles = $this->request->getParameter('roles', pArray);
./administrate/access/GroupsController.php:				$this->notification->addNotification($vs_message, __NOTIFICATION_TYPE_INFO__);
./administrate/access/GroupsController.php:			$this->notification->addNotification(_t("Your entry has errors. See below for details."), __NOTIFICATION_TYPE_ERROR__);
./administrate/access/GroupsController.php:		if ($this->request->numActionErrors()) {
./administrate/access/GroupsController.php:			$this->render('group_edit_html.php');
./administrate/access/GroupsController.php:			$this->view->setVar('group_list', $t_group->getGroupList());
./administrate/access/GroupsController.php:			$this->render('group_list_html.php');
./administrate/access/GroupsController.php:		$t_group = $this->getGroupObject();
./administrate/access/GroupsController.php:		$vs_sort_field = $this->request->getParameter('sort', pString);
./administrate/access/GroupsController.php:		$this->view->setVar('group_list', $t_group->getGroupList($vs_sort_field, 'asc'));
./administrate/access/GroupsController.php:		$this->render('group_list_html.php');
./administrate/access/GroupsController.php:		$t_group = $this->getGroupObject();
./administrate/access/GroupsController.php:		if ($this->request->getParameter('confirm', pInteger)) {
./administrate/access/GroupsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/access/GroupsController.php:			$this->ListGroups();
./administrate/access/GroupsController.php:			$this->render('group_delete_html.php');
./administrate/access/GroupsController.php:		if (!($t_group = $this->pt_group)) {
./administrate/access/GroupsController.php:			if (!($vn_group_id = $this->request->getParameter('group_id', pInteger))) {
./administrate/access/GroupsController.php:			$this->view->setVar('group_id', $vn_group_id);
./administrate/access/GroupsController.php:			$this->view->setVar('t_group', $t_group);
./administrate/access/GroupsController.php:		$this->pt_group = $t_group;
./administrate/maintenance/ClearSearchIndexingLockFileController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_search_reindex')) {
./administrate/maintenance/ClearSearchIndexingLockFileController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./administrate/maintenance/ClearSearchIndexingLockFileController.php:		$this->render('clear_search_indexing_lock_file_landing_html.php');
./administrate/maintenance/ClearSearchIndexingLockFileController.php:		$this->render('clear_search_indexing_lock_file_result_html.php');
./administrate/maintenance/HierarchicalReindexController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_search_reindex')) {
./administrate/maintenance/HierarchicalReindexController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./administrate/maintenance/HierarchicalReindexController.php:		$this->render('hierarchical_reindex_landing_html.php');
./administrate/maintenance/HierarchicalReindexController.php:		$this->render('hierarchical_reindex_status_html.php');
./administrate/maintenance/SearchReindexController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_search_reindex')) {
./administrate/maintenance/SearchReindexController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./administrate/maintenance/SearchReindexController.php:		$this->render('search_reindex_landing_html.php');
./administrate/maintenance/SearchReindexController.php:		$this->render('search_reindex_status_html.php');
./administrate/maintenance/SortValuesReloadController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_search_reindex')) {
./administrate/maintenance/SortValuesReloadController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./administrate/maintenance/SortValuesReloadController.php:		$this->render('sort_values_reload_landing_html.php');
./administrate/maintenance/SortValuesReloadController.php:		$this->render('sort_values_reload_status_html.php');
./administrate/maintenance/ExportConfigurationController.php:		if (!$this->request->isLoggedIn()) {
./administrate/maintenance/ExportConfigurationController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./administrate/maintenance/ExportConfigurationController.php:		$this->render('export_configuration_landing_html.php');
./administrate/maintenance/ExportConfigurationController.php:		$vs_xml = ConfigurationExporter::exportConfigurationAsXML($name, _t('Profile created on %1 by %2', caGetLocalizedDate(), $this->request->user->get('fname').' '.$this->request->user->get('lname')), 'base', '');
./administrate/maintenance/ExportConfigurationController.php:		$this->view->setVar('profile', $vs_xml);
./administrate/maintenance/ExportConfigurationController.php:		$this->view->setVar('profile_file_name', $name.'_config.xml');
./administrate/maintenance/ExportConfigurationController.php:		$this->render('export_configuration_binary.php');
./administrate/setup/interface_editor/InterfaceEditorController.php:			$va_init[1]->set('editor_type', $this->request->getParameter('editor_type', pInteger));
./administrate/setup/interface_editor/InterfaceEditorController.php:			$pt_subject->addUsers(array($this->request->getUserID() => __CA_BUNDLE_DISPLAY_EDIT_ACCESS__));
./administrate/setup/interface_editor/InterfaceEditorController.php:		$t_ui = $this->view->getVar('t_item');
./administrate/setup/interface_editor/InterfaceEditorController.php:			$this->view->setVar('labels', $t_ui->getPrimaryKey() ? $va_labels : array());
./administrate/setup/interface_editor/InterfaceEditorController.php:			$this->view->setVar('idno', $t_ui->get('idno'));
./administrate/setup/interface_editor/InterfaceEditorController.php:		$this->view->setVar('t_ui_item', $t_ui_item);
./administrate/setup/interface_editor/InterfaceEditorController.php:		return $this->render('widget_interface_info_html.php', true);
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:			$t_screen = $this->view->getVar('t_subject');
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:			$this->opn_ui_id = $t_screen->get('ui_id');
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:			$t_ui = new ca_editor_uis($this->opn_ui_id);
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:				$o_result_context = new ResultContext($this->request, 'ca_editor_ui_screens', 'basic_search');
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:		caSetRedirect(caNavUrl($this->getRequest(),'administrate/setup/interface_editor','InterfaceEditor','Edit', array('ui_id' => $this->opn_ui_id)));
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:		$t_ui = $this->view->getVar('t_item');
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:			$this->view->setVar('labels', $t_ui->getPrimaryKey() ? $va_labels : array());
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:			$this->view->setVar('idno', $t_ui->get('idno'));
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:		$this->view->setVar('t_ui_item', $t_ui_item);
./administrate/setup/interface_screen_editor/InterfaceScreenEditorController.php:		return $this->render('widget_interface_screen_info_html.php', true);
./administrate/setup/list_editor/ListEditorController.php:		$vn_list_id = $this->request->getParameter('list_id', pInteger);
./administrate/setup/list_editor/ListEditorController.php:		$t_list = $this->view->getVar('t_item');
./administrate/setup/list_editor/ListEditorController.php:			$this->view->setVar('labels', $t_list->getPrimaryKey() ? $va_labels : array());
./administrate/setup/list_editor/ListEditorController.php:			$this->view->setVar('idno', $t_list->get('idno'));
./administrate/setup/list_editor/ListEditorController.php:		$this->view->setVar('t_list_item', $t_list_item);
./administrate/setup/list_editor/ListEditorController.php:			$this->view->setVar('children', $va_children);
./administrate/setup/list_editor/ListEditorController.php:		return $this->render('widget_list_info_html.php', true);
./administrate/setup/list_item_editor/ListItemEditorController.php:		$o_result_context = new ResultContext($this->request, 'ca_list_items', 'basic_search');
./administrate/setup/list_item_editor/ListItemEditorController.php:		$vn_id = $this->request->getParameter('item_id', pInteger);
./administrate/setup/list_item_editor/ListItemEditorController.php:		if ($t_item = $this->view->getVar('t_item')) {
./administrate/setup/list_item_editor/ListItemEditorController.php:				$t_parent = new ca_list_items($this->request->getParameter('parent_id', pInteger));
./administrate/setup/list_item_editor/ListItemEditorController.php:		$this->view->setVar('t_list', $t_list);
./administrate/setup/list_item_editor/ListItemEditorController.php:		return $this->render('widget_list_item_info_html.php', true);
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		$o_result_context = new ResultContext($this->request, 'ca_relationship_types', 'basic_search');
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		$vn_id = $this->request->getParameter('type_id', pInteger);
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		$vn_parent_id = $this->request->getParameter('parent_id', pInteger);
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		$vn_above_id = $this->request->getParameter('above_id', pInteger);
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:					$this->postError(1230, _t("Invalid child"),"RelationshipTypeEditorController->Edit()");
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:					$this->postError(1230, _t("Invalid parent"),"RelationshipTypeEditorController->Edit()");
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:			$this->request->setParameter('table_num', $t_parent->get('table_num'));
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:			if (is_array($va_siblings = $t_instance->getHierarchySiblings($this->request->getParameter('type_id', pInteger), array('idsOnly' => true)))) {
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		$t_item = $this->view->getVar('t_item');
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		$this->view->setVar('ancestors', $va_ancestors);
./administrate/setup/relationship_type_editor/RelationshipTypeEditorController.php:		return $this->render('widget_relationship_type_info_html.php', true);
./administrate/setup/data_dictionary_entries/DataDictionaryEntryEditorController.php:		if (!$this->request->user->canDoAction("can_configure_data_dictionary")) { 
./administrate/setup/data_dictionary_entries/DataDictionaryEntryEditorController.php:			$va_init[1]->set('user_id', $this->getRequest()->getUserID());
./administrate/setup/data_dictionary_entries/DataDictionaryEntryEditorController.php:			$va_init[1]->set('table_num', $this->getRequest()->getParameter('table_num', pInteger));
./administrate/setup/data_dictionary_entries/DataDictionaryEntryEditorController.php:		return $this->render('widget_data_dictionary_entry_info_html.php', true);
./administrate/setup/BrowseListItemsController.php: 			$this->opo_browse = new ListItemBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./administrate/setup/BrowseListItemsController.php:			$this->opa_views = array(
./administrate/setup/ConfigurationCheckController.php:		$this->getView()->setVar('last_change_log_id', ca_change_log::getLastLogID());
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('search_config_settings',$vo_search_config_settings);
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('search_config_engine_name',  SearchEngine::getPluginEngineName());
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('media_config_plugin_list',  $va_plugins);
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('pdf_renderer_config_plugin_list',  $va_plugins);
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('application_config_plugin_list',  $va_plugins);
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('barcode_config_component_list',  $va_barcode_components);
./administrate/setup/ConfigurationCheckController.php:		$this->view->setVar('metadata_extraction_config_component_list',  $va_md_extraction_components);
./administrate/setup/ConfigurationCheckController.php:		if (!(bool)$this->request->config->get('dont_do_expensive_configuration_checks_in_web_ui')) {
./administrate/setup/ConfigurationCheckController.php:				$this->view->setVar('configuration_check_errors', ConfigurationCheck::getErrors());
./administrate/setup/ConfigurationCheckController.php:		$this->render('config_check_html.php');
./administrate/setup/DataDictionaryController.php: 		if (!$this->request->user->canDoAction("can_configure_data_dictionary")) { 
./administrate/setup/DataDictionaryController.php:		$this->getView()->setVar('entries',  $entries = ca_metadata_dictionary_entries::getEntries());
./administrate/setup/DataDictionaryController.php:		$o_result_context = new ResultContext($this->getRequest(), 'ca_metadata_dictionary_entries', 'basic_search');
./administrate/setup/DataDictionaryController.php:		$this->render('data_dictionary_list_html.php');
./administrate/setup/DataDictionaryController.php:		$this->getView()->setVar('entries', sizeof($entries));
./administrate/setup/DataDictionaryController.php:		return $this->render('widget_data_dictionary_info_html.php', true);
./administrate/setup/ElementsController.php:		$this->view->setVar('element_list',$va_elements);
./administrate/setup/ElementsController.php:		$this->view->setVar('attribute_types', CA\Attributes\Attribute::getAttributeTypes());
./administrate/setup/ElementsController.php:		$o_result_context = new ResultContext($this->request, $this->ops_table_name, 'basic_search');
./administrate/setup/ElementsController.php:		return $this->render('elements_list_html.php');
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:		$this->view->setVar('available_settings',$t_element->getAvailableSettings());
./administrate/setup/ElementsController.php:		$this->view->setVar('type_list', $t_restriction->getTypeListsForTables());
./administrate/setup/ElementsController.php:			$this->view->setVar('sub_elements',$va_sub_elements);
./administrate/setup/ElementsController.php:			$this->view->setVar('type_restrictions', $va_type_restrictions = $t_element->getTypeRestrictions());
./administrate/setup/ElementsController.php:		$this->view->setVar('initial_restriction_values', $va_initial_values);
./administrate/setup/ElementsController.php:		if($vn_parent_id = $this->request->getParameter('parent_id', pInteger)){
./administrate/setup/ElementsController.php:			$this->view->setVar('parent_id',$vn_parent_id);
./administrate/setup/ElementsController.php:		$this->view->setVar('t_restriction', $t_restriction);
./administrate/setup/ElementsController.php:		$this->render('elements_edit_html.php');
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject(false);
./administrate/setup/ElementsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:		if($vn_parent_id = $this->request->getParameter('parent_id', pInteger)){
./administrate/setup/ElementsController.php:			$this->request->setParameter('element_id',$t_element->getPrimaryKey());
./administrate/setup/ElementsController.php:				$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:				$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:			$this->notification->addNotification($vs_message, __NOTIFICATION_TYPE_INFO__);
./administrate/setup/ElementsController.php:							$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:							$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:							$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:							$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:						$this->notification->addNotification(_t("Setting %2 is not valid: %1", $vs_error, $vs_setting_key), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:						$t_restriction->set('table_num', $this->request->getParameter('type_restrictions_table_num_'.$va_matches[1], pInteger));
./administrate/setup/ElementsController.php:						$t_restriction->set('type_id', ($vn_type_id = $this->request->getParameter('type_restrictions_type_id_'.$va_matches[1], pInteger)) ? $vn_type_id : null);
./administrate/setup/ElementsController.php:						$t_restriction->set('include_subtypes', ($vn_include_subtypes = $this->request->getParameter('type_restrictions_include_subtypes_'.$va_matches[1], pInteger)) ? $vn_include_subtypes : null);
./administrate/setup/ElementsController.php:							$t_restriction->setSetting($vs_setting, $this->request->getParameter('type_restrictions_setting_'.$vs_setting.'_'.$va_matches[1], pString));
./administrate/setup/ElementsController.php:					$t_restriction->set('table_num', $this->request->getParameter('type_restrictions_table_num_new_'.$va_matches[1], pInteger));
./administrate/setup/ElementsController.php:					$t_restriction->set('type_id', ($vn_type_id = $this->request->getParameter('type_restrictions_type_id_new_'.$va_matches[1], pInteger)) ? $vn_type_id : null);
./administrate/setup/ElementsController.php:					$t_restriction->set('include_subtypes', ($vn_include_subtypes = $this->request->getParameter('type_restrictions_include_subtypes_new_'.$va_matches[1], pInteger)) ? $vn_include_subtypes : null);
./administrate/setup/ElementsController.php:						$t_restriction->setSetting($vs_setting, $this->request->getParameter('type_restrictions_setting_'.$vs_setting.'_new_'.$va_matches[1], pString));
./administrate/setup/ElementsController.php:		$this->Edit();
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:		if ($this->request->getParameter('confirm', pInteger)) {
./administrate/setup/ElementsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php: 				$this->notification->addNotification(_t("Deleted metadata element"), __NOTIFICATION_TYPE_INFO__);
./administrate/setup/ElementsController.php: 			$this->Index();
./administrate/setup/ElementsController.php: 			$this->render('elements_delete_html.php');
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:		if(is_array($va_ranks_to_stabilize = $this->elementRankStabilizationNeeded($t_element->get('parent_id')))){
./administrate/setup/ElementsController.php:			$this->stabilizeElementRanks($t_element->get('parent_id'),$va_ranks_to_stabilize);
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:			$this->notification->addNotification(_t("This element is at the top of the list"), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:			$this->swapRanks($t_element, $t_element_rankswap);
./administrate/setup/ElementsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:		$this->request->setParameter('element_id',$this->request->getParameter('parent_id',pInteger));
./administrate/setup/ElementsController.php:		$this->Edit();
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:		if(is_array($va_ranks_to_stabilize = $this->elementRankStabilizationNeeded($t_element->get('parent_id')))){
./administrate/setup/ElementsController.php:			$this->stabilizeElementRanks($t_element->get('parent_id'),$va_ranks_to_stabilize);
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:			$this->notification->addNotification(_t("This element is at the bottom of the list"), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:			$this->swapRanks($t_element, $t_element_rankswap);
./administrate/setup/ElementsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/ElementsController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/ElementsController.php:		$this->request->setParameter('element_id',$this->request->getParameter('parent_id',pInteger));
./administrate/setup/ElementsController.php:		$this->Edit();
./administrate/setup/ElementsController.php:		if (!($vn_element_id = $this->request->getParameter('element_id', pInteger))) {
./administrate/setup/ElementsController.php: 			$this->view->setVar('element_id', $vn_element_id);
./administrate/setup/ElementsController.php: 			$this->view->setVar('t_element', $t_element);
./administrate/setup/ElementsController.php:			$pa_ranks = $this->elementRankStabilizationNeeded($pn_parent_id);
./administrate/setup/ElementsController.php:		$t_element = $this->getElementObject();
./administrate/setup/ElementsController.php:		$pn_datatype = $this->request->getParameter('datatype', pInteger);
./administrate/setup/ElementsController.php:				$t_element->setSetting(substr($vs_k, 8), $y=$this->request->getParameter($vs_k, pString));
./administrate/setup/ElementsController.php:		$this->view->setVar('available_settings',$t_element->getAvailableSettings());
./administrate/setup/ElementsController.php:		$this->render("ajax_elements_settings_form_html.php");
./administrate/setup/ElementsController.php:		return $this->render('widget_element_info_html.php', true);
./administrate/setup/InterfacesController.php:		$this->checkConfiguration();
./administrate/setup/InterfacesController.php:		$this->view->setVar('editor_ui_list',$va_uis);
./administrate/setup/InterfacesController.php:		$o_result_context = new ResultContext($this->request, $this->ops_table_name, 'basic_search');
./administrate/setup/InterfacesController.php: 		$this->view->setVar('table_list', caFilterTableList($t_ui->getFieldInfo('editor_type', 'BOUNDS_CHOICE_LIST')));
./administrate/setup/InterfacesController.php:		return $this->render('ui_list_html.php');
./administrate/setup/InterfacesController.php:		return $this->render('widget_ui_info_html.php', true);
./administrate/setup/ListsController.php:		$this->opa_views = array(
./administrate/setup/ListsController.php:		$this->opo_browse = new ListItemBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./administrate/setup/ListsController.php:		// because $this->ops_tablename is set to ca_list_items
./administrate/setup/ListsController.php:		$o_ca_lists_result_context = new ResultContext($po_request, 'ca_lists', $this->ops_find_type);
./administrate/setup/ListsController.php:		$pa_options['search'] = $this->opo_browse;
./administrate/setup/ListsController.php:		$this->opb_uses_hierarchy_browser = true;
./administrate/setup/ListsController.php:		$this->view->setVar('force_hierarchy_browser_open', 1);
./administrate/setup/ListsController.php:		$this->Index();
./administrate/setup/LocalesController.php:		$t_locale = $this->getLocaleObject();
./administrate/setup/LocalesController.php:		$this->render('locale_edit_html.php');
./administrate/setup/LocalesController.php:		$t_locale = $this->getLocaleObject();
./administrate/setup/LocalesController.php:				$this->request->addActionErrors($t_locale->errors(), 'field_'.$vs_f);
./administrate/setup/LocalesController.php:		if($this->request->numActionErrors() == 0) {
./administrate/setup/LocalesController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/LocalesController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/LocalesController.php:				$this->notification->addNotification($vs_message, __NOTIFICATION_TYPE_INFO__);
./administrate/setup/LocalesController.php:			$this->notification->addNotification(_t("Your entry has errors. See below for details."), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/LocalesController.php:		if ($this->request->numActionErrors()) {
./administrate/setup/LocalesController.php:			$this->render('locale_edit_html.php');
./administrate/setup/LocalesController.php:			$this->view->setVar('locale_list', ca_locales::getLocaleList());
./administrate/setup/LocalesController.php:			$this->render('locale_list_html.php');
./administrate/setup/LocalesController.php:		$t_locale = $this->getLocaleObject();
./administrate/setup/LocalesController.php:		$vs_sort_field = $this->request->getParameter('sort', pString);
./administrate/setup/LocalesController.php:		$this->view->setVar('locale_list', ca_locales::getLocaleList(array('sort_field' => $vs_sort_field, 'sort_order' => 'asc', 'index_by_code' => false)));
./administrate/setup/LocalesController.php:		$this->render('locale_list_html.php');
./administrate/setup/LocalesController.php:		$t_locale = $this->getLocaleObject();
./administrate/setup/LocalesController.php:		if ($this->request->getParameter('confirm', pInteger)) {
./administrate/setup/LocalesController.php:					$this->notification->addNotification(_t("Could not delete locale: %1", $o_e->getErrorMessage()), __NOTIFICATION_TYPE_ERROR__);
./administrate/setup/LocalesController.php:					$this->request->addActionError($o_e, 'general');
./administrate/setup/LocalesController.php:				$this->notification->addNotification(_t("Deleted locale"), __NOTIFICATION_TYPE_INFO__);
./administrate/setup/LocalesController.php:			$this->ListLocales();
./administrate/setup/LocalesController.php:			$this->render('locale_delete_html.php');
./administrate/setup/LocalesController.php:		if (!($t_locale = $this->pt_locale)) {
./administrate/setup/LocalesController.php:			if (!($vn_locale_id = $this->request->getParameter('locale_id', pInteger))) {
./administrate/setup/LocalesController.php:			$this->view->setVar('locale_id', $vn_locale_id);
./administrate/setup/LocalesController.php:			$this->view->setVar('t_locale', $t_locale);
./administrate/setup/LocalesController.php:		$this->pt_locale = $t_locale;
./administrate/setup/RelationshipTypesController.php:		$this->opa_views = array(
./administrate/setup/RelationshipTypesController.php:		$this->opb_uses_hierarchy_browser = true;
./administrate/setup/RelationshipTypesController.php:		$this->view->setVar('force_hierarchy_browser_open', 1);
./administrate/setup/RelationshipTypesController.php:		$this->Index();
./batch/MediaUploaderController.php: 			$this->render('mediauploader/index_html.php');
./batch/MediaUploaderController.php: 		    $this->request->getUser()->canDoAction('is_media_uploader_administrator', ['throwException' => true]);
./batch/MediaUploaderController.php: 			$this->render('mediauploader/admin_html.php');
./batch/MediaUploaderController.php:            $user_id = $this->request->getUserID();
./batch/MediaUploaderController.php:           		$this->view->setVar('response', ['error' => $e->getMessage(), 'global' => true, 'state' => 'quota']);
./batch/MediaUploaderController.php:           		$this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php: 		    $user_id = $this->request->getUserID();
./batch/MediaUploaderController.php: 		    $num_files = $this->request->getParameter('n', pInteger);
./batch/MediaUploaderController.php: 		    $size = $this->request->getParameter('size', pInteger);
./batch/MediaUploaderController.php: 		    $max_num_files = (int)$this->request->config->get('media_uploader_max_files_per_session');
./batch/MediaUploaderController.php:				$this->view->setVar('response', array_merge(['ok' => 1, 'key' => $session->get('session_key')], caGetUserMediaStorageUsageStats($user_id)));
./batch/MediaUploaderController.php:				$this->view->setVar('response', ['ok' => 0, 'errors' => $errors]);
./batch/MediaUploaderController.php:			$this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php: 		    $user_id = $this->request->getUserID();
./batch/MediaUploaderController.php:			$this->view->setVar('response', array_merge(['ok' => 1], caGetUserMediaStorageUsageStats($user_id)));
./batch/MediaUploaderController.php:			$this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php: 		    $user_id = $this->request->getUserID();
./batch/MediaUploaderController.php: 		    $this->view->setVar('response', array_merge(['ok' => 0, 'recent' => $recent], caGetUserMediaStorageUsageStats($user_id)));
./batch/MediaUploaderController.php: 		    $this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php:            $key = $this->request->getParameter('key', pString);
./batch/MediaUploaderController.php:            $user_id = $this->request->getUserID();
./batch/MediaUploaderController.php:				$this->view->setVar('response', array_merge(
./batch/MediaUploaderController.php:				$this->view->setVar('response', ['ok' => 0, 'errors' => [$e->getMessage()]]);
./batch/MediaUploaderController.php:            $this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php:            $key = $this->request->getParameter('key', pString);
./batch/MediaUploaderController.php:            $user_id = $this->request->getUserID();
./batch/MediaUploaderController.php:				$this->view->setVar('response', array_merge(
./batch/MediaUploaderController.php:				$this->view->setVar('response', ['ok' => 0, 'errors' => [$e->getMessage()]]);
./batch/MediaUploaderController.php:            $this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php: 		    $this->request->getUser()->canDoAction('is_media_uploader_administrator', ['throwException' => true]);
./batch/MediaUploaderController.php:        	$user = $this->request->getParameter('user', pString);
./batch/MediaUploaderController.php:        	$status = $this->request->getParameter('status', pString);
./batch/MediaUploaderController.php:        	$date = $this->request->getParameter('date', pString);
./batch/MediaUploaderController.php: 		    $this->view->setVar('response', ['ok' => 0, 'userList' => array_values(MediaUploadManager::getUserList()), 'data' => $recent]);
./batch/MediaUploaderController.php: 		    $this->render('mediauploader/response_json.php');
./batch/MediaUploaderController.php: 			return $this->render('mediauploader/widget_media_uploader_html.php', true);
./batch/EditorController.php:		$this->app_plugin_manager = new ApplicationPluginManager();
./batch/EditorController.php:		$this->result_context = new ResultContext($po_request, $this->ops_table_name, ResultContext::getLastFind($po_request, $this->ops_table_name));
./batch/EditorController.php:		list($rs, $t_subject, $t_ui) = $this->_initView($options);
./batch/EditorController.php:		$this->view->setVar('batch_editor_last_settings', $va_last_settings = is_array($va_last_settings = $this->request->user->getVar('batch_editor_last_settings')) ? $va_last_settings : []);
./batch/EditorController.php:		$va_nav = $t_ui->getScreensAsNavConfigFragment($this->request, null, $this->request->getModulePath(), $this->request->getController(), $this->request->getAction(),
./batch/EditorController.php:		if (!$this->request->getActionExtra() || !isset($va_nav['fragment'][str_replace("Screen", "screen_", $this->request->getActionExtra())])) {
./batch/EditorController.php:			$this->request->setActionExtra($va_nav['defaultScreen']);
./batch/EditorController.php:		$this->view->setVar('t_ui', $t_ui);
./batch/EditorController.php:		$this->view->setVar('recordSet', $rs);
./batch/EditorController.php:		$this->render('editor/screen_html.php');
./batch/EditorController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./batch/EditorController.php:	    	$this->Edit();
./batch/EditorController.php:		list($rs, $t_subject, $t_ui) = $this->_initView($options);
./batch/EditorController.php:			'screen' => $this->request->getActionExtra(),
./batch/EditorController.php:			'user_id' => $this->request->getUserID(),
./batch/EditorController.php:			'sendMail' => (bool)$this->request->getParameter('send_email_when_done', pInteger),
./batch/EditorController.php:			'sendSMS' => (bool)$this->request->getParameter('send_sms_when_done', pInteger)
./batch/EditorController.php:		if ((bool)$this->request->config->get('queue_enabled') && (bool)$this->request->getParameter('run_in_background', pInteger)) { // queue for background processing
./batch/EditorController.php:			$vs_row_key = $vs_entity_key = join("/", array($this->request->getUserID(), $rs->ID(), time(), rand(1,999999)));
./batch/EditorController.php:				["priority" => 100, "entity_key" => $vs_entity_key, "row_key" => $vs_row_key, 'user_id' => $this->request->getUserID()]))
./batch/EditorController.php:				//$this->postError(100, _t("Couldn't queue batch processing for"),"EditorContro->_processMedia()");
./batch/EditorController.php:			$this->render('editor/batch_queued_html.php');
./batch/EditorController.php:			$app->registerPlugin(new BatchEditorProgress($this->request, $rs, $t_subject, array('sendMail' => (bool)$this->request->getParameter('send_email_when_done', pInteger), 'sendSMS' => (bool)$this->request->getParameter('send_sms_when_done', pInteger), 'runInBackground' => (bool)$this->request->getParameter('run_in_background', pInteger))));
./batch/EditorController.php:			$this->render('editor/batch_results_html.php');
./batch/EditorController.php:		$this->request->user->setVar('batch_editor_last_settings', $va_last_settings);
./batch/EditorController.php:		list($rs, $t_subject, $t_ui) = $this->_initView($options);
./batch/EditorController.php:		if (!$this->request->user->canDoAction('can_batch_delete_'.Datamodel::getTableName($rs->tableNum()))) {
./batch/EditorController.php:		if ($vb_confirm = ($this->request->getParameter('confirm', pInteger) == 1) ? true : false) {
./batch/EditorController.php:			$this->view->setVar('confirmed',true);
./batch/EditorController.php:			$app->registerPlugin(new BatchEditorProgress($this->request, $rs, $t_subject, ['isBatchDelete' => true]));
./batch/EditorController.php:		$this->render('editor/delete_html.php');
./batch/EditorController.php:		list($rs, $t_subject, $t_ui) = $this->_initView($options);
./batch/EditorController.php:		if (!$this->request->user->canDoAction("can_change_type_".$t_subject->tableName()) || !method_exists($t_subject, "getTypeList")) {
./batch/EditorController.php:		$vn_new_type_id = $this->request->getParameter('new_type_id', pInteger);
./batch/EditorController.php:			'screen' => $this->request->getActionExtra(),
./batch/EditorController.php:			'user_id' => $this->request->getUserID(),
./batch/EditorController.php:			'sendMail' => (bool)$this->request->getParameter('send_email_when_done', pInteger),
./batch/EditorController.php:			'sendSMS' => (bool)$this->request->getParameter('send_sms_when_done', pInteger)
./batch/EditorController.php:		if ((bool)$this->request->config->get('queue_enabled') && (bool)$this->request->getParameter('run_in_background', pInteger)) { // queue for background processing
./batch/EditorController.php:			$vs_row_key = $vs_entity_key = join("/", array($this->request->getUserID(), $rs->ID(), time(), rand(1,999999)));
./batch/EditorController.php:				array("priority" => 100, "entity_key" => $vs_entity_key, "row_key" => $vs_row_key, 'user_id' => $this->request->getUserID())))
./batch/EditorController.php:				//$this->postError(100, _t("Couldn't queue batch processing for"),"EditorContro->_processMedia()");
./batch/EditorController.php:			$this->render('editor/batch_queued_html.php');
./batch/EditorController.php:			$app->registerPlugin(new BatchEditorProgress($this->request, $rs, $t_subject, ['type_id' => $vn_new_type_id, 'isBatchTypeChange' => true, 'sendMail' => (bool)$this->request->getParameter('send_email_when_done', pInteger), 'sendSMS' => (bool)$this->request->getParameter('send_sms_when_done', pInteger), 'runInBackground' => (bool)$this->request->getParameter('run_in_background', pInteger)]));
./batch/EditorController.php:			$this->render('editor/batch_results_html.php');
./batch/EditorController.php:		$this->request->user->setVar('batch_editor_last_settings', $va_last_settings);
./batch/EditorController.php:		$id_parts = explode(':', $this->request->getParameter(['id', 'set_id'], pString));
./batch/EditorController.php:			$rc = new ResultContext($this->request, $table, 'BatchEdit');
./batch/EditorController.php:			if (!$t_set->haveAccessToSet($this->request->getUserID(), __CA_SET_READ_ACCESS__)) {
./batch/EditorController.php:		if(!$this->request->user->canDoAction('can_batch_edit_'.$rs->tableName())) {
./batch/EditorController.php:		if ($rs->getItemCount(['user_id' => $this->request->getUserID()]) <= 0) { 
./batch/EditorController.php:			$t_ui->load($this->request->user->getPreference("batch_".$t_subject->tableName()."_editor_ui"));
./batch/EditorController.php:			$t_ui = ca_editor_uis::loadDefaultUI($t_subject->tableName(), $this->request, $t_subject->getTypeID());
./batch/EditorController.php:		$this->view->setVar('id', $rs->ID());
./batch/EditorController.php:		$this->view->setVar('record_selection', $rs);
./batch/EditorController.php:		$this->view->setVar('t_subject', $t_subject);
./batch/EditorController.php:		$vn_item_count = $rs->getItemCount(array('user_id' => $this->request->getUserID()));
./batch/EditorController.php:		return $this->result_context;
./batch/EditorController.php:		list($rs, $t_subject, $t_ui) = $this->_initView($options);
./batch/EditorController.php:		if (!$this->request->isLoggedIn()) { return []; }
./batch/EditorController.php:			$vn_type_id = $this->request->getParameter($t_subject->getTypeFieldName(), pInteger);
./batch/EditorController.php:		$va_nav = $t_ui->getScreensAsNavConfigFragment($this->request, $vn_type_id, $pa_params['default']['module'], $pa_params['default']['controller'], $pa_params['default']['action'],
./batch/EditorController.php:		if (!$this->request->getActionExtra()) {
./batch/EditorController.php:			$this->request->setActionExtra($va_nav['defaultScreen']);
./batch/EditorController.php:		list($rs, $t_subject, $t_ui) = $this->_initView();
./batch/EditorController.php:		// if (!$t_set->haveAccessToSet($this->request->getUserID(), __CA_SET_READ_ACCESS__)) {
./batch/EditorController.php:		$this->view->setVar('record_selection', $rs);
./batch/EditorController.php:		$this->view->setVar('id', $rs->ID());
./batch/EditorController.php:		$this->view->setVar('t_item', $t_item);
./batch/EditorController.php:		$this->view->setVar('screen', $this->request->getActionExtra());						// name of screen
./batch/EditorController.php:		$this->view->setVar('result_context', $this->getResultContext());
./batch/EditorController.php:		return $this->render('editor/widget_batch_info_html.php', true);
./batch/MediaImportController.php:		$this->user_can_delete_media_on_import = (bool)$po_request->user->canDoAction('allow_delete_media_after_import');
./batch/MediaImportController.php:		$this->opo_app_plugin_manager = new ApplicationPluginManager();
./batch/MediaImportController.php:		$this->opo_result_context = new ResultContext($po_request, $this->ops_table_name, ResultContext::getLastFind($po_request, $this->ops_table_name));
./batch/MediaImportController.php:		$this->opa_importable_tables = array(
./batch/MediaImportController.php:		foreach($this->opa_importable_tables as $vs_key => $vs_table) {
./batch/MediaImportController.php:			if($this->getRequest()->getAppConfig()->get($vs_table.'_disable')) {
./batch/MediaImportController.php:				unset($this->opa_importable_tables[$vs_key]);
./batch/MediaImportController.php:		list($t_ui) = $this->_initView($pa_options);
./batch/MediaImportController.php:		$this->view->setVar('batch_mediaimport_last_settings', $va_last_settings = is_array($va_last_settings = $this->request->user->getVar('batch_mediaimport_last_settings')) ? $va_last_settings : array());
./batch/MediaImportController.php:		$vs_import_target = $this->getRequest()->getParameter('target', pString);
./batch/MediaImportController.php:		$this->getView()->setVar('import_target', $vs_import_target);
./batch/MediaImportController.php:		$va_nav = $t_ui->getScreensAsNavConfigFragment($this->request, null, $this->request->getModulePath(), $this->request->getController(), $this->request->getAction(),
./batch/MediaImportController.php:		if (!$this->request->getActionExtra() || !isset($va_nav['fragment'][str_replace("Screen", "screen_", $this->request->getActionExtra())])) {
./batch/MediaImportController.php:			$this->request->setActionExtra($va_nav['defaultScreen'] ?? null);
./batch/MediaImportController.php:		$this->view->setVar('t_ui', $t_ui);
./batch/MediaImportController.php:		$this->view->setVar('import_target', caHTMLSelect('import_target', $this->opa_importable_tables, array(
./batch/MediaImportController.php:			'onchange' => 'window.location.replace("'.caNavUrl($this->getRequest(), $this->getRequest()->getModulePath(), $this->getRequest()->getController(), $this->getRequest()->getAction()) . '/target/" + jQuery("#caImportTargetSelect").val()); return false;'
./batch/MediaImportController.php:		$this->view->setVar('import_mode', caHTMLSelect('import_mode', $import_modes, ['id' => 'importMode'], ['value' => $va_last_settings['importMode'] ?? null]));
./batch/MediaImportController.php:		$this->view->setVar('match_mode', caHTMLSelect('match_mode', [
./batch/MediaImportController.php:		$this->view->setVar('match_type', caHTMLSelect('match_type', [
./batch/MediaImportController.php:		$this->view->setVar('user_can_delete_media_on_import', $this->user_can_delete_media_on_import);
./batch/MediaImportController.php:		$this->view->setVar($vs_import_target.'_type_list', $t_instance->getTypeListAsHTMLFormElement($vs_import_target.'_type_id', ['id' => 'primary_type_id'], array('value' => $va_last_settings[$vs_import_target.'_type_id'] ?? null)));
./batch/MediaImportController.php:		$this->view->setVar($vs_import_target.'_parent_type_list', $t_instance->getTypeListAsHTMLFormElement($vs_import_target.'_parent_type_id', ['id' => 'parent_type_id'], array('value' => $va_last_settings[$vs_import_target.'_parent_type_id'] ?? $t_instance->getTypeIDForCode($o_config->get('media_importer_hierarchy_parent_type')))));
./batch/MediaImportController.php:		$this->view->setVar($vs_import_target.'_child_type_list', $t_instance->getTypeListAsHTMLFormElement($vs_import_target.'_child_type_id', ['id' => 'child_type_id'], array('value' => $va_last_settings[$vs_import_target.'_child_type_id'] ?? $t_instance->getTypeIDForCode($o_config->get('media_importer_hierarchy_child_type')))));
./batch/MediaImportController.php:		$this->view->setVar($vs_import_target.'_limit_to_types_list', $t_instance->getTypeListAsHTMLFormElement($vs_import_target.'_limit_matching_to_type_ids[]', array('multiple' => 1), array('height' => '100px', 'values' => $va_last_settings[$vs_import_target.'_limit_matching_to_type_ids'] ?? null)));
./batch/MediaImportController.php:		$this->view->setVar('ca_object_representations_type_list', $t_rep->getTypeListAsHTMLFormElement('ca_object_representations_type_id', null, array('value' => $va_last_settings['ca_object_representations_type_id'] ?? null)));
./batch/MediaImportController.php:			$this->getView()->setVar($vs_import_target.'_representation_relationship_type', $t_rel->getRelationshipTypesAsHTMLSelect('ltor',null,null, array('name' => $vs_import_target.'_representation_relationship_type'), array('value' => $va_last_settings[$vs_import_target.'_representation_relationship_type'])));
./batch/MediaImportController.php:		if((bool)$this->request->config->get('allow_user_selection_of_embedded_metadata_extraction_mapping')) {
./batch/MediaImportController.php:			$add_null_opt = (bool)$this->request->config->get('allow_user_embedded_metadata_extraction_mapping_null_option');
./batch/MediaImportController.php:			$this->view->setVar($vs_import_target.'_mapping_list', caHTMLSelect($vs_import_target.'_mapping_id', $va_object_importer_options, array(), array('value' => $va_last_settings[$vs_import_target.'_mapping_id'])));
./batch/MediaImportController.php:			$this->view->setVar($vs_import_target.'_mapping_list_count', $c);
./batch/MediaImportController.php:			$this->view->setVar('ca_object_representations_mapping_list', caHTMLSelect('ca_object_representations_mapping_id', $va_object_representation_importer_options, array(), array('value' => $va_last_settings['ca_object_representations_mapping_id'])));
./batch/MediaImportController.php:			$this->view->setVar('ca_object_representations_mapping_list_count', $c);
./batch/MediaImportController.php:		$va_available_set_list = caExtractValuesByUserLocale($t_set->getSets(array('table' => $vs_import_target, 'user_id' => $this->request->getUserID(), 'access' => __CA_SET_EDIT_ACCESS__, 'omitCounts' => true)));
./batch/MediaImportController.php:		$this->view->setVar('available_sets', $va_available_sets);
./batch/MediaImportController.php:		$this->view->setVar('t_instance', $t_instance);
./batch/MediaImportController.php:		$this->view->setVar('t_rep', $t_rep);
./batch/MediaImportController.php:		$this->render('mediaimport/import_options_html.php');
./batch/MediaImportController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./batch/MediaImportController.php:			$this->Index();
./batch/MediaImportController.php:		list($t_ui) = $this->_initView($pa_options);
./batch/MediaImportController.php:		$vs_import_target = $this->getRequest()->getParameter('import_target', pString);
./batch/MediaImportController.php:		$directory = $this->request->getParameter('directory', pString);
./batch/MediaImportController.php:		if (!caIsValidMediaImportDirectory($directory, ['user_id' => $this->request->getUserID()])) {
./batch/MediaImportController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3250?r='.urlencode($this->request->getFullUrlPath()));
./batch/MediaImportController.php:			'sendMail' => (bool)$this->request->getParameter('send_email_when_done', pInteger), 
./batch/MediaImportController.php:			'sendSMS' => (bool)$this->request->getParameter('send_sms_when_done', pInteger), 
./batch/MediaImportController.php:			'runInBackground' => (bool)$this->request->getParameter('run_in_background', pInteger),
./batch/MediaImportController.php:			'includeSubDirectories' => (bool)$this->request->getParameter('include_subdirectories', pInteger),
./batch/MediaImportController.php:			'deleteMediaOnImport' => $this->user_can_delete_media_on_import && (bool)$this->request->getParameter('delete_media_on_import', pInteger),
./batch/MediaImportController.php:			'importMode' => $this->request->getParameter('import_mode', pString),
./batch/MediaImportController.php:			'matchMode' => $this->request->getParameter('match_mode', pString),
./batch/MediaImportController.php:			'matchType' => $this->request->getParameter('match_type', pString),
./batch/MediaImportController.php:			$vs_import_target.'_limit_matching_to_type_ids' => $this->request->getParameter($vs_import_target.'_limit_matching_to_type_ids', pArray),
./batch/MediaImportController.php:			$vs_import_target.'_type_id' => $this->request->getParameter($vs_import_target.'_type_id', pInteger),
./batch/MediaImportController.php:			$vs_import_target.'_parent_type_id' => $this->request->getParameter($vs_import_target.'_parent_type_id', pInteger),
./batch/MediaImportController.php:			$vs_import_target.'_child_type_id' => $this->request->getParameter($vs_import_target.'_child_type_id', pInteger),
./batch/MediaImportController.php:			'ca_object_representations_type_id' => $this->request->getParameter('ca_object_representations_type_id', pInteger),
./batch/MediaImportController.php:			$vs_import_target.'_status' => $this->request->getParameter($vs_import_target.'_status', pInteger),
./batch/MediaImportController.php:			'ca_object_representations_status' => $this->request->getParameter('ca_object_representations_status', pInteger),
./batch/MediaImportController.php:			$vs_import_target.'_access' => $this->request->getParameter($vs_import_target.'_access', pInteger),
./batch/MediaImportController.php:			'ca_object_representations_access' => $this->request->getParameter('ca_object_representations_access', pInteger),
./batch/MediaImportController.php:			$vs_import_target.'_mapping_id' => $this->request->getParameter($vs_import_target.'_mapping_id', pInteger),
./batch/MediaImportController.php:			'ca_object_representations_mapping_id' => $this->request->getParameter('ca_object_representations_mapping_id', pInteger),
./batch/MediaImportController.php:			'setMode' => $this->request->getParameter('set_mode', pString),
./batch/MediaImportController.php:			'setCreateName' => $this->request->getParameter('set_create_name', pString),
./batch/MediaImportController.php:			'set_id' => $this->request->getParameter('set_id', pInteger),
./batch/MediaImportController.php:			'idnoMode' => $this->request->getParameter('idno_mode', pString),
./batch/MediaImportController.php:			'labelMode' => $this->request->getParameter('label_mode', pString),
./batch/MediaImportController.php:			'labelText' => $this->request->getParameter('label_text', pString),
./batch/MediaImportController.php:			'idno' => $this->request->getParameter('idno', pString),
./batch/MediaImportController.php:			'representationIdnoMode' => $this->request->getParameter('representation_idno_mode', pString),
./batch/MediaImportController.php:			'representation_idno' => $this->request->getParameter('idno_representation_number', pString),
./batch/MediaImportController.php:			'logLevel' => $this->request->getParameter('log_level', pString),
./batch/MediaImportController.php:			'allowDuplicateMedia' => $this->request->getParameter('allow_duplicate_media', pInteger),
./batch/MediaImportController.php:			'replaceExistingMedia' => $this->request->getParameter('replace_existing_media', pInteger),
./batch/MediaImportController.php:			'user_id' => $this->request->getUserID(),
./batch/MediaImportController.php:			'skipFileList' => $this->request->getParameter('skip_file_list', pString),
./batch/MediaImportController.php:		if($vn_rel_type = $this->request->getParameter($vs_import_target.'_representation_relationship_type', pInteger)) {
./batch/MediaImportController.php:		if (is_array($va_create_relationships_for = $this->request->getParameter('create_relationship_for', pArray))) {
./batch/MediaImportController.php:				$va_options['relationship_type_id_for_'.$vs_rel_table] = $this->request->getParameter('relationship_type_id_for_'.$vs_rel_table, pString);
./batch/MediaImportController.php:		$this->request->user->setVar('batch_mediaimport_last_settings', $va_last_settings);
./batch/MediaImportController.php:		if ((bool)$this->request->config->get('queue_enabled') && (bool)$this->request->getParameter('run_in_background', pInteger)) { // queue for background processing
./batch/MediaImportController.php:			$vs_row_key = $vs_entity_key = join("/", array($this->request->getUserID(), $va_options['importFromDirectory'], time(), rand(1,999999)));
./batch/MediaImportController.php:				array("priority" => 100, "entity_key" => $vs_entity_key, "row_key" => $vs_row_key, 'user_id' => $this->request->getUserID())))
./batch/MediaImportController.php:				//$this->postError(100, _t("Couldn't queue batch processing for"),"EditorContro->_processMedia()");	
./batch/MediaImportController.php:			$this->render('mediaimport/batch_queued_html.php');
./batch/MediaImportController.php:			$app->registerPlugin(new BatchMediaImportProgress($this->request, $va_options));
./batch/MediaImportController.php:			$this->render('mediaimport/batch_results_html.php');
./batch/MediaImportController.php:			$pa_options['ui'] = $this->request->user->getPreference("batch_ca_object_media_import_ui");
./batch/MediaImportController.php:			$t_ui = ca_editor_uis::loadDefaultUI('ca_objects', $this->request, null);
./batch/MediaImportController.php:		return $this->opo_result_context;
./batch/MediaImportController.php:		$ps_id = $this->request->getParameter('id', pString);
./batch/MediaImportController.php:		$pn_max = $this->request->getParameter('max', pString);
./batch/MediaImportController.php:		$user_import_root_directory = caGetMediaUploadPathForUser($this->request->getUserID());
./batch/MediaImportController.php:		if ($this->request->getParameter('init', pInteger)) { 
./batch/MediaImportController.php:				$va_level_data["{$vs_k}|{$vn_i}"] = $va_file_list = $this->_getDirectoryListing([$user_import_root_directory.'/'.$vs_directory, $shared_import_root_directory.'/'.$vs_directory], false, 20, (int)$vn_start, (int)$pn_max);
./batch/MediaImportController.php:				$va_file_list = $this->_getDirectoryListing([$user_import_root_directory.'/'.$ps_directory, $shared_import_root_directory.'/'.$ps_directory], false, 20, (int)$pn_start, (int)$pn_max);
./batch/MediaImportController.php:		$this->view->setVar('directory_list', caSanitizeArray($va_level_data));
./batch/MediaImportController.php:		$this->render('mediaimport/directory_level_json.php');
./batch/MediaImportController.php:		$ps_id = $this->request->getParameter('id', pString);
./batch/MediaImportController.php:		$this->view->setVar("ancestors", $va_ancestors);
./batch/MediaImportController.php:		$this->render('mediaimport/directory_ancestors_json.php');
./batch/MediaImportController.php:		$directory = $this->request->getParameter('path', pString);
./batch/MediaImportController.php:		$upload_path = caIsValidMediaImportDirectory($directory, ['user_id' => $this->request->getUserID()]);
./batch/MediaImportController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3250?r='.urlencode($this->request->getFullUrlPath()));
./batch/MediaImportController.php:		$this->view->setVar('response', $response);
./batch/MediaImportController.php:		$this->render('mediaimport/file_upload_response_json.php');
./batch/MediaImportController.php:		$file = preg_replace("![^A-Za-z0-9_]+!", "", $this->request->getParameter('file', pString));
./batch/MediaImportController.php:			$o_view = new View($this->request, $this->request->getViewsDirectoryPath().'/bundles/');
./batch/MediaImportController.php:			$this->response->addContent($o_view->render('download_file_binary.php'));
./batch/MediaImportController.php:			$this->notification->addNotification(_t('Invalid log'), __NOTIFICATION_TYPE_ERROR__);
./batch/MediaImportController.php:			$this->Index();
./batch/MediaImportController.php:		$this->view->setVar('screen', $this->request->getActionExtra());						// name of screen
./batch/MediaImportController.php:		$this->view->setVar('result_context', $this->getResultContext());
./batch/MediaImportController.php:		return $this->render('mediaimport/widget_batch_info_html.php', true);
./batch/MetadataImportController.php:		$this->opo_app_plugin_manager = new ApplicationPluginManager();
./batch/MetadataImportController.php:		$this->opo_result_context = new ResultContext($po_request, $this->ops_table_name, ResultContext::getLastFind($po_request, $this->ops_table_name));
./batch/MetadataImportController.php:		$this->view->setVar('importer_list', $va_importers);
./batch/MetadataImportController.php:		$this->render('metadataimport/importer_list_html.php');
./batch/MetadataImportController.php:		$this->render('metadataimport/importer_edit_html.php');
./batch/MetadataImportController.php:				if ($t_importer = ca_data_importers::loadImporterFromFile($va_file['tmp_name'][$vn_i], $va_errors, array('logDirectory' => $this->request->config->get('batch_metadata_import_log_directory'), 'logLevel' => KLogger::INFO, 'originalFilename' => $vs_name))) {
./batch/MetadataImportController.php:		$this->view->setVar('response', $va_response);
./batch/MetadataImportController.php:		$this->render('mediaimport/file_upload_response_json.php');
./batch/MetadataImportController.php:		$t_importer = $this->getImporterInstance();
./batch/MetadataImportController.php:		$this->view->setVar('t_importer', $t_importer);
./batch/MetadataImportController.php:		$this->view->setVar('last_settings', $va_last_settings = $this->request->user->getVar('batch_metadata_last_settings'));
./batch/MetadataImportController.php:		$o_view = new View($this->request, $this->request->getViewsDirectoryPath().'/bundles/');	
./batch/MetadataImportController.php:		$this->view->setVar('file_browser', $o_view->render('settings_directory_browser_html.php'));
./batch/MetadataImportController.php:		$this->render('metadataimport/importer_run_html.php');
./batch/MetadataImportController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./batch/MetadataImportController.php:			$this->Index();
./batch/MetadataImportController.php:		$t_importer = $this->getImporterInstance();
./batch/MetadataImportController.php:			return $this->Index();
./batch/MetadataImportController.php:			'sendMail' => (bool)$this->request->getParameter('send_email_when_done', pInteger), 
./batch/MetadataImportController.php:			'sendSMS' => (bool)$this->request->getParameter('send_sms_when_done', pInteger), 
./batch/MetadataImportController.php:			'runInBackground' => (bool)$this->request->getParameter('run_in_background', pInteger),
./batch/MetadataImportController.php:			'user_id' => $this->request->getUserID(),
./batch/MetadataImportController.php:			'logLevel' => $this->request->getParameter("logLevel", pInteger),
./batch/MetadataImportController.php:			'limitLogTo' => $this->request->getParameter("limitLogTo", pArray),
./batch/MetadataImportController.php:			'dryRun' => $this->request->getParameter("dryRun", pInteger),
./batch/MetadataImportController.php:			'fileInput' => $this->request->getParameter("fileInput", pString), // where data is drawn from (uploaded file/import directory/GoogleDrive)
./batch/MetadataImportController.php:			'fileImportPath' => $this->request->getParameter("fileImportPath", pString), // path relative to import directory when fileInput='import'
./batch/MetadataImportController.php:			'importAllDatasets' => (bool)$this->request->getParameter("importAllDatasets", pInteger), 
./batch/MetadataImportController.php:			'importer_id' => $this->request->getParameter("importer_id", pInteger),
./batch/MetadataImportController.php:			'inputFormat' => $this->request->getParameter("inputFormat", pString),
./batch/MetadataImportController.php:			'sourceUrl' => $this->request->getParameter('sourceUrl', pString),
./batch/MetadataImportController.php:			'sourceText' => $this->request->getParameter('sourceText', pString)
./batch/MetadataImportController.php:		if ($vs_file_input = $this->request->getParameter("fileInput", pString)) {
./batch/MetadataImportController.php:		if ($vs_file_import_path = $this->request->getParameter("fileImportPath", pString)) {
./batch/MetadataImportController.php:				if ($google_url = caValidateGoogleSheetsUrl($google_url_orig = $this->request->getParameter('google_drive_url', pString, ['urldecode' => true]))) {
./batch/MetadataImportController.php:						$this->notification->addNotification($e->getMessage(), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:						return $this->Run();
./batch/MetadataImportController.php:					$this->notification->addNotification(_t("URL is invalid"), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:					return $this->Run();
./batch/MetadataImportController.php:					$this->notification->addNotification(_t("No data specified"), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:					return $this->Run();
./batch/MetadataImportController.php:		$this->request->user->setVar('batch_metadata_last_settings', $options);
./batch/MetadataImportController.php:		$this->view->setVar("t_subject", $t_subject);
./batch/MetadataImportController.php:		if ((bool)$this->request->config->get('queue_enabled') && (bool)$this->request->getParameter('run_in_background', pInteger)) { 
./batch/MetadataImportController.php:			$entity_key = join('-', array($this->request->getUserID(), $options['importFromDirectory'], time(), rand(1,999999)));
./batch/MetadataImportController.php:				["priority" => 100, "entity_key" => $entity_key, "row_key" => $entity_key, 'user_id' => $this->request->getUserID()]
./batch/MetadataImportController.php:				//$this->postError(100, _t("Couldn't queue batch processing for"),"EditorContro->_processMedia()");	
./batch/MetadataImportController.php:			$this->render('metadataimport/batch_queued_html.php');
./batch/MetadataImportController.php:			$app->registerPlugin(new BatchMetadataImportProgress($this->request, $options));
./batch/MetadataImportController.php:			$this->render('metadataimport/batch_results_html.php');
./batch/MetadataImportController.php:		$t_importer = $this->getImporterInstance();
./batch/MetadataImportController.php:		if ($this->request->getParameter('confirm', pInteger)) {
./batch/MetadataImportController.php:					$this->request->addActionError($o_e, 'general');
./batch/MetadataImportController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:				$this->notification->addNotification(_t("Deleted importer"), __NOTIFICATION_TYPE_INFO__);
./batch/MetadataImportController.php:			$this->Index();
./batch/MetadataImportController.php:			$this->render('metadataimport/importer_delete_html.php');
./batch/MetadataImportController.php:		if(!($google_url = trim($this->request->getParameter('google_drive_url', pString, ['urlDecode' => true])))) {
./batch/MetadataImportController.php:			$this->notification->addNotification(_t('No url specified'), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:			return $this->Index();
./batch/MetadataImportController.php:			$this->notification->addNotification(_t("URL is invalid"), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:			return $this->Index();
./batch/MetadataImportController.php:				$this->notification->addNotification(_t('Could not download data'), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:				return $this->Index();
./batch/MetadataImportController.php:			$this->notification->addNotification($e->getMessage(), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:			return $this->Index();
./batch/MetadataImportController.php:			$t_importer = ca_data_importers::loadImporterFromFile($tmp_file, $errors, ['logDirectory' => $this->request->config->get('batch_metadata_import_log_directory'), 'logLevel' => KLogger::INFO, 'sourceUrl' => $google_url], $is_new);
./batch/MetadataImportController.php:			$this->notification->addNotification($is_new ? _t("Added import worksheet %1", $t_importer->get('importer_code')) : _t("Updated import worksheet %1", $t_importer->get('importer_code')), __NOTIFICATION_TYPE_INFO__);
./batch/MetadataImportController.php:			$this->notification->addNotification(_t("Could not add import worksheet: %1", join("; ", $errors)), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:		$this->Index();
./batch/MetadataImportController.php:		if(($vn_importer_id = $this->request->getParameter("importer_id", pInteger)) && $t_importer->load($vn_importer_id) && $t_importer->getFileInfo('worksheet')) {
./batch/MetadataImportController.php:			$o_view = new View($this->request, $this->request->getViewsDirectoryPath().'/bundles/');
./batch/MetadataImportController.php:			$this->response->addContent($o_view->render('download_file_binary.php'));
./batch/MetadataImportController.php:			$this->notification->addNotification(_t('Invalid importer'), __NOTIFICATION_TYPE_ERROR__);
./batch/MetadataImportController.php:			$this->Index();
./batch/MetadataImportController.php:		if (!($vn_importer_id = $this->request->getParameter('importer_id', pInteger))) {
./batch/MetadataImportController.php:			$this->view->setVar('importer_id', $vn_importer_id);
./batch/MetadataImportController.php:			$this->view->setVar('t_importer', $t_importer);
./batch/MetadataImportController.php:		$t_importer = $this->getImporterInstance(false);
./batch/MetadataImportController.php:		$this->view->setVar('t_item', $t_importer);
./batch/MetadataImportController.php:		$this->view->setVar('result_context', $this->opo_result_context);
./batch/MetadataImportController.php:		$this->view->setVar('screen', $this->request->getActionExtra());	
./batch/MetadataImportController.php:		return $this->render('metadataimport/widget_importer_info_html.php', true);
./editor/collections/CollectionEditorController.php: 			return $this->render('widget_collection_info_html.php', true);
./editor/entities/EntityEditorController.php: 			return $this->render('widget_entity_info_html.php', true);
./editor/entities/EntityEditorController.php:			$vs_form_prefix = $this->getRequest()->getParameter('fieldNamePrefix', pString);
./editor/entities/EntityEditorController.php:			$vs_label_id = $this->getRequest()->getParameter('label_id', pString);
./editor/entities/EntityEditorController.php:				if ($vs_val = $this->getRequest()->getParameter($vs_form_prefix.$vs_label_field.'_'.$vs_label_id, pString)) {
./editor/entities/EntityEditorController.php:			$this->getView()->setVar('dupe', $vb_dupe);
./editor/entities/EntityEditorController.php:			return $this->render('lookup_dupe_labels_json.php');
./editor/loans/LoanEditorController.php: 			return $this->render('widget_loan_info_html.php', true);
./editor/movements/MovementEditorController.php: 			return $this->render('widget_movement_info_html.php', true);
./editor/object_lots/ObjectLotEditorController.php:		return $this->render('widget_object_lot_info_html.php', true);
./editor/object_lots/ObjectLotEditorController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);	
./editor/object_lots/ObjectLotEditorController.php:		if ((bool)$this->request->config->get('allow_automated_renumbering_of_objects_in_a_lot')) {
./editor/object_lots/ObjectLotEditorController.php:			$t_lot = new ca_object_lots($this->request->getParameter('lot_id', pInteger));
./editor/object_lots/ObjectLotEditorController.php:				$t_lot->renumberObjects($this->opo_app_plugin_manager);
./editor/object_lots/ObjectLotEditorController.php:						$this->notification->addNotification($vs_error, __NOTIFICATION_TYPE_ERROR__);
./editor/object_lots/ObjectLotEditorController.php:					$this->notification->addNotification(_t('Renumbered contents of lot'), __NOTIFICATION_TYPE_INFO__);
./editor/object_lots/ObjectLotEditorController.php:		return $this->Edit();
./editor/object_lots/ObjectLotEditorController.php:		$t_lot = new ca_object_lots($this->request->getParameter('lot_id', pInteger));
./editor/object_lots/ObjectLotEditorController.php:				$this->notification->addNotification(_t('No media is available for download'), __NOTIFICATION_TYPE_ERROR__);
./editor/object_lots/ObjectLotEditorController.php:				$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_object_lots', $t_lot->getPrimaryKey()));
./editor/object_lots/ObjectLotEditorController.php:					if(!caCanRead($this->request->user->getPrimaryKey(), 'ca_objects', $vn_object_id)){ continue; }
./editor/object_lots/ObjectLotEditorController.php:				$o_view = new View($this->request, $this->request->getViewsDirectoryPath().'/bundles/');
./editor/object_lots/ObjectLotEditorController.php:				$this->response->addContent($o_view->render('download_file_binary.php'));
./editor/object_lots/ObjectLotEditorController.php:				$this->notification->addNotification(_t('No files to download'), __NOTIFICATION_TYPE_ERROR__);
./editor/object_lots/ObjectLotEditorController.php:				$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_object_lots', $t_lot->getPrimaryKey()));
./editor/object_lots/ObjectLotEditorController.php:		return $this->Edit();
./editor/object_representations/ObjectRepresentationEditorController.php:		list($pn_representation_id, $t_rep) = $this->_initView();
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('player', $t_rep->getMediaTag('media', $va_display_info['display_version'], array('viewer_width' => $vn_player_width = $va_display_info['viewer_width'], 'viewer_height' => $vn_player_height = $va_display_info['viewer_height'], 'id' => 'caAnnoEditorMediaPlayer', 'class' => 'caAnnoEditorMediaPlayer'.((true) ? ' caAnnoEditorAudioMediaPlayer': ' caAnnoEditorVideoMediaPlayer'))));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('player_width', $vn_player_width);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('player_height', $vn_player_height);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('timecode_offset', $vn_timecode_offset);
./editor/object_representations/ObjectRepresentationEditorController.php:		$result_context = new ResultContext($this->request, 'ca_objects', ResultContext::getLastFind($this->request, 'ca_objects'));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('default_annotation_id', $default_annotation_id);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('annotation_count', (int)$t_rep->getAnnotationCount());
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('annotation_map', array_values($va_annotations));
./editor/object_representations/ObjectRepresentationEditorController.php:		return $this->render('ajax_representation_annotation_editor_html.php');
./editor/object_representations/ObjectRepresentationEditorController.php:		list($pn_representation_id, $t_rep) = $this->_initView();
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('image', $t_rep->getMediaTag('media', $va_display_info['display_version'], array('id' => 'caImageCenterEditorImage', 'class' => 'caImageCenterEditor')));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('image_width', caGetOption('WIDTH', $va_media_info, null));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('image_height', caGetOption('HEIGHT', $va_media_info, null));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('center_x', $va_center['x']);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('center_y', $va_center['y']);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('image_info', $va_media_info);
./editor/object_representations/ObjectRepresentationEditorController.php:		return $this->render('ajax_representation_image_center_editor_html.php');
./editor/object_representations/ObjectRepresentationEditorController.php:		list($pn_representation_id, $t_rep) = $this->_initView();
./editor/object_representations/ObjectRepresentationEditorController.php:		$vn_start = $this->request->getParameter('s', pInteger);
./editor/object_representations/ObjectRepresentationEditorController.php:		$vn_max = $this->request->getParameter('n', pInteger);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('annotation_count', $vn_total =(int)$t_rep->getAnnotationCount());
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('annotation_list', array('start' => $vn_start, 'max' => $vn_max, 'total' => $vn_total, 'list' => array_values($t_rep->getAnnotations(array('start' => $vn_start, 'max' => $vn_max)))));
./editor/object_representations/ObjectRepresentationEditorController.php:		return $this->render('ajax_representation_annotation_list_json.php');
./editor/object_representations/ObjectRepresentationEditorController.php:		list($pn_representation_id, $t_rep) = $this->_initView();
./editor/object_representations/ObjectRepresentationEditorController.php:		$pn_caption_id = $this->request->getParameter('caption_id', pString);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('representation_id', $pn_representation_id);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('caption_id', $pn_caption_id);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('t_object_representation', $t_rep);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('file_path', $t_caption->getFilePath('caption_file'));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('download_name', caGetRepresentationDownloadFileName('ca_object_representations', ['idno' => $t_rep->get('idno'), 'index' => null, 'version' => 'captions', 'extension' => 'vtt', 'original_filename' => $va_info['ORIGINAL_FILENAME'], 'representation_id' => $pn_representation_id]));				
./editor/object_representations/ObjectRepresentationEditorController.php:		return $this->render('caption_download_binary.php');
./editor/object_representations/ObjectRepresentationEditorController.php:		list($pn_representation_id, $t_rep) = $this->_initView();
./editor/object_representations/ObjectRepresentationEditorController.php:		$pn_sidecar_id = $this->request->getParameter('sidecar_id', pString);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('representation_id', $pn_representation_id);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('sidecar_id', $pn_sidecar_id);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('t_object_representation', $t_rep);
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('file_path', $path = $t_sidecar->getFilePath('sidecar_file'));
./editor/object_representations/ObjectRepresentationEditorController.php:		$this->view->setVar('download_name', caGetRepresentationDownloadFileName('ca_object_representations', ['idno' => $t_rep->get('idno'), 'index' => null, 'version' => 'sidecars', 'extension' => pathinfo($path, PATHINFO_EXTENSION), 'original_filename' => $va_info['ORIGINAL_FILENAME'], 'representation_id' => $pn_representation_id]));				
./editor/object_representations/ObjectRepresentationEditorController.php:		return $this->render('sidecar_download_binary.php');
./editor/object_representations/ObjectRepresentationEditorController.php:			$t_ui = ca_editor_uis::loadDefaultUI('ca_objects', $this->request);
./editor/object_representations/ObjectRepresentationEditorController.php:			$this->view->setVar('object_editor_screen', $t_ui->getScreenWithBundle('ca_object_representations', $this->request));
./editor/object_representations/ObjectRepresentationEditorController.php:		return $this->render('widget_object_representation_info_html.php', true);
./editor/objects/ObjectEditorController.php:		if ($vn_lot_id = $this->request->getParameter('lot_id', pInteger)) {
./editor/objects/ObjectEditorController.php:				if (!$this->request->getAppConfig()->get('ca_objects_dont_inherit_idno_from_lot')) {
./editor/objects/ObjectEditorController.php:			$this->request->config->get('ca_objects_x_collections_hierarchy_enabled') && 
./editor/objects/ObjectEditorController.php:			($coll_rel_type = $this->request->config->get('ca_objects_x_collections_hierarchy_relationship_type')) && 
./editor/objects/ObjectEditorController.php:			($collection_id = $this->request->getParameter('collection_id', pInteger)) &&
./editor/objects/ObjectEditorController.php:				$this->notification->addNotification(_t("Could not add parent collection to object: %1", join("; ", $t_object->getErrors())), __NOTIFICATION_TYPE_ERROR__);
./editor/objects/ObjectEditorController.php:		return $this->render('widget_object_info_html.php', true);
./editor/objects/ObjectComponentController.php:		$this->opo_app_plugin_manager = new ApplicationPluginManager();
./editor/objects/ObjectComponentController.php:		$this->opo_result_context = new ResultContext($po_request, $this->ops_table_name, ResultContext::getLastFind($po_request, $this->ops_table_name));
./editor/objects/ObjectComponentController.php:		list($t_subject, $t_ui, $vn_parent_id, $vn_above_id) = $this->_initView($pa_options);
./editor/objects/ObjectComponentController.php:		$vs_field_name_prefix = $this->request->getParameter('fieldNamePrefix', pString);
./editor/objects/ObjectComponentController.php:		$vs_n = $this->request->getParameter('n', pString);
./editor/objects/ObjectComponentController.php:		if ($vn_parent_id = $this->request->getParameter('parent_id', pInteger)) {
./editor/objects/ObjectComponentController.php:			$this->opo_result_context->setParameter($t_subject->tableName().'_last_parent_id', $vn_parent_id);
./editor/objects/ObjectComponentController.php:			$va_restrict_to_types = caGetTypeRestrictionsForUser($this->ops_table_name, array('access' => __CA_BUNDLE_ACCESS_EDIT__));
./editor/objects/ObjectComponentController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2560?r='.urlencode($this->request->getFullUrlPath()));
./editor/objects/ObjectComponentController.php:			$t_parent = Datamodel::getInstanceByTableName($this->ops_table_name);
./editor/objects/ObjectComponentController.php:					$this->view->setVar('_context_id', $t_parent->get($vs_idno_context_field));
./editor/objects/ObjectComponentController.php:		if (!($vn_type_id = $this->request->getParameter($t_subject->getTypeFieldName(), pString))) {
./editor/objects/ObjectComponentController.php:			$vn_type_id =  array_shift(caMakeTypeIDList($t_subject->tableName(), $this->request->config->getList('ca_objects_component_types'), array('dontIncludeSubtypesInTypeRestriction' => true)));
./editor/objects/ObjectComponentController.php:		$va_component_types = $this->request->config->getList('ca_objects_component_types');
./editor/objects/ObjectComponentController.php:			$this->view->setVar('restrict_to_types', $va_component_types);
./editor/objects/ObjectComponentController.php:		$this->request->setParameter('type_id', $vn_type_id);
./editor/objects/ObjectComponentController.php:		$t_ui = ca_editor_uis::loadDefaultUI($this->ops_table_name, $this->request, $vn_type_id);
./editor/objects/ObjectComponentController.php:		$va_nav = $t_ui->getScreensAsNavConfigFragment($this->request, $vn_type_id, $this->request->getModulePath(), $this->request->getController(), $this->request->getAction(),
./editor/objects/ObjectComponentController.php:		$this->view->setVar('t_ui', $t_ui);
./editor/objects/ObjectComponentController.php:		$this->view->setVar('screen', $va_nav['defaultScreen']);
./editor/objects/ObjectComponentController.php:		$va_field_values = $t_subject->extractValuesFromRequest($va_nav['defaultScreen'], $this->request, array('ui_instance' => $t_ui, 'dontReturnSerialIdno' => true));
./editor/objects/ObjectComponentController.php:			$this->notification->addNotification(_t('There is no configuration available for this editor. Check your system configuration and ensure there is at least one valid configuration for this type of editor.'), __NOTIFICATION_TYPE_ERROR__);
./editor/objects/ObjectComponentController.php:		$this->opo_app_plugin_manager->hookEditItem(array('id' => null, 'table_num' => $t_subject->tableNum(), 'table_name' => $t_subject->tableName(), 'instance' => $t_subject));
./editor/objects/ObjectComponentController.php:		$this->view->setVar('fieldNamePrefix', $_REQUEST['_formName']);
./editor/objects/ObjectComponentController.php:		$this->view->setVar('n', $vs_n);
./editor/objects/ObjectComponentController.php:		$this->view->setVar('q', $this->request->getParameter('q', pString));
./editor/objects/ObjectComponentController.php:		$this->view->setVar('default_parent_id', $this->opo_result_context->getParameter($t_subject->tableName().'_last_parent_id'));
./editor/objects/ObjectComponentController.php:		$this->view->setVar('notifications', $this->notification->getNotifications());
./editor/objects/ObjectComponentController.php:		$this->render('component_html.php');
./editor/objects/ObjectComponentController.php:		list($t_subject, $t_ui, $vn_parent_id, $vn_above_id) = $this->_initView($pa_options);
./editor/objects/ObjectComponentController.php:			$va_restrict_to_types = caGetTypeRestrictionsForUser($this->ops_table_name, array('access' => __CA_BUNDLE_ACCESS_EDIT__));
./editor/objects/ObjectComponentController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2560?r='.urlencode($this->request->getFullUrlPath()));
./editor/objects/ObjectComponentController.php:			$this->view->setVar('response', $va_response);
./editor/objects/ObjectComponentController.php:			$this->render('component_result_json.php');
./editor/objects/ObjectComponentController.php:				$this->view->setVar('_context_id', $vn_context_id = $t_subject->get($vs_idno_context_field));
./editor/objects/ObjectComponentController.php:					$t_parent = Datamodel::getInstanceByTableName($this->ops_table_name);
./editor/objects/ObjectComponentController.php:						$this->view->setVar('_context_id', $vn_context_id = $t_parent->get($vs_idno_context_field));
./editor/objects/ObjectComponentController.php:		$this->opo_app_plugin_manager->hookBeforeSaveItem(array('id' => null, 'table_num' => $t_subject->tableNum(), 'table_name' => $t_subject->tableName(), 'instance' => $t_subject, 'is_insert' => true));
./editor/objects/ObjectComponentController.php:		$dupe_count = $this->request->getParameter('component_dupe_count', pInteger);
./editor/objects/ObjectComponentController.php:		$vn_parent_id = $this->request->getParameter('parent_id', pInteger);
./editor/objects/ObjectComponentController.php:		$this->opo_result_context->setParameter($t_subject->tableName().'_last_parent_id', $vn_parent_id);
./editor/objects/ObjectComponentController.php:		$vb_save_rc = $t_subject->saveBundlesForScreen($this->request->getParameter('screen', pString), $this->request, $va_opts);
./editor/objects/ObjectComponentController.php:		$this->view->setVar('t_ui', $t_ui);
./editor/objects/ObjectComponentController.php:				$this->request->setParameter($t_subject->primaryKey(), $vn_subject_id, 'GET');
./editor/objects/ObjectComponentController.php:				$this->view->setVar($t_subject->primaryKey(), $vn_subject_id);
./editor/objects/ObjectComponentController.php:				$this->view->setVar('subject_id', $vn_subject_id);
./editor/objects/ObjectComponentController.php:				Session::setVar($this->ops_table_name.'_browse_last_id', $vn_subject_id);	// set last edited
./editor/objects/ObjectComponentController.php:					$t_subject->setACLUsers(array($this->request->getUserID() => __CA_ACL_EDIT_DELETE_ACCESS__));
./editor/objects/ObjectComponentController.php:		$va_errors = $this->request->getActionErrors();							// all errors from all sources
./editor/objects/ObjectComponentController.php:		$va_general_errors = $this->request->getActionErrors('general');		// just "general" errors - ones that are not attached to a specific part of the form
./editor/objects/ObjectComponentController.php:			$this->opo_result_context->invalidateCache();
./editor/objects/ObjectComponentController.php:		$this->opo_result_context->saveContext();
./editor/objects/ObjectComponentController.php:		$this->opo_app_plugin_manager->hookSaveItem(array('id' => $vn_subject_id, 'table_num' => $t_subject->tableNum(), 'table_name' => $t_subject->tableName(), 'instance' => $t_subject, 'is_insert' => true));
./editor/objects/ObjectComponentController.php:		$this->view->setVar('response', $va_response);
./editor/objects/ObjectComponentController.php:		$this->render('component_result_json.php');
./editor/objects/ObjectComponentController.php:		$t_subject = Datamodel::getInstanceByTableName($this->ops_table_name);
./editor/objects/ObjectComponentController.php:		if (is_array($pa_options) && isset($pa_options['loadSubject']) && (bool)$pa_options['loadSubject'] && ($vn_subject_id = (int)$this->request->getParameter($t_subject->primaryKey(), pInteger))) {
./editor/objects/ObjectComponentController.php:		if (!$vn_type_id = $this->request->getParameter($t_subject->getTypeFieldName(), pString)) {
./editor/objects/ObjectComponentController.php:			$t_ui = ca_editor_uis::loadDefaultUI($this->ops_table_name, $this->request, $t_subject->getTypeID());
./editor/objects/ObjectComponentController.php:		$this->view->setVar($t_subject->primaryKey(), $t_subject->getPrimaryKey());
./editor/objects/ObjectComponentController.php:		$this->view->setVar('subject_id', $t_subject->getPrimaryKey());
./editor/objects/ObjectComponentController.php:		$this->view->setVar('t_subject', $t_subject);
./editor/objects/ObjectComponentController.php:			$this->view->setVar('parent_id', $vn_parent_id = $this->request->getParameter($vs_parent_id_fld, pInteger));
./editor/objects/ObjectComponentController.php:		return $this->opo_result_context;
./editor/occurrences/OccurrenceEditorController.php: 			return $this->render('widget_occurrence_info_html.php', true);
./editor/places/PlaceEditorController.php:		return $this->render('widget_place_info_html.php', true);
./editor/representation_annotations/RepresentationAnnotationEditorController.php:				$this->view->setVar('screen', $this->request->getActionExtra());	// name of screen
./editor/representation_annotations/RepresentationAnnotationEditorController.php:				$t_ui = ca_editor_uis::loadDefaultUI('ca_object_representations', $this->request, $t_rep->getTypeID());
./editor/representation_annotations/RepresentationAnnotationEditorController.php:				$this->view->setVar('representation_editor_screen', $t_ui->getScreenWithBundle('ca_representation_annotations', $this->request));
./editor/representation_annotations/RepresentationAnnotationEditorController.php: 			return $this->render('widget_representation_annotation_info_html.php', true);
./editor/representation_annotations/RepresentationAnnotationQuickAddController.php: 			$vn_representation_id = $this->request->getParameter('representation_id', pInteger);
./editor/representation_annotations/RepresentationAnnotationQuickAddController.php: 				$this->notification->addNotification(_t('Saved annotation.'), __NOTIFICATION_TYPE_INFO__);
./editor/representation_annotations/RepresentationAnnotationQuickAddController.php: 			$vn_annotation_id = $this->request->getParameter('annotation_id', pInteger);
./editor/representation_annotations/RepresentationAnnotationQuickAddController.php: 			$this->view->setVar('response', $va_response);
./editor/representation_annotations/RepresentationAnnotationQuickAddController.php: 			return $this->render('ajax_representation_annotation_delete_json.php');
./editor/storage_locations/StorageLocationEditorController.php: 			return $this->render('widget_storage_location_info_html.php', true);
./editor/tour_stops/TourStopEditorController.php: 			$o_result_context = new ResultContext($this->request, 'ca_tour_stops', 'basic_search');
./editor/tour_stops/TourStopEditorController.php: 			$vn_id = $this->request->getParameter('stop_id', pInteger);
./editor/tour_stops/TourStopEditorController.php: 			if ($t_item = $this->view->getVar('t_item')) {
./editor/tour_stops/TourStopEditorController.php: 					$t_parent = new ca_list_items($this->request->getParameter('parent_id', pInteger));
./editor/tour_stops/TourStopEditorController.php: 			$this->view->setVar('t_tour', $t_tour);
./editor/tour_stops/TourStopEditorController.php: 			return $this->render('widget_tour_stop_info_html.php', true);
./editor/tours/TourEditorController.php: 			$t_tour = $this->view->getVar('t_item');
./editor/tours/TourEditorController.php: 				$this->view->setVar('labels', $t_tour->getPrimaryKey() ? $va_labels : array());
./editor/tours/TourEditorController.php: 				$this->view->setVar('idno', $t_tour->get('idno'));
./editor/tours/TourEditorController.php: 			$this->view->setVar('t_stop', $t_stop);
./editor/tours/TourEditorController.php: 				$this->view->setVar('children', $va_children);
./editor/tours/TourEditorController.php: 			return $this->render('widget_tour_info_html.php', true);
./editor/InterstitialController.php:		$this->ops_table_name = $po_request->getParameter('t', pString);
./editor/HierarchyToolsController.php:		$this->table_name = $request->getParameter('t', pString);
./editor/HierarchyToolsController.php:		if(!$this->table_name || !($this->subject = Datamodel::getInstance($this->table_name, true))) {
./editor/HierarchyToolsController.php:		$id = $this->request->getParameter('id', pString);	// id of item to set as root media
./editor/HierarchyToolsController.php:		if(!$this->subject->load($id)) {
./editor/HierarchyToolsController.php:		if(!($parent_id = $this->subject->get('parent_id'))) {
./editor/HierarchyToolsController.php:		if(!($t_parent = Datamodel::getInstance($this->table_name, false, $parent_id))) {
./editor/HierarchyToolsController.php:		if(!$this->subject->isSaveable($this->request) || !$t_parent->isSaveable($this->request)) {
./editor/HierarchyToolsController.php:		$rep_ids = $this->subject->get('ca_object_representations.representation_id', ['returnAsArray' => true]);
./editor/HierarchyToolsController.php:		$this->view->setVar('response', $resp);
./editor/HierarchyToolsController.php:		$this->render('generic/hierarchy_tools_json.php');
./editor/HierarchyToolsController.php:		$ids = $this->request->getParameter('ids', pArray);	// list of ids to remove
./editor/HierarchyToolsController.php:			if(!$this->subject->load($id)) {
./editor/HierarchyToolsController.php:			if(!$this->subject->isSaveable($this->request)) {
./editor/HierarchyToolsController.php:			if(!$this->subject->get('parent_id')) {
./editor/HierarchyToolsController.php:			$this->subject->set('parent_id', null);
./editor/HierarchyToolsController.php:			$this->subject->update();
./editor/HierarchyToolsController.php:			if($this->subject->numErrors() > 0) {
./editor/HierarchyToolsController.php:				$errors[] = join('; ', $this->subject->getErrors());
./editor/HierarchyToolsController.php:		$this->view->setVar('response', $resp);
./editor/HierarchyToolsController.php:		$this->render('generic/hierarchy_tools_json.php');
./editor/HierarchyToolsController.php:		$parent_id = $this->request->getParameter('id', pString);	// id of item to move items under
./editor/HierarchyToolsController.php:		if(!$this->subject->load($parent_id)) {
./editor/HierarchyToolsController.php:		if($this->subject->get('parent_id')) {
./editor/HierarchyToolsController.php:		if(!$this->subject->isSaveable($this->request)) {
./editor/HierarchyToolsController.php:		$ids = $this->request->getParameter('ids', pArray);	// list of ids to remove
./editor/HierarchyToolsController.php:			if(!$this->subject->load($id)) {
./editor/HierarchyToolsController.php:			if(!$this->subject->isSaveable($this->request)) {
./editor/HierarchyToolsController.php:			// if(!$this->subject->get('parent_id')) {
./editor/HierarchyToolsController.php:			$this->subject->set('parent_id', $parent_id);
./editor/HierarchyToolsController.php:			$this->subject->update();
./editor/HierarchyToolsController.php:			if($this->subject->numErrors() > 0) {
./editor/HierarchyToolsController.php:				$errors[] = join('; ', $this->subject->getErrors());
./editor/HierarchyToolsController.php:		$this->view->setVar('response', $resp);
./editor/HierarchyToolsController.php:		$this->render('generic/hierarchy_tools_json.php');
./editor/HierarchyToolsController.php:		$ids = $this->request->getParameter('ids', pArray);	// list of ids to move
./editor/HierarchyToolsController.php:		$name = $this->request->getParameter('name', pString);
./editor/HierarchyToolsController.php:			if(!$this->subject->load($id)) {
./editor/HierarchyToolsController.php:			if(!$this->subject->isSaveable($this->request)) {
./editor/HierarchyToolsController.php:			//if($this->subject->get('parent_id')) {
./editor/HierarchyToolsController.php:		$this->subject = Datamodel::getInstance($this->table_name);
./editor/HierarchyToolsController.php:		$this->subject->set('type_id', 'album'); // TODO: make configurable
./editor/HierarchyToolsController.php:		$this->subject->setIdnoWithTemplate(date('Y').'.%'); // TODO: make configurable
./editor/HierarchyToolsController.php:		$this->subject->insert();
./editor/HierarchyToolsController.php:		if(!($parent_id = $this->subject->getPrimaryKey())) {
./editor/HierarchyToolsController.php:		$this->subject->addLabel(['name' => $name], ca_locales::getDefaultCataloguingLocaleID(), null, true);
./editor/HierarchyToolsController.php:			if(!$this->subject->load($id)) {
./editor/HierarchyToolsController.php:			$this->subject->set('parent_id', $parent_id);
./editor/HierarchyToolsController.php:			$this->subject->update();
./editor/HierarchyToolsController.php:			if($this->subject->numErrors() > 0) {
./editor/HierarchyToolsController.php:				$errors[] = join('; ', $this->subject->getErrors());
./editor/HierarchyToolsController.php:		$this->view->setVar('response', $resp);
./editor/HierarchyToolsController.php:		$this->render('generic/hierarchy_tools_json.php');
./editor/HierarchyToolsController.php:		$ids = explode(';', $this->request->getParameter('ids', pString));	// list of ids to remove
./editor/HierarchyToolsController.php:		$selected_version = $this->request->getParameter('version', pString);
./editor/HierarchyToolsController.php:		$o_view = new View($this->request, $this->request->getViewsDirectoryPath().'/bundles/');
./editor/HierarchyToolsController.php:			if(!$this->subject->load($id)) {
./editor/HierarchyToolsController.php:			if(!$this->subject->isReadable($this->request)) {
./editor/HierarchyToolsController.php:			$reps = $this->subject->getRepresentations($version_list);
./editor/HierarchyToolsController.php:					$name = caGetRepresentationDownloadFileName($this->subject->tableName(), ['idno' => $this->subject->get('idno'), 'index' => $c, 'version' => $version, 'extension' => pathinfo($path, PATHINFO_EXTENSION), 'original_filename' => $rep['original_filename'], 'representation_id' => $rep['representation_id']]);
./editor/HierarchyToolsController.php:			$o_view->setVar('archive_name', caGetMediaDownloadArchiveName($this->subject->tableName(), $id[0], ['extension' => 'zip']));
./editor/HierarchyToolsController.php:			$this->response->addContent($o_view->render('download_file_binary.php'));
./editor/HierarchyToolsController.php:			$this->response->setHTTPResponseCode(204, _t('No files to download'));
./find/BrowseLoansController.php:		$this->opo_browse = new LoanBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseLoansController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_loans', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseMovementsController.php:		$this->opo_browse = new MovementBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseMovementsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_movements', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseObjectLotsController.php:		$this->opo_browse = new ObjectLotBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseObjectLotsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_lots', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_object_lots_browse'), 'type_id' => $this->opn_type_restriction_id]);
./find/BrowseObjectRepresentationsController.php:		$this->opo_browse = new ObjectRepresentationBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseObjectRepresentationsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_representations', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseObjectsController.php:		$this->opo_browse = new ObjectBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseObjectsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_objects', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseObjectsController.php:		$pa_object_ids = explode(';', $this->request->getParameter('id', pString));
./find/BrowseObjectsController.php:		$va_access_values = caGetUserAccessValues($this->request);
./find/BrowseObjectsController.php:		$this->view->setVar('ids', $pa_object_ids);
./find/BrowseObjectsController.php:		$this->view->setVar('access_values', $va_access_values);
./find/BrowseObjectsController.php:		$this->render("Results/ca_objects_results_map_balloon_html.php");
./find/BrowseOccurrencesController.php:		$this->opo_browse = new OccurrenceBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseOccurrencesController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_occurrences', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_occurrences_browse'), 'type_id' => $this->opn_type_restriction_id]);
./find/BrowsePlacesController.php:		$this->opo_browse = new PlaceBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowsePlacesController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_places', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseStorageLocationsController.php:		$this->opo_browse = new StorageLocationBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseStorageLocationsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_storage_locations', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseTourStopsController.php:		$this->opo_browse = new TourStopBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseTourStopsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_tour_stops', ['type_id' => $this->opn_type_restriction_id]);
./find/BrowseToursController.php:		$this->opo_browse = new TourBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseToursController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_tours', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchCollectionsAdvancedController.php:		if($this->request->config->get('enable_full_thumbnail_result_views_for_ca_collections_search')){
./find/SearchCollectionsAdvancedController.php:			$this->opa_views = array(
./find/SearchCollectionsAdvancedController.php:			$this->opa_views = array(
./find/SearchCollectionsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_collections', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_collections_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchCollectionsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchEntitiesAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_entities', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_entities_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchEntitiesAdvancedController.php:		$this->opo_browse = new EntityBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchEntitiesAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchLoansAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_loans', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchLoansAdvancedController.php:		$this->opo_browse = new LoanBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchLoansAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchLoansBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_loans', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchLoansBuilderController.php:		$this->opo_browse = new LoanBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchLoansBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchMovementsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_movements', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchMovementsAdvancedController.php:		$this->opo_browse = new MovementBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchMovementsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectLotsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_lots', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_object_lots_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectLotsAdvancedController.php:		$this->opo_browse = new ObjectLotBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectLotsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectRepresentationsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_representations', ['type_id' => $this->opn_type_restriction_id]); 
./find/SearchObjectRepresentationsAdvancedController.php:		$this->opo_browse = new ObjectRepresentationBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectRepresentationsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectRepresentationsBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_representations', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectRepresentationsBuilderController.php:		$this->opo_browse = new ObjectRepresentationBrowse($this->opo_result_context->getParameter('browse_id'), 'providence'); 
./find/SearchObjectRepresentationsBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchOccurrencesAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_occurrences', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_occurrences_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchOccurrencesAdvancedController.php:		$this->opo_browse = new OccurrenceBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchOccurrencesAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchOccurrencesBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_occurrences', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_occurrences_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchOccurrencesBuilderController.php:		$this->opo_browse = new OccurrenceBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchOccurrencesBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchPlacesAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_places', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchPlacesAdvancedController.php:		$this->opo_browse = new PlaceBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchPlacesAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchStorageLocationsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_storage_locations', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchStorageLocationsAdvancedController.php:		$this->opo_browse = new StorageLocationBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchStorageLocationsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchStorageLocationsBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_storage_locations', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchStorageLocationsBuilderController.php:		$this->opo_browse = new StorageLocationBrowse($this->opo_result_context->getParameter('browse_id'), 'providence'); 
./find/SearchStorageLocationsBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchToursAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_tours', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchToursAdvancedController.php:		$this->opo_browse = new TourBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchToursAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchToursController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_tours', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchToursController.php:		$this->opo_browse = new TourBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchToursController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchToursController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchToursController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/QuickSearchController.php:		$search 	= strip_tags($this->request->getParameter('search', pString,  null, ['forcePurify' => true]));
./find/QuickSearchController.php:		$sort 		= $this->request->getParameter('sort', pString, null, ['forcePurify' => true]);
./find/QuickSearchController.php:		$searches = QuickSearch::getSearches($this->request->user);
./find/QuickSearchController.php:		$this->view->setVar('occurrence_types', caExtractValuesByUserLocale($t_list->getItemsForList('occurrence_types')));
./find/QuickSearchController.php:			$o_result_context = new ResultContext($this->request, $table, 'quick_search', $type);
./find/QuickSearchController.php:			if (!($result = $this->_doSearch($table, $search.$search_suffix, $sorts[$sort] ?? null, $type, $o_result_context))) { unset($searches[$target]); continue; }
./find/QuickSearchController.php:			$result->setOption('prefetch', $this->opn_num_results_per_item_type);	// get everything we need in one pass
./find/QuickSearchController.php:			$this->view->setVar("{$target}_results", $result);
./find/QuickSearchController.php:		$this->view->setVar('searches', $searches);
./find/QuickSearchController.php:		$this->view->setVar('search', $search);
./find/QuickSearchController.php:		$this->view->setVar('sort', Session::getVar('quick_search_last_sort'));
./find/QuickSearchController.php:		$this->view->setVar('maxNumberResults', $this->opn_num_results_per_item_type);
./find/QuickSearchController.php:				$this->response->setRedirect(caEditorUrl($this->request, $table_bits[0], $id));
./find/QuickSearchController.php:		$this->render('Results/quick_search_results_html.php');
./find/QuickSearchController.php:		$access_values = caGetUserAccessValues($this->request);
./find/QuickSearchController.php:		$no_cache = (bool)$this->request->getParameter('no_cache', pInteger);
./find/QuickSearchController.php:		if (!$this->request->user->canDoAction('can_search_'.(($target == 'ca_tour_stops') ? 'ca_tours' : $target))) { return ''; }
./find/QuickSearchController.php:			'rootRecordsOnly' => $this->view->getVar('hide_children'),
./find/QuickSearchController.php:			'filterDeaccessionedRecords' => $this->view->getVar('hide_deaccession'),
./find/QuickSearchController.php:			'limit' => $this->opn_num_results_per_item_type, 'no_cache' => $no_cache, 
./find/QuickSearchController.php:		$page_hits = caGetHitsForPage($qr, 0, $this->opn_num_results_per_item_type);
./find/QuickSearchController.php:		$result_desc = ($this->request->user->getPreference('show_search_result_desc') === 'show') ? $o_search->getResultDesc($page_hits) : [];
./find/RelatedListController.php:		$this->ops_tablename = $po_request->getParameter('relatedTable', pString);
./find/RelatedListController.php:		$this->opa_sorts = array(
./find/RelatedListController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), $this->ops_tablename, ['type_id' => $this->opn_type_restriction_id]);
./find/RelatedListController.php:		$this->opo_result_context = new ResultContext($this->getRequest(), $this->ops_tablename, 'related_list_bundle');
./find/RelatedListController.php:		$vs_related_table = $this->getRequest()->getParameter('relatedTable', pString);
./find/RelatedListController.php:		$vs_related_rel_table = $this->getRequest()->getParameter('relatedRelTable', pString);
./find/RelatedListController.php:		$vs_interstitial_prefix = $this->getRequest()->getParameter('interstitialPrefix', pString);
./find/RelatedListController.php:		$vs_primary_table = $this->getRequest()->getParameter('primaryTable', pString);
./find/RelatedListController.php:		$vn_primary_id = $this->getRequest()->getParameter('primaryID', pInteger);
./find/RelatedListController.php:		$vs_id_prefix = $this->getRequest()->getParameter('idPrefix', pString);
./find/RelatedListController.php:		if ($placement_id = $this->getRequest()->getParameter('placement_id', pInteger)) {
./find/RelatedListController.php:			Session::setVar("P{$placement_id}_last_export_format", $this->getRequest()->getParameter('export_format', pString));
./find/RelatedListController.php:			$va_relation_ids = json_decode($this->getRequest()->getParameter('ids', pString), true);
./find/RelatedListController.php:		$this->opo_browse = caGetBrowseInstance($vs_related_table);
./find/RelatedListController.php:		if($vn_browse_id = $this->opo_result_context->getParameter('browse_id')) {
./find/RelatedListController.php:			$this->opo_browse->reload($vn_browse_id);
./find/RelatedListController.php:		$pa_options['search'] = $this->opo_browse;
./find/RelatedListController.php:		$this->opo_result_context->setSearchExpression('related_list_bundle');
./find/RelatedListController.php:		$va_access_values = caGetUserAccessValues($this->getRequest());
./find/RelatedListController.php:		if (!($vs_sort 	= $this->opo_result_context->getCurrentSort())) {
./find/RelatedListController.php:			$va_tmp = array_keys($this->opa_sorts);
./find/RelatedListController.php:		$this->getView()->setVar('relationIdTypeNames', $va_relation_id_typenames);
./find/RelatedListController.php:		$this->getView()->setVar('interstitialPrefix', $vs_interstitial_prefix);
./find/RelatedListController.php:		$this->getView()->setVar('relatedTable', $vs_related_table);
./find/RelatedListController.php:		$this->getView()->setVar('relatedInstance', $t_related);
./find/RelatedListController.php:		$this->getView()->setVar('relatedRelTable', $vs_related_rel_table);
./find/RelatedListController.php:		$this->getView()->setVar('primaryTable', $vs_primary_table);
./find/RelatedListController.php:		$this->getView()->setVar('primaryID', $vn_primary_id);
./find/RelatedListController.php:		$this->getView()->setVar('idPrefix', $vs_id_prefix);
./find/RelatedListController.php:		$this->getView()->setVar('relatedListParams', $va_additional_search_controller_params);
./find/RelatedListController.php:		$this->getView()->setVar('relatedListURLParamString', $vs_url_string);
./find/RelatedListController.php:		$vs_sort_direction = $this->opo_result_context->getCurrentSortDirection();
./find/RelatedListController.php:		$this->getView()->setVar('relationIDsToRelatedIDs', $va_relation_ids_to_related_ids);
./find/RelatedListController.php:		$this->getView()->setVar('noRefine', true);
./find/RelatedListController.php:		$vs_related_rel_table = $this->getRequest()->getParameter('related_rel_table', pString);
./find/RelatedListController.php:		$va_ids  = $this->getRequest()->getParameter('ids', pArray);
./find/SearchObjectsBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_objects', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectsBuilderController.php:		$this->opo_browse = new ObjectBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectsBuilderController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_objects', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectsController.php:		$this->opo_browse = new ObjectBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectsController.php:		$ps_identifier = $this->request->getParameter('identifier', pString);
./find/SearchObjectsController.php:		$this->response->addContent($vs_viewer_name::getViewerData($this->request, "representation:{$vn_representation_id}", ['request' => $this->request, 't_subject' => null, 't_instance' => $t_rep, 'display' => caGetMediaDisplayInfo('media_overlay', $vs_mimetype)]));
./find/SearchObjectsController.php:		$pa_object_ids = explode(';', $this->request->getParameter('id', pString));
./find/SearchObjectsController.php:		$va_access_values = caGetUserAccessValues($this->request);
./find/SearchObjectsController.php:		$this->view->setVar('ids', $pa_object_ids);
./find/SearchObjectsController.php:		$this->view->setVar('access_values', $va_access_values);
./find/SearchObjectsController.php:		$this->render("Results/ca_objects_results_map_balloon_html.php");
./find/SearchObjectsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectsController.php:				'is_enabled' => !$this->request->config->get('ca_objects_disable_search_builder'),
./find/SearchOccurrencesController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_occurrences', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_occurrences_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchOccurrencesController.php:		$this->opo_browse = new OccurrenceBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchOccurrencesController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchOccurrencesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchOccurrencesController.php:				'is_enabled' => !$this->request->config->get('ca_occurrences_disable_basic_search'),
./find/SearchOccurrencesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchOccurrencesController.php:				'is_enabled' => !$this->request->config->get('ca_occurrences_disable_advanced_search'),
./find/SearchOccurrencesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchOccurrencesController.php:				'is_enabled' => !$this->request->config->get('ca_occurrences_disable_search_builder'),
./find/SearchOccurrencesController.php:				'is_enabled' => !$this->request->config->get('ca_occurrences_disable_browse'),
./find/SearchPlacesBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_places', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchPlacesBuilderController.php:		$this->opo_browse = new PlaceBrowse($this->opo_result_context->getParameter('browse_id'), 'providence'); 
./find/SearchPlacesBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchPlacesController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_places', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchPlacesController.php:		$this->opo_browse = new PlaceBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchPlacesController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchPlacesController.php:		$this->opb_uses_hierarchy_browser = true;
./find/SearchPlacesController.php:		$this->view->setVar('force_hierarchy_browser_open', 1);
./find/SearchPlacesController.php:		$this->Index();
./find/SearchPlacesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchPlacesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchPlacesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchPlacesController.php:				'is_enabled' => !$this->request->config->get('ca_places_disable_search_builder'),
./find/SearchStorageLocationsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_storage_locations', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchStorageLocationsController.php:		$this->opo_browse = new StorageLocationBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchStorageLocationsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchStorageLocationsController.php:		$this->opb_uses_hierarchy_browser = true;
./find/SearchStorageLocationsController.php:		$this->view->setVar('force_hierarchy_browser_open', 1);
./find/SearchStorageLocationsController.php:		$this->Index();
./find/SearchStorageLocationsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchStorageLocationsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchStorageLocationsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchStorageLocationsController.php:				'is_enabled' => !$this->request->config->get('ca_storage_locations_disable_search_builder'),
./find/SearchTourStopsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_tour_stops', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchTourStopsAdvancedController.php:		$this->opo_browse = new TourStopBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchTourStopsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchTourStopsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_tour_stops', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchTourStopsController.php:		$this->opo_browse = new TourStopBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchTourStopsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchTourStopsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchTourStopsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectLotsBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_lots', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_object_lots_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectLotsBuilderController.php:		$this->opo_browse = new ObjectLotBrowse($this->opo_result_context->getParameter('browse_id'), 'providence'); 
./find/SearchObjectLotsBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchObjectsAdvancedController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_objects', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectsAdvancedController.php:		$this->opo_browse = new ObjectBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectsAdvancedController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectsAdvancedController.php:		$pa_object_ids = explode(';', $this->request->getParameter('id', pString));
./find/SearchObjectsAdvancedController.php:		$va_access_values = caGetUserAccessValues($this->request);
./find/SearchObjectsAdvancedController.php:		$this->view->setVar('ids', $pa_object_ids);
./find/SearchObjectsAdvancedController.php:		$this->view->setVar('access_values', $va_access_values);
./find/SearchObjectsAdvancedController.php:		$this->render("Results/ca_objects_results_map_balloon_html.php");
./find/SearchCollectionsBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_collections', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_collections_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchCollectionsBuilderController.php:		$this->opo_browse = new CollectionBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');		 
./find/SearchCollectionsBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchCollectionsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_collections', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_collections_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchCollectionsController.php:		$this->opo_browse = new CollectionBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchCollectionsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchCollectionsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchCollectionsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchCollectionsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchCollectionsController.php:				'is_enabled' => !$this->request->config->get('ca_collections_disable_search_builder'),
./find/SearchEntitiesBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_entities', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_entities_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchEntitiesBuilderController.php:		$this->opo_browse = new EntityBrowse($this->opo_result_context->getParameter('browse_id'), 'providence'); 
./find/SearchEntitiesBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchEntitiesController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_entities', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_entities_search'), 'type_id' => $this->opn_type_restriction_id]); 
./find/SearchEntitiesController.php:		$this->opo_browse = new EntityBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchEntitiesController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchEntitiesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchEntitiesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchEntitiesController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchEntitiesController.php:				'is_enabled' => !$this->request->config->get('ca_entities_disable_search_builder'),
./find/SearchLoansController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_loans', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchLoansController.php:		$this->opo_browse = new LoanBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchLoansController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchLoansController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchLoansController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchLoansController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchLoansController.php:				'is_enabled' => !$this->request->config->get('ca_loans_disable_search_builder'),
./find/SearchMovementsBuilderController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_movements', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchMovementsBuilderController.php:		$this->opo_browse = new MovementBrowse($this->opo_result_context->getParameter('browse_id'), 'providence'); 
./find/SearchMovementsBuilderController.php:		$options['search'] = $this->opo_browse;
./find/SearchMovementsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_movements', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchMovementsController.php:		$this->opo_browse = new MovementBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchMovementsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchMovementsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchMovementsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchMovementsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchMovementsController.php:				'is_enabled' => !$this->request->config->get('ca_movements_disable_search_builder'),
./find/SearchObjectLotsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_lots', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_object_lots_search'), 'type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectLotsController.php:		$this->opo_browse = new ObjectLotBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectLotsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectLotsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectLotsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectLotsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectLotsController.php:				'is_enabled' => !$this->request->config->get('ca_object_lots_disable_search_builder'),
./find/SearchObjectRepresentationsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_object_representations', ['type_id' => $this->opn_type_restriction_id]);
./find/SearchObjectRepresentationsController.php:		$this->opo_browse = new ObjectRepresentationBrowse($this->opo_result_context->getParameter('browse_id'), 'providence');
./find/SearchObjectRepresentationsController.php:		$pa_options['search'] = $this->opo_browse;
./find/SearchObjectRepresentationsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectRepresentationsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectRepresentationsController.php:					'reset' => $this->request->getUser()->getPreference('persistent_search')
./find/SearchObjectRepresentationsController.php:				'is_enabled' => !$this->request->config->get('ca_object_representationd_disable_search_builder'),
./find/BrowseCollectionsController.php:		$this->opo_browse = new CollectionBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseCollectionsController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_collections', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_collections_browse'), 'type_id' => $this->opn_type_restriction_id]);
./find/BrowseEntitiesController.php:		$this->opo_browse = new EntityBrowse($this->opo_result_context->getSearchExpression(), 'providence');
./find/BrowseEntitiesController.php:		$this->opa_views = caApplyFindViewUserRestrictions($po_request->getUser(), 'ca_entities', ['returnAll' => $this->request->config->get('enable_full_thumbnail_result_views_for_ca_entities_browse'), 'type_id' => $this->opn_type_restriction_id]);
./library/CheckInController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_library_checkin') || !$this->request->config->get('enable_library_services')  || !$this->request->config->get('enable_object_checkout')) { 
./library/CheckInController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./library/CheckInController.php:		$this->opo_app_plugin_manager = new ApplicationPluginManager();
./library/CheckInController.php:		$this->render('checkin/items_html.php');
./library/CheckInController.php:		$pn_checkout_id = $this->request->getParameter('checkout_id', pInteger);
./library/CheckInController.php:		$this->view->setVar('data', $va_info);
./library/CheckInController.php:		$this->render('checkin/ajax_data_json.php');
./library/CheckInController.php:		$ps_item_list = $this->request->getParameter('item_list', pString);
./library/CheckInController.php:							$t_checkout->checkin($vn_object_id, $va_item['note'], array('request' => $this->request));
./library/CheckInController.php:			if($library_config->get('send_item_checkin_receipts') && (sizeof($checked_in_items) > 0) && ($user_email = $this->request->user->get('ca_users.email'))) {
./library/CheckInController.php:		$this->view->setVar('data', $va_ret);
./library/CheckInController.php:		$this->render('checkin/ajax_data_json.php');
./library/CheckInController.php:		return $this->render('checkin/widget_checkin_html.php', !$this->request->isAjax());
./library/DashboardController.php: 			$this->opo_library_services_config = caGetLibraryServicesConfiguration();
./library/DashboardController.php: 			if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_library_checkout') || !$this->request->config->get('enable_library_services')  || !$this->request->config->get('enable_object_checkout')) { 
./library/DashboardController.php: 				$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./library/DashboardController.php: 			if (!($ps_daterange = $this->request->getParameter('daterange', pString))) { $ps_daterange = _t('today'); }
./library/DashboardController.php:			$va_dashboard_config = $this->opo_library_services_config->getAssoc('dashboard');
./library/DashboardController.php: 			$this->view->setVar('stats', $va_stats = ca_object_checkouts::getDashboardStatistics($ps_daterange));
./library/DashboardController.php: 			$this->view->setVar('daterange', $ps_daterange);
./library/DashboardController.php:				$this->view->setVar($vs_var_name, $va_user_list);
./library/DashboardController.php:						$item_list[] = caEditorLink($this->request, $qr_items->get('ca_objects.preferred_labels').' ('.$qr_items->get('ca_objects.idno').')', '', 'ca_objects', $qr_items->getPrimaryKey()); //"<a href='#' class='caLibraryUserLink' data-object_id='".caEditorL$va_user['object_id']."'>".trim($va_user['object_id'])."</a>"; 
./library/DashboardController.php:				$this->view->setVar($var_name, $item_list);
./library/DashboardController.php:			$this->view->setVar('panels', $va_panels = is_array($va_dashboard_config['panels']) ? $va_dashboard_config['panels'] : array());
./library/DashboardController.php:				$this->view->setVar("panel_{$vs_panel}", $va_counts);
./library/DashboardController.php: 			$this->render('dashboard/index_html.php');
./library/DashboardController.php: 			$pn_user_id = $this->request->getParameter('user_id', pInteger);
./library/DashboardController.php: 			$ps_daterange = $this->request->getParameter('daterange', pString);
./library/DashboardController.php: 			$this->view->setVar('t_user', $t_user);
./library/DashboardController.php: 				$this->view->setVar('name', trim($t_user->get('fname').' '.$t_user->get('lname')));
./library/DashboardController.php:				$this->view->setVar('checkouts', ca_object_checkouts::getOutstandingCheckoutsForUser($pn_user_id, $vs_item_display_template, $ps_daterange, ['omitOverdue' => true]));
./library/DashboardController.php:				$this->view->setVar('checkins', ca_object_checkouts::getCheckinsForUser($pn_user_id, $vs_item_display_template, $ps_daterange));
./library/DashboardController.php:				$this->view->setVar('overdue_checkouts', ca_object_checkouts::getOverdueCheckoutsForUser($pn_user_id, $vs_item_display_template, $ps_daterange));
./library/DashboardController.php:				$this->view->setVar('reservations', ca_object_checkouts::getOutstandingReservationsForUser($pn_user_id, $vs_item_display_template));
./library/DashboardController.php:				$this->view->setVar('name', "???");
./library/DashboardController.php: 			$this->render('dashboard/user_detail_html.php');
./library/DashboardController.php: 			$group_by = $this->request->getParameter('group_by', pString);
./library/DashboardController.php: 			$group = $this->request->getParameter('group', pString);
./library/DashboardController.php: 			$ps_daterange = $this->request->getParameter('daterange', pString);
./library/DashboardController.php: 				$this->view->setVar('group', $group);
./library/DashboardController.php:	// 				$this->view->setVar('checkins', ca_object_checkouts::getCheckinsForUser($pn_user_id, $vs_item_display_template, $ps_daterange));
./library/DashboardController.php:	// 				$this->view->setVar('overdue_checkouts', ca_object_checkouts::getOverdueCheckoutsForUser($pn_user_id, $vs_item_display_template, $ps_daterange));
./library/DashboardController.php:	// 				$this->view->setVar('reservations', ca_object_checkouts::getOutstandingReservationsForUser($pn_user_id, $vs_item_display_template));
./library/DashboardController.php:				$this->view->setVar('group', "???");
./library/DashboardController.php:			$this->view->setVar('checkouts', $checkouts);
./library/DashboardController.php: 			$this->render('dashboard/group_detail_html.php');
./library/CheckOutController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_do_library_checkout') || !$this->request->config->get('enable_library_services')  || !$this->request->config->get('enable_object_checkout')) { 
./library/CheckOutController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/2320?r='.urlencode($this->request->getFullUrlPath()));
./library/CheckOutController.php:		if($this->request->user->canDoAction('can_do_library_checkinout_for_anyone')) {
./library/CheckOutController.php:			$this->render('checkout/find_user_html.php');
./library/CheckOutController.php:			$this->Items();
./library/CheckOutController.php:		$user_id = $this->request->user->canDoAction('can_do_library_checkinout_for_anyone') ? $this->request->getParameter('user_id', pInteger) : $this->request->getUserID();
./library/CheckOutController.php:		$this->view->setVar('user_id', $user_id);
./library/CheckOutController.php:		$this->view->setVar('checkout_types', ca_object_checkouts::getObjectCheckoutTypes());
./library/CheckOutController.php:		$this->view->setVar('config', $library_config);
./library/CheckOutController.php:		$this->render('checkout/items_html.php');
./library/CheckOutController.php:		$user_id = $this->request->getParameter('user_id', pInteger);
./library/CheckOutController.php:		$object_id = $this->request->getParameter('object_id', pInteger);
./library/CheckOutController.php:		$object_ids = $this->request->getParameter('object_ids', pArray);
./library/CheckOutController.php:		$this->view->setVar('data', $infos);
./library/CheckOutController.php:		$this->render('checkout/ajax_data_json.php');
./library/CheckOutController.php:		$user_id = $this->request->getParameter('user_id', pInteger);
./library/CheckOutController.php:		$item_list = json_decode(stripslashes($this->request->getParameter('item_list', pString)), true);
./library/CheckOutController.php:			$transaction_notes = $this->request->getParameter('transaction_notes', pString);
./library/CheckOutController.php:			$transaction_due_date = $this->request->getParameter('transaction_due_date', pString);
./library/CheckOutController.php:						$vb_res = $t_checkout->reserve($item['object_id'], $user_id, $item['note'], array('request' => $this->request));
./library/CheckOutController.php:						$vb_res = $t_checkout->checkout($item['object_id'], $user_id, $item['note'], $item['due_date'], array('request' => $this->request));
./library/CheckOutController.php:			if($library_config->get('send_item_checkout_receipts') && ((sizeof($checked_out_items) > 0) || (sizeof($reserved_items) > 0)) && ($user_email = $this->request->user->get('ca_users.email'))) {
./library/CheckOutController.php:		$this->view->setVar('data', $ret);
./library/CheckOutController.php:		$this->render('checkout/ajax_data_json.php');
./library/CheckOutController.php:		$checkouts = ca_object_checkouts::getOutstandingCheckoutsForUser($this->request->getUserID(), "<unit relativeTo='ca_objects'><l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno)</unit>");
./library/CheckOutController.php:		$reservations = ca_object_checkouts::getOutstandingReservationsForUser($this->request->getUserID(), "<unit relativeTo='ca_objects'><l>^ca_objects.preferred_labels.name</l> (^ca_objects.idno)</unit>");
./library/CheckOutController.php:		$this->view->setVar('checkouts', $checkouts);
./library/CheckOutController.php:		$this->view->setVar('reservations', $reservations);
./library/CheckOutController.php:		$this->render('checkout/my_loans_html.php');
./library/CheckOutController.php:		$checkout_id = $this->request->getParameter('checkout_id', pInteger);
./library/CheckOutController.php:					$t_checkout->checkin($object_id, '', array('request' => $this->request));
./library/CheckOutController.php:						$this->notification->addNotification(_t('Returned <em>%1</em> (%2) borrowed by %3 on %4', $t_object->get('ca_objects.preferred_labels.name'), $t_object->get('ca_objects.idno'), $user_name, $borrow_date), __NOTIFICATION_TYPE_INFO__);
./library/CheckOutController.php:						if($library_config->get('send_item_checkin_receipts') && ($user_email = $this->request->user->get('ca_users.email'))) {							
./library/CheckOutController.php:						$this->notification->addNotification(_t('Could not check in <em>%1</em> (%2): %3', $t_object->get('ca_objects.preferred_labels.name'), $t_object->get('ca_objects.idno'), join("; ", $t_checkout->getErrors())), __NOTIFICATION_TYPE_ERROR__);
./library/CheckOutController.php:					$this->notification->addNotification(_t('<em>%1</em> (%2) is not out', $t_object->get('ca_objects.preferred_labels.name'), $t_object->get('ca_objects.idno')), __NOTIFICATION_TYPE_ERROR__);
./library/CheckOutController.php:				$this->notification->addNotification(_t('Removed reservation for <em>%1</em>', $t_object->get('ca_objects.preferred_labels.name'), $t_object->get('ca_objects.idno')), __NOTIFICATION_TYPE_ERROR__);
./library/CheckOutController.php:				$this->notification->addNotification(_t('<em>%1</em> (%2) is not out', $t_object->get('ca_objects.preferred_labels.name'), $t_object->get('ca_objects.idno')), __NOTIFICATION_TYPE_ERROR__);
./library/CheckOutController.php:		$this->MyLoans();
./library/CheckOutController.php:		$set_id = $this->request->getParameter('id', pInteger);
./library/CheckOutController.php:		if(!$t_set->isReadable($this->request)) {
./library/CheckOutController.php:		$this->view->setVar('initialValueList', $t_set->getItems(['idsOnly' => true]));
./library/CheckOutController.php:		return $this->Index();
./library/CheckOutController.php:		$t_user = new ca_users($user_id = $this->request->getParameter('user_id', pInteger));
./library/CheckOutController.php:		$this->view->setVar('user_id', $user_id);
./library/CheckOutController.php:		$this->view->setVar('t_user', $t_user);
./library/CheckOutController.php:		return $this->render('checkout/widget_checkout_html.php', !$this->request->isAjax());
./logs/DownloadController.php: 			if (!($ps_search = $this->request->getParameter('search', pString))) {
./logs/DownloadController.php: 				$ps_search = $this->request->user->getVar('download_log_search');
./logs/DownloadController.php: 				$this->request->user->setVar('download_log_search', $ps_search);
./logs/DownloadController.php: 			if (!($ps_group_by = $this->request->getParameter('group_by', pString))) {
./logs/DownloadController.php: 				$ps_group_by = $this->request->user->getVar('download_group_by');
./logs/DownloadController.php: 				$this->request->user->setVar('download_group_by', $ps_group_by);
./logs/DownloadController.php:				$this->view->setVar('tables', $va_tables);
./logs/DownloadController.php:				$this->view->setVar('labels_by_table_num', $va_record_labels_by_table_num);
./logs/DownloadController.php:						$this->view->setVar('download_list', $va_download_list_by_record);
./logs/DownloadController.php:						$this->view->setVar('download_list', $va_download_list);
./logs/DownloadController.php: 			$this->view->setVar('download_list_search', $ps_search);
./logs/DownloadController.php: 			$this->view->setVar('download_list_group_by', $ps_group_by);
./logs/DownloadController.php: 			$this->render('download_html.php');
./logs/SearchController.php: 			if(!$this->request->user->canDoAction('can_view_search_log')) { 
./logs/SearchController.php: 			if (!($ps_search = $this->request->getParameter('search', pString))) {
./logs/SearchController.php: 				$ps_search = $this->request->user->getVar('search_log_search');
./logs/SearchController.php: 				$this->request->user->setVar('search_log_search', $ps_search);
./logs/SearchController.php: 			$this->view->setVar('search_list', $va_search_list);
./logs/SearchController.php: 			$this->view->setVar('search_list_search', $ps_search);
./logs/SearchController.php: 			$this->render('search_html.php');
./logs/EventsController.php:		if (!($ps_search = $this->request->getParameter('search', pString))) {
./logs/EventsController.php:			$ps_search = $this->request->user->getVar('events_log_search');
./logs/EventsController.php:			$this->request->user->setVar('events_log_search', $ps_search);
./logs/EventsController.php:		$this->view->setVar('events_list', $va_events_list);
./logs/EventsController.php:		$this->view->setVar('events_list_search', $ps_search);
./logs/EventsController.php:		$this->render('events_html.php');
./logs/GlobalChangeController.php:		if(!$this->request->getUser()->canDoAction('can_view_my_change_logs') && !$this->request->getUser()->canDoAction('can_view_change_logs')) { 
./logs/GlobalChangeController.php:			$this->response->setRedirect(
./logs/GlobalChangeController.php:				$this->request->getAppConfig()->get('error_display_url').'/n/2320?r='.urlencode($this->getRequest()->getFullUrlPath())
./logs/GlobalChangeController.php:		$this->view->setVar('table_list', $table_list = caGetPrimaryTablesForHTMLSelect());
./logs/GlobalChangeController.php:		$filter_table = $this->request->getParameter('filter_table', pInteger);
./logs/GlobalChangeController.php:		$this->view->setVar('filter_table', $filter_table);
./logs/GlobalChangeController.php:		$filter_change_type = $this->request->getParameter('filter_change_type', pString);
./logs/GlobalChangeController.php:		$this->view->setVar('filter_change_type', $filter_change_type);
./logs/GlobalChangeController.php:		$filter_daterange = $this->request->getParameter('filter_daterange', pString);
./logs/GlobalChangeController.php:		$this->view->setVar('filter_daterange', $filter_daterange);
./logs/GlobalChangeController.php:		$this->view->setVar('user_list', $user_list = ApplicationChangeLog::getChangeLogUsersForSelect(['daterange' => $filter_daterange]));
./logs/GlobalChangeController.php:		if($can_filter_by_user = $this->request->user->canDoAction('can_view_change_logs')) {
./logs/GlobalChangeController.php:			$filter_user_id = $this->request->getParameter('filter_user', pInteger);
./logs/GlobalChangeController.php:			$filter_user_id = $this->request->getUserID();
./logs/GlobalChangeController.php:		$this->view->setVar('filter_user_id', $filter_user_id);
./logs/GlobalChangeController.php:		$this->view->setVar('can_filter_by_user', $can_filter_by_user);
./logs/GlobalChangeController.php:		$this->view->setVar('params_set', $params_set = ($params_set = $filter_user_id || $filter_change_type || $filter_table || ($filter_daterange && ($filter_daterange != _t('any time')))));
./logs/GlobalChangeController.php:		if (!($page = $this->request->getParameter('page', pInteger))) { $page = 0; }
./logs/GlobalChangeController.php:		$this->view->setVar('page', $page);
./logs/GlobalChangeController.php:		$this->view->setVar('change_log_list', $log_entries);
./logs/GlobalChangeController.php:		$this->render('global_change_log_html.php');
./lookup/VocabularyController.php: 			if ($ps_list = $this->request->getParameter('list', pString)) {
./lookup/VocabularyController.php:				if ($ps_lists = $this->request->getParameter('lists', pString)) {
./lookup/ExternalMediaController.php:		$element_id = $this->request->getParameter('element_id', pInteger);
./lookup/ExternalMediaController.php:			$attribute_id = $this->request->getParameter('id', pInteger);
./lookup/ExternalMediaController.php:					if (!caCanRead($this->request->getUserID(), $t_attr->get('table_num'), $t_attr->get('row_id'), $t_element->get('element_code'))) {
./lookup/ExternalMediaController.php:						$this->view->setVar('embed', caGetExternalMediaEmbedCode($url, ['width' => caGetOption('mediaWidth', $settings, '670px'), 'height' => caGetOption('mediaHeight', $settings, '300px')]));
./lookup/ExternalMediaController.php:		return $this->render('ajax_external_media_detail_html.php');
./lookup/DisplayTemplateController.php:		$ps_template = $this->getRequest()->getParameter('template', pString, 'GET', ['purify' => false, 'urldecode' => false]);
./lookup/DisplayTemplateController.php:		$ps_table = $this->getRequest()->getParameter('table', pString);
./lookup/DisplayTemplateController.php:		$pn_id = $this->getRequest()->getParameter('id', pString);
./lookup/ObjectCollectionHierarchyController.php:		if ($this->ops_search_class) { require_once(__CA_LIB_DIR__."/Search/".$this->ops_search_class.".php"); }
./lookup/ObjectCollectionHierarchyController.php:		require_once(__CA_MODELS_DIR__."/".$this->ops_table_name.".php");
./lookup/ObjectCollectionHierarchyController.php:		$this->opo_item_instance = new $this->ops_table_name();
./lookup/ObjectCollectionHierarchyController.php:		$ps_query = $this->request->getParameter('term', pString);
./lookup/ObjectCollectionHierarchyController.php:		$pb_exact = $this->request->getParameter('exact', pInteger);
./lookup/ObjectCollectionHierarchyController.php:		$ps_exclude = $this->request->getParameter('exclude', pString);
./lookup/ObjectCollectionHierarchyController.php:		$ps_type = $this->request->getParameter('type', pString);
./lookup/ObjectCollectionHierarchyController.php:		$ps_types = $this->request->getParameter('types', pString);
./lookup/ObjectCollectionHierarchyController.php:		$pb_no_subtypes = (bool)$this->request->getParameter('noSubtypes', pInteger);
./lookup/ObjectCollectionHierarchyController.php:		$pb_quickadd = (bool)$this->request->getParameter('quickadd', pInteger);
./lookup/ObjectCollectionHierarchyController.php:		$pb_no_inline = (bool)$this->request->getParameter('noInline', pInteger);
./lookup/ObjectCollectionHierarchyController.php:		if (!($pn_limit = $this->request->getParameter('limit', pInteger))) { $pn_limit = 100; }
./lookup/ObjectCollectionHierarchyController.php:				$va_types = $this->opo_item_instance->getTypeList();
./lookup/ObjectCollectionHierarchyController.php:							$va_children = $t_list->getItemsForList($this->opo_item_instance->getTypeListCode(), array('item_id' => $vn_id, 'idsOnly' => true));
./lookup/ObjectCollectionHierarchyController.php:					$o_object_search->addResultFilter($this->opo_item_instance->tableName().'.'.$this->opo_item_instance->getTypeFieldName(), 'IN', join(",", $va_ids));
./lookup/ObjectCollectionHierarchyController.php:			if (($vn_restrict_to_hier_id = $this->request->getParameter('currentHierarchyOnly', pInteger))) {
./lookup/ObjectCollectionHierarchyController.php:			//if ($vs_hier_fld && ($vn_restrict_to_hier_id = $this->request->getParameter('currentHierarchyOnly', pInteger))) {
./lookup/ObjectCollectionHierarchyController.php:		$this->view->setVar('object_list', $va_objects);
./lookup/ObjectCollectionHierarchyController.php:		$this->view->setVar('collection_list', $va_collections);
./lookup/ObjectCollectionHierarchyController.php:		return $this->render(str_replace(' ', '_', 'ajax_object_collection_list_html.php'));
./lookup/ObjectCollectionHierarchyController.php:		$t_item = $this->opo_item_instance;
./lookup/ObjectCollectionHierarchyController.php:		$ps_bundle = (string)$this->request->getParameter('bundle', pString);
./lookup/ObjectCollectionHierarchyController.php:		$pa_ids = explode(";", $ps_ids = $this->request->getParameter('id', pString));
./lookup/ObjectCollectionHierarchyController.php:		$va_level_data = $this->GetHierarchyLevelData($pa_ids);
./lookup/ObjectCollectionHierarchyController.php:		if (!$this->request->getParameter('init', pInteger)) {
./lookup/ObjectCollectionHierarchyController.php:			Session::setVar($this->ops_table_name.'_'.$ps_bundle.'_browse_last_id', array_pop($pa_ids));
./lookup/ObjectCollectionHierarchyController.php:		$this->view->setVar(str_replace(' ', '_', $this->ops_name_singular).'_list', $va_level_data);
./lookup/ObjectCollectionHierarchyController.php:		return $this->render(str_replace(' ', '_', $this->ops_name_singular).'_hierarchy_level_json.php');
./lookup/ObjectCollectionHierarchyController.php:			$va_params = $this->getItemIDComponents($pn_id);
./lookup/ObjectCollectionHierarchyController.php:			if ((($vn_max_items_per_page = $this->request->getParameter('max', pInteger)) < 1) || ($vn_max_items_per_page > 1000)) {
./lookup/ObjectCollectionHierarchyController.php:				$vn_id = $this->request->getParameter('root_item_id', pString);
./lookup/ObjectCollectionHierarchyController.php:				$va_params = $this->getItemIDComponents($vn_id);
./lookup/ObjectCollectionHierarchyController.php:		$pn_id = $this->request->getParameter('id', pString);
./lookup/ObjectCollectionHierarchyController.php:		$va_params = $this->getItemIDComponents($pn_id, 'ca_objects');
./lookup/ObjectCollectionHierarchyController.php:		$this->view->setVar('ancestors', $va_ancestors);
./lookup/ObjectCollectionHierarchyController.php:		return $this->render(str_replace(' ', '_', $this->ops_name_singular).'_hierarchy_ancestors_json.php');
./lookup/ObjectCollectionHierarchyController.php:		$vs_id = $this->request->getParameter('id', pString);
./lookup/ObjectCollectionHierarchyController.php:		$this->response->setRedirect(caEditorUrl($this->request, $vs_table, $vn_id));
./lookup/ObjectCollectionHierarchyController.php:		$ps_after_id 	=  $this->getRequest()->getParameter('after_id', pString);
./lookup/ObjectCollectionHierarchyController.php:		$ps_id 			=  $this->getRequest()->getParameter('id', pString);
./lookup/ObjectCollectionHierarchyController.php:			$this->ops_table_name = $va_tmp[0];
./lookup/ObjectCollectionHierarchyController.php:		$this->getRequest()->setParameter('id', (int)$va_tmp[1]);
./lookup/ObjectCollectionHierarchyController.php:		$this->getRequest()->setParameter('after_id', (int)$va_tmp[1]);
./lookup/RelationshipTypeController.php:		if ($pn_table_num = (int)$this->request->getParameter('table_num', pInteger)) {
./lookup/ListItemController.php:		if ($ps_list = $this->request->getParameter('list', pString)) {
./lookup/ListItemController.php:			if ($ps_lists = $this->request->getParameter('lists', pString)) {
./lookup/ListItemController.php:		$ps_bundle = (string)$this->request->getParameter('bundle', pString);
./lookup/ListItemController.php:		$pa_ids = explode(";", $ps_ids = $this->request->getParameter('id', pString));
./lookup/ListItemController.php:		$t_item = $this->opo_item_instance;
./lookup/ListItemController.php:		if ($ps_lists = $this->request->getParameter('lists', pString)) {
./lookup/ListItemController.php:		$vn_max_items_per_page = $this->request->getParameter('max', pInteger);
./lookup/ListItemController.php:				if (!($pn_list_id = $this->request->getParameter('list_id', pInteger))) {
./lookup/ListItemController.php:						if ($this->request->getParameter('voc', pInteger)) {
./lookup/ListItemController.php:					$vs_label_table_name = $this->opo_item_instance->getLabelTableName();
./lookup/ListItemController.php:					$vs_label_display_field_name = $this->opo_item_instance->getLabelDisplayField();
./lookup/ListItemController.php:		if (!$this->request->getParameter('init', pInteger)) {
./lookup/ListItemController.php:			Session::setVar($this->ops_table_name.'_'.$ps_bundle.'_browse_last_id', $pn_id);
./lookup/ListItemController.php:		$this->view->setVar('dontShowSymbols', (bool)$this->request->getParameter('noSymbols', pString));
./lookup/ListItemController.php:		$this->view->setVar('list_item_list', $va_level_data);
./lookup/ListItemController.php:		return $this->render('list_item_hierarchy_level_json.php');
./lookup/AttributeValueController.php:			$ps_query = $this->request->getParameter('term', pString);
./lookup/AttributeValueController.php:			$ps_bundle = $this->request->getParameter('bundle', pString);
./lookup/AttributeValueController.php:			if ($this->request->user->getBundleAccessLevel($va_tmp[0], $va_tmp[1]) == __CA_BUNDLE_ACCESS_NONE__) {
./lookup/AttributeValueController.php:			$this->view->setVar('attribute_value_list', $qr_res->getAllFieldValues('value_longtext1'));
./lookup/AttributeValueController.php:			return $this->render('ajax_attribute_value_list_json.php');
./lookup/AttributeValueController.php: 			$ps_bundle = $this->request->getParameter('bundle', pString);
./lookup/AttributeValueController.php: 			$ps_value = $this->request->getParameter('n', pString);
./lookup/AttributeValueController.php:			if ($this->request->user->getBundleAccessLevel($va_tmp[0], $va_tmp[1]) == __CA_BUNDLE_ACCESS_NONE__) {
./lookup/AttributeValueController.php:				$this->view->setVar('exists', 1);	
./lookup/AttributeValueController.php:				$this->view->setVar('exists', 0);
./lookup/AttributeValueController.php:			return $this->render('ajax_attribute_value_exists_json.php');
./lookup/GeoNamesController.php:		$vn_max = ($this->request->getParameter('maxRows', pInteger) ? $this->request->getParameter('maxRows', pInteger) : 20);
./lookup/GeoNamesController.php:		$ps_query = $this->request->getParameter('term', pString);
./lookup/GeoNamesController.php:		$ps_gn_elements = urldecode($this->request->getParameter('gnElements', pString));
./lookup/GeoNamesController.php:		$ps_gn_delimiter = urldecode($this->request->getParameter('gnDelimiter', pString));
./lookup/GeoNamesController.php:		$this->view->setVar('geonames_list', $va_items);
./lookup/GeoNamesController.php:		return $this->render('ajax_geonames_list_html.php');
./lookup/IntrinsicController.php:		$ps_query = $this->request->getParameter(['q', 'term'], pString);
./lookup/IntrinsicController.php:		$ps_bundle = $this->request->getParameter('bundle', pString);
./lookup/IntrinsicController.php:		$pn_max_returned_values = $this->request->getParameter('max', pInteger);
./lookup/IntrinsicController.php:		if ($this->request->user->getBundleAccessLevel($vs_table, $vs_field) == __CA_BUNDLE_ACCESS_NONE__) {
./lookup/IntrinsicController.php:		$this->view->setVar('intrinsic_value_list', $qr_res->getAllFieldValues($vs_field));
./lookup/IntrinsicController.php:		return $this->render('ajax_intrinsic_value_list_html.php');
./lookup/LCSHController.php:			if (!($ps_query = $this->request->getParameter('q', pString))) {
./lookup/LCSHController.php:				$ps_query = $this->request->getParameter('term', pString);
./lookup/LCSHController.php:			$ps_type = $this->request->getParameter('type', pString);
./lookup/LCSHController.php:			if ($vn_element_id = $this->request->getParameter('element_id', pInteger)) {
./lookup/LCSHController.php:			$this->view->setVar('lcsh_list', $va_items);
./lookup/LCSHController.php: 			return $this->render('ajax_lcsh_list_html.php');
./lookup/InformationServiceController.php:		if (!($ps_query = $this->request->getParameter('q', pString))) {
./lookup/InformationServiceController.php:			$ps_query =		$this->request->getParameter('term', pString);
./lookup/InformationServiceController.php:		$ps_type = 			$this->request->getParameter('type', pString);
./lookup/InformationServiceController.php:		$pn_element_id = 	$this->request->getParameter('element_id', pInteger);
./lookup/InformationServiceController.php:						$va_data = $o_plugin->lookup($t_element->getSettings(), $ps_query, ['request' => $this->request, 'element_id' => $pn_element_id, 'format' => 'full']);
./lookup/InformationServiceController.php:		$this->view->setVar('information_service_list', $va_items);
./lookup/InformationServiceController.php:		return $this->render('ajax_information_service_list_html.php');
./lookup/InformationServiceController.php:		$no_cache = $this->request->getParameter('noCache', pInteger);
./lookup/InformationServiceController.php:		$pn_element_id = $this->request->getParameter('element_id', pInteger);
./lookup/InformationServiceController.php:			$pn_attribute_id = $this->request->getParameter('id', pInteger);
./lookup/InformationServiceController.php:					if (!caCanRead($this->request->getUserID(), $t_attr->get('table_num'), $t_attr->get('row_id'), $t_element->get('element_code'))) {
./lookup/InformationServiceController.php:								$va_data = $o_plugin->getExtendedInformation($va_settings, $vs_url, ['request' => $this->request]);
./lookup/InformationServiceController.php:		$this->view->setVar('detail', $va_data);
./lookup/InformationServiceController.php:		return $this->render('ajax_information_service_detail_html.php');
./manage/bundle_displays/BundleDisplayEditorController.php:			$va_init[1]->set('user_id', $this->request->getUserID());
./manage/bundle_displays/BundleDisplayEditorController.php:			$va_init[1]->set('table_num', $this->request->getParameter('table_num', pInteger));
./manage/bundle_displays/BundleDisplayEditorController.php:		$pn_display_id = $this->request->getParameter('display_id', pInteger);
./manage/bundle_displays/BundleDisplayEditorController.php:		if (!$t_display->haveAccessToDisplay($this->request->getUserID(), __CA_BUNDLE_DISPLAY_EDIT_ACCESS__, $pn_display_id)) {		// is user allowed to edit display?
./manage/bundle_displays/BundleDisplayEditorController.php:			$this->notification->addNotification(_t("You cannot edit that display"), __NOTIFICATION_TYPE_ERROR__);
./manage/bundle_displays/BundleDisplayEditorController.php:			$this->response->setRedirect(caNavUrl($this->request, 'manage', 'BundleDisplays', 'ListDisplays'));
./manage/bundle_displays/BundleDisplayEditorController.php:		if ($this->_isDisplayEditable()) { return parent::Edit($pa_values, $pa_options); } 
./manage/bundle_displays/BundleDisplayEditorController.php:		if ($this->_isDisplayEditable()) { return parent::Delete($pa_options); } 
./manage/bundle_displays/BundleDisplayEditorController.php:			$pt_subject->addUsers(array($this->request->getUserID() => __CA_BUNDLE_DISPLAY_EDIT_ACCESS__));
./manage/bundle_displays/BundleDisplayEditorController.php:		return $this->render('widget_bundle_display_info_html.php', true);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		if (!$this->request->user->canDoAction("can_use_metadata_alerts")) { throw new ApplicationException(_t('Alerts are not available')); }
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$va_init[1]->set('user_id', $this->getRequest()->getUserID());
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$va_init[1]->set('table_num', $this->getRequest()->getParameter('table_num', pInteger));
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$pn_rule_id = $this->getRequest()->getParameter('rule_id', pInteger);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		if (!$t_rule->haveAccessToForm($this->getRequest()->getUserID(), __CA_BUNDLE_DISPLAY_EDIT_ACCESS__, $pn_rule_id)) {		// is user allowed to edit rule?
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$this->notification->addNotification(_t("You cannot edit that rule"), __NOTIFICATION_TYPE_ERROR__);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$this->response->setRedirect(caNavUrl($this->getRequest(), 'manage', 'MetadataAlerts', 'ListAlerts'));
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		if ($this->_isRuleEditable()) { return parent::Edit($pa_values, $pa_options); }
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		if ($this->_isRuleEditable()) { return parent::Delete($pa_options); }
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$pt_subject->addUsers(array($this->getRequest()->getUserID() => __CA_ALERT_RULE_ACCESS_ACCESS_EDIT__));
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		return $this->render('widget_metadata_alert_rule_info_html.php', true);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$t_trigger = $this->getTriggerObject();
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$ps_trigger_type = $this->getRequest()->getParameter('triggerType', pString);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$ps_prefix = $this->getRequest()->getParameter('id_prefix', pString);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->view->setVar('id_prefix', $ps_prefix);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->view->setVar('available_settings',$t_trigger->getAvailableSettings());
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->render("ajax_rule_trigger_settings_form_html.php");
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$t_trigger = $this->getTriggerObject();
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$ps_trigger_type = $this->getRequest()->getParameter('triggerType', pString);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$ps_prefix = $this->getRequest()->getParameter('id_prefix', pString);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$pn_element_id = $this->getRequest()->getParameter('element_id', pString);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->view->setVar('id_prefix', $ps_prefix);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->view->setVar('element_id', $pn_element_id);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->view->setVar('filters', $t_trigger->getTriggerInstance()->getElementFilters($pn_element_id, $ps_prefix, ['values' => $t_trigger->get('element_filters')]));
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->view->setVar('available_settings',$t_trigger->getAvailableSettings());
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		$this->render("ajax_rule_trigger_filter_form_html.php");
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:		if (!($vn_trigger_id = $this->getRequest()->getParameter('trigger_id', pInteger))) {
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$this->view->setVar('trigger_id', $vn_trigger_id);
./manage/metadata_alert_rules/MetadataAlertRuleEditorController.php:			$this->view->setVar('t_trigger', $t_trigger);
./manage/search_forms/SearchFormEditorController.php:			$va_init[1]->set('user_id', $this->request->getUserID());
./manage/search_forms/SearchFormEditorController.php:			$va_init[1]->set('table_num', $this->request->getParameter('table_num', pInteger));
./manage/search_forms/SearchFormEditorController.php:		$pn_form_id = $this->request->getParameter('form_id', pInteger);
./manage/search_forms/SearchFormEditorController.php:		if (!$t_form->haveAccessToForm($this->request->getUserID(), __CA_SEARCH_FORM_EDIT_ACCESS__, $pn_form_id)) {		// is user allowed to edit form?
./manage/search_forms/SearchFormEditorController.php:			$this->notification->addNotification(_t("You cannot edit that form"), __NOTIFICATION_TYPE_ERROR__);
./manage/search_forms/SearchFormEditorController.php:			$this->response->setRedirect(caNavUrl($this->request, 'manage', 'SearchForm', 'ListForms'));
./manage/search_forms/SearchFormEditorController.php:		if ($this->_isFormEditable()) { return parent::Edit($pa_values, $pa_options); } 
./manage/search_forms/SearchFormEditorController.php:		if ($this->_isFormEditable()) { return parent::Delete($pa_options); } 
./manage/search_forms/SearchFormEditorController.php:			$pt_subject->addUsers(array($this->request->getUserID() => __CA_SEARCH_FORM_EDIT_ACCESS__));
./manage/search_forms/SearchFormEditorController.php:		return $this->render('widget_search_form_info_html.php', true);
./manage/set_items/SetItemEditorController.php: 				$this->postError(2320, _t("Access denied"), "SetItemEditorController->__construct()");
./manage/set_items/SetItemEditorController.php: 			$t_subject = $this->view->getVar("t_subject");
./manage/set_items/SetItemEditorController.php: 			$va_items = $t_set->getItems(array('user_id' => $this->request->getUserID()));
./manage/set_items/SetItemEditorController.php: 			$this->opo_result_context = new ResultContext($this->request, 'ca_set_items', 'set_item_edit');
./manage/set_items/SetItemEditorController.php: 			$this->opo_result_context->setResultList(is_array($va_items) ? array_keys($va_items) : array());
./manage/set_items/SetItemEditorController.php: 			$this->opo_result_context->setParameter('set_id', $vn_set_id);
./manage/set_items/SetItemEditorController.php: 			$this->opo_result_context->setAsLastFind();
./manage/set_items/SetItemEditorController.php: 			$this->opo_result_context->saveContext();
./manage/set_items/SetItemEditorController.php: 			$this->view->setVar('t_set', $t_set = new ca_sets($t_set_item->get('set_id')));
./manage/set_items/SetItemEditorController.php: 				$this->view->setVar('t_row_instance', $t_row_instance);
./manage/set_items/SetItemEditorController.php: 			return $this->render('widget_set_item_info_html.php', true);
./manage/sets/SetQuickAddController.php:		$va_response = $this->getView()->getVar('response');
./manage/sets/SetQuickAddController.php:			$t_set->getDb()->query('UPDATE ca_sets SET user_id=? WHERE set_id=?', $this->getRequest()->getUserID(), $va_response['id']);
./manage/sets/SetEditorController.php:			$this->postError(2320, _t("Access denied"), "SetsEditorController->__construct");
./manage/sets/SetEditorController.php:			$va_init[1]->set('user_id', $this->request->getUserID());
./manage/sets/SetEditorController.php:			$va_init[1]->set('table_num', $this->request->getParameter('table_num', pInteger));
./manage/sets/SetEditorController.php:		list($vn_subject_id, $t_subject, $t_ui, $vn_parent_id, $vn_above_id) = $this->_initView($pa_options);
./manage/sets/SetEditorController.php:		if ($t_subject->isLoaded() && !$t_subject->haveAccessToSet($this->request->getUserID(), __CA_SET_EDIT_ACCESS__, null, array('request' => $this->request))) {
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t("You cannot edit this set"), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->postError(2320, _t("Access denied"), "SetsEditorController->Delete()");
./manage/sets/SetEditorController.php:		$this->view->setVar('can_delete', $this->UserCanDeleteSet($t_subject->get('user_id')));
./manage/sets/SetEditorController.php:		$parent_id = $this->request->getParameter('parent_id', pInteger);
./manage/sets/SetEditorController.php:		if(!$this->request->getParameter('table_num', pInteger)) {
./manage/sets/SetEditorController.php:			$this->request->setParameter('table_num', $t_parent->get('ca_sets.table_num'));
./manage/sets/SetEditorController.php:		list($vn_subject_id, $t_subject, $t_ui) = $this->_initView($pa_options);
./manage/sets/SetEditorController.php:		if (!$this->UserCanDeleteSet($t_subject->get('user_id'))) {
./manage/sets/SetEditorController.php:			$this->postError(2320, _t("Access denied"), "SetsEditorController->Delete()");
./manage/sets/SetEditorController.php:			if((bool)$this->request->getParameter('confirm', pInteger)) {
./manage/sets/SetEditorController.php:				$this->response->setRedirect(caNavUrl($this->request, 'manage', 'Set', 'ListSets', []));
./manage/sets/SetEditorController.php:	  if ($this->request->user->canDoAction('can_delete_sets')) {
./manage/sets/SetEditorController.php:	  if ($this->request->user->canDoAction('can_delete_own_sets')) {
./manage/sets/SetEditorController.php:		if ($user_id == $this->request->getUserID()) {
./manage/sets/SetEditorController.php:		if ($pn_set_id = $this->request->getParameter('set_id', pInteger)) {
./manage/sets/SetEditorController.php:				$this->notification->addNotification(_t("The set does not exist"), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			if (!$t_set->haveAccessToSet($this->request->getUserID(), __CA_SET_EDIT_ACCESS__, null, array('request' => $this->request))) {
./manage/sets/SetEditorController.php:				$this->notification->addNotification(_t("You cannot edit this set"), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:				$this->Edit();
./manage/sets/SetEditorController.php:			$vn_set_item_count = $t_set->getItemCount(array('user_id' => $this->request->getUserID()));
./manage/sets/SetEditorController.php:			$pn_table_num = $this->request->getParameter('table_num', pInteger);
./manage/sets/SetEditorController.php:		$pn_row_id = $this->request->getParameter('row_id', pInteger);
./manage/sets/SetEditorController.php:		$this->view->setVar('errors', $va_errors);
./manage/sets/SetEditorController.php:		$this->view->setVar('set_id', $pn_set_id);
./manage/sets/SetEditorController.php:		$this->view->setVar('row_id', $pn_row_id);
./manage/sets/SetEditorController.php:		$this->view->setVar('idno', $t_row->get($t_row->getProperty('ID_NUMBERING_ID_FIELD')));
./manage/sets/SetEditorController.php:		$this->view->setVar('idno_sort', $t_row->get($t_row->getProperty('ID_NUMBERING_SORT_FIELD')));
./manage/sets/SetEditorController.php:		$this->view->setVar('set_item_label', $t_row->getLabelForDisplay(false));
./manage/sets/SetEditorController.php:		if($vs_template = $this->getRequest()->getParameter('displayTemplate', pString)) {
./manage/sets/SetEditorController.php:			$this->view->setVar('displayTemplate', $t_row->getWithTemplate($vs_template));
./manage/sets/SetEditorController.php:		$this->view->setVar('representation_tag', '');
./manage/sets/SetEditorController.php:				$this->view->setVar('representation_tag', $va_rep['tags'][$vs_thumbnail_version]);
./manage/sets/SetEditorController.php:				$this->view->setVar('representation_url', $va_rep['urls'][$vs_thumbnail_version]);
./manage/sets/SetEditorController.php:				$this->view->setVar('representation_width', $va_rep['info'][$vs_thumbnail_version]['WIDTH']);
./manage/sets/SetEditorController.php:				$this->view->setVar('representation_height', $va_rep['info'][$vs_thumbnail_version]['HEIGHT']);
./manage/sets/SetEditorController.php:		$this->render('ajax_set_item_info_json.php');
./manage/sets/SetEditorController.php:		$t_set = new ca_sets($this->request->getParameter('set_id', pInteger));
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('No set defined'), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_sets', $t_set->getPrimaryKey()));
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('No media is available for download'), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_sets', $t_set->getPrimaryKey()));
./manage/sets/SetEditorController.php:			$o_view = new View($this->request, $this->request->getViewsDirectoryPath().'/bundles/');
./manage/sets/SetEditorController.php:			$this->response->addContent($o_view->render('download_file_binary.php'));
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('No files to download'), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_sets', $t_set->getPrimaryKey()));
./manage/sets/SetEditorController.php:		return $this->Edit();
./manage/sets/SetEditorController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./manage/sets/SetEditorController.php:			$this->Edit();
./manage/sets/SetEditorController.php:		$t_set = new ca_sets($this->getRequest()->getParameter('set_id', pInteger));
./manage/sets/SetEditorController.php:		if(!(bool)$this->request->config->get('ca_sets_disable_duplication_of_items') && $this->request->user->canDoAction('can_duplicate_items_in_sets') && $this->request->user->canDoAction('can_duplicate_' . $t_set->getItemType())) {
./manage/sets/SetEditorController.php:			if($this->getRequest()->getParameter('setForDupes', pString) == 'current') {
./manage/sets/SetEditorController.php:			$t_dupe_set = $t_set->duplicateItemsInSet($this->getRequest()->getUserID(), $pa_dupe_options);
./manage/sets/SetEditorController.php:				$this->notification->addNotification(_t('Could not duplicate items in set: %1', join(';', $t_set->getErrors())), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:				$this->Edit();
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('Records have been successfully duplicated and added to set'), __NOTIFICATION_TYPE_INFO__);
./manage/sets/SetEditorController.php:			$this->opo_response->setRedirect(caEditorUrl($this->getRequest(), 'ca_sets', $t_dupe_set->getPrimaryKey()));
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('Cannot duplicate items'), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->Edit();
./manage/sets/SetEditorController.php:		$this->opo_result_context->setParameter('ca_sets_last_export_type', $_REQUEST['export_format'] ?? null);
./manage/sets/SetEditorController.php:		$this->opo_result_context->saveContext();
./manage/sets/SetEditorController.php:		$is_background = ($this->request->getParameter('background', pInteger) === 1);
./manage/sets/SetEditorController.php:		$export_format = $this->request->getParameter('export_format', pString);
./manage/sets/SetEditorController.php:		$set_id = $this->request->getParameter('set_id', pInteger);
./manage/sets/SetEditorController.php:        $display_id = $this->request->getParameter('display_id', pString);
./manage/sets/SetEditorController.php:			(sizeof($this->opo_result_context->getResultList() ?? []) > $bthreshold)
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t("Set export is too large for immediate download."), __NOTIFICATION_TYPE_INFO__);
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('No set defined'), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_sets', $t_set->getPrimaryKey()));
./manage/sets/SetEditorController.php:			$this->notification->addNotification(_t('No items are available for export'), __NOTIFICATION_TYPE_ERROR__);
./manage/sets/SetEditorController.php:			$this->opo_response->setRedirect(caEditorUrl($this->opo_request, 'ca_sets', $t_set->getPrimaryKey()));
./manage/sets/SetEditorController.php:				'user_id' => $this->request->getUserID(),
./manage/sets/SetEditorController.php:					'user_id' => $this->request->getUserID(),
./manage/sets/SetEditorController.php:				["priority" => 100, "entity_key" => join(':', ['ca_sets', $set_id, $this->opo_result_context->getSearchExpression()]), "row_key" => null, 'user_id' => $this->request->getUserID()]))
./manage/sets/SetEditorController.php:				caGetPrintTemplateParameters('sets', $export_format, ['view' => $this->view, 'request' => $this->request]);
./manage/sets/SetEditorController.php:				$this->request->isDownload(false);
./manage/sets/SetEditorController.php:				$this->notification->addNotification(_t("Set export is queued for processing and will be sent to %1 when ready.", $this->request->user->get('ca_users.email')), __NOTIFICATION_TYPE_INFO__);
./manage/sets/SetEditorController.php:				$this->Edit();
./manage/sets/SetEditorController.php:				$this->postError(100, _t("Couldn't queue set export", ), "SetEditorController->ExportSetItems()");
./manage/sets/SetEditorController.php:		if ($filename_template = $this->request->config->get('ca_sets_export_file_naming')) {
./manage/sets/SetEditorController.php:		caExportResult($this->request, $res, $export_format, '_output', ['display' => $display_id ? new ca_bundle_displays($display_id) : null, 'printTemplateType' => 'sets', 'set' => $t_set, 'filename' => $filename_stub]);
./manage/sets/SetEditorController.php:		$form = $this->request->getParameter('form', pString);
./manage/sets/SetEditorController.php:		$this->view->setVar('form', $m[2]);
./manage/sets/SetEditorController.php:		$this->view->setVar('options', $form_options);
./manage/sets/SetEditorController.php:			$this->response->setHTTPResponseCode(204, _t('No options available'));
./manage/sets/SetEditorController.php:		$this->render("ajax_print_summary_options_form_html.php");
./manage/sets/SetEditorController.php:		return $this->render('widget_set_info_html.php', true);
./manage/site_pages/SitePageEditorController.php:		$pn_page_id = $this->request->getParameter('page_id', pInteger);
./manage/site_pages/SitePageEditorController.php:		$this->view->setVar('media_list', $t_page->getPageMedia(['icon']));
./manage/site_pages/SitePageEditorController.php:		$this->render('media_list_html.php');
./manage/site_pages/SitePageEditorController.php:			$va_init[1]->set('user_id', $this->request->getUserID());
./manage/site_pages/SitePageEditorController.php:			$va_init[1]->set('table_num', $this->request->getParameter('table_num', pInteger));
./manage/site_pages/SitePageEditorController.php:		return $this->render('widget_site_page_info_html.php', true);
./manage/CommentsController.php: 		 	$this->opa_views = array(
./manage/CommentsController.php: 			$this->view->setVar('mode', 'search');
./manage/CommentsController.php: 			$this->view->setVar('table_list', $table_list = caGetPrimaryTablesForHTMLSelect());
./manage/CommentsController.php:            $filter_table = $this->request->getParameter('filter_table', pInteger);
./manage/CommentsController.php:            $this->view->setVar('filter_table', $filter_table);
./manage/CommentsController.php:            $filter_daterange = $this->request->getParameter('filter_daterange', pString);
./manage/CommentsController.php:            $this->view->setVar('filter_daterange', $filter_daterange);
./manage/CommentsController.php:            $this->view->setVar('user_list', $user_list = ca_item_comments::getCommentUsersForSelect());
./manage/CommentsController.php: 			$search = $this->request->getParameter('search', pString); 
./manage/CommentsController.php: 			$daterange = $this->request->getParameter('filter_daterange', pString);
./manage/CommentsController.php: 			$user_id = $this->request->getParameter('filter_user', pInteger);
./manage/CommentsController.php: 			$moderation = $this->request->getParameter('filter_moderation', pInteger);
./manage/CommentsController.php: 			    $this->request->setParameter('search', '*');
./manage/CommentsController.php: 			    $this->request->setParameter('search', join(" AND ", array_merge($search_list, [$search])));
./manage/CommentsController.php: 			    $this->request->setParameter('search', join(" AND ", $search_list));
./manage/CommentsController.php: 			$this->view->setVar('filter_user_id', $user_id);
./manage/CommentsController.php: 			$this->view->setVar('filter_daterange', $daterange);
./manage/CommentsController.php: 			$this->view->setVar('filter_search', $search);
./manage/CommentsController.php: 			$this->view->setVar('filter_moderation', $moderation);
./manage/CommentsController.php: 			$this->view->setVar('mode', 'list');
./manage/CommentsController.php: 			$this->view->setVar('t_comments', $t_comments);
./manage/CommentsController.php: 			$this->view->setVar('comments_list', $t_comments->getUnmoderatedComments(['returnAs' => 'searchResult']));
./manage/CommentsController.php: 				$this->notification->addNotification(_t("There are no unmoderated comments"), __NOTIFICATION_TYPE_INFO__);
./manage/CommentsController.php: 			$this->render('comment_list_html.php');
./manage/CommentsController.php: 			$pa_comment_ids = $this->request->getParameter('comment_id', pArray);
./manage/CommentsController.php: 			$ps_mode = $this->request->getParameter('mode', pString);
./manage/CommentsController.php:					if (!$t_comment->moderate($this->request->getUserID())) {
./manage/CommentsController.php:					$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/CommentsController.php:					$this->notification->addNotification(_t("Your comments have been approved"), __NOTIFICATION_TYPE_INFO__);
./manage/CommentsController.php:				$this->notification->addNotification(_t("Please use the checkboxes to select comments for approval"), __NOTIFICATION_TYPE_WARNING__);
./manage/CommentsController.php: 					$this->ListUnmoderated();
./manage/CommentsController.php: 					$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./manage/CommentsController.php: 					$this->Index();
./manage/CommentsController.php: 			$pa_comment_ids = $this->request->getParameter('comment_id', pArray);
./manage/CommentsController.php: 			$ps_mode = $this->request->getParameter('mode', pString);
./manage/CommentsController.php:					$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/CommentsController.php:					$this->notification->addNotification(_t("Your comments have been deleted"), __NOTIFICATION_TYPE_INFO__);
./manage/CommentsController.php:				$this->notification->addNotification(_t("Please use the checkboxes to select comments for deletion"), __NOTIFICATION_TYPE_WARNING__);
./manage/CommentsController.php: 					$this->ListUnmoderated();
./manage/CommentsController.php: 					$this->Index();
./manage/CommentsController.php: 					$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./manage/CommentsController.php: 			$this->view->setVar('unmoderated_comment_count', ($t_comments->getUnmoderatedCommentCount()));
./manage/CommentsController.php: 			$this->view->setVar('moderated_comment_count', ($t_comments->getModeratedCommentCount()));
./manage/CommentsController.php: 			$this->view->setVar('total_comment_count', ($t_comments->getCommentCount()));
./manage/CommentsController.php: 			return $this->render('widget_comments_info_html.php', true);
./manage/CommentsController.php: 			$pn_comment_id = $this->request->getParameter('comment_id', pString);
./manage/CommentsController.php: 			$ps_field = $this->request->getParameter('field', pString);
./manage/CommentsController.php: 			$ps_mode = $this->request->getParameter('mode', pString);
./manage/CommentsController.php: 			$ps_version = $this->request->getParameter('version', pString);
./manage/CommentsController.php:						$this->ListUnmoderated();
./manage/CommentsController.php:						$this->Index();
./manage/CommentsController.php:						$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./manage/CommentsController.php: 				$this->view->setVar('version_path', $t_item_comment->getMediaPath($ps_field, $ps_version));
./manage/CommentsController.php:						$this->view->setVar('version_download_name', $va_info['ORIGINAL_FILENAME']);
./manage/CommentsController.php:						$this->view->setVar('version_download_name', join('_', $va_tmp).'.'.$va_version_info['EXTENSION']);
./manage/CommentsController.php:					$this->view->setVar('version_download_name', 'comment_media_'.$pn_comment_id.'_'.$ps_version.'.'.$va_version_info['EXTENSION']);
./manage/CommentsController.php: 				return $this->render('comment_download_binary.php');
./manage/MetadataAlertsController.php: 		if (!$this->request->user->canDoAction("can_use_metadata_alerts")) { throw new ApplicationException(_t('Alerts are not available')); }
./manage/MetadataAlertsController.php:		$this->getView()->setVar('rule_list', $va_list);
./manage/MetadataAlertsController.php:		$o_result_context = new ResultContext($this->getRequest(), 'ca_metadata_alert_rules', 'basic_search');
./manage/MetadataAlertsController.php:		$this->render('metadata_alert_list_html.php');
./manage/MetadataAlertsController.php:		$this->getView()->setVar('rule_count', sizeof($va_list));
./manage/MetadataAlertsController.php:		return $this->render('widget_metadata_alerts_info_html.php', true);
./manage/SavedSearchesController.php:				if(sizeof($va_saved_search_list = $this->request->user->getSavedSearches($vs_table, "basic_search")) > 0){
./manage/SavedSearchesController.php:				if(sizeof($va_saved_search_list = $this->request->user->getSavedSearches($vs_table, "advanced_search")) > 0){
./manage/SavedSearchesController.php:			$this->view->setVar("saved_searches", $va_searches);
./manage/SavedSearchesController.php: 				$this->notification->addNotification(_t("There are no saved searches"), __NOTIFICATION_TYPE_INFO__);
./manage/SavedSearchesController.php: 			$this->render('saved_searches_list_html.php');
./manage/SavedSearchesController.php: 			$pa_saved_search_ids = $this->request->getParameter('saved_search_id', pArray);
./manage/SavedSearchesController.php:					if(!$this->request->user->removeSavedSearch($va_search_pieces[0], $va_search_pieces[1], $va_search_pieces[2])){
./manage/SavedSearchesController.php:					$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/SavedSearchesController.php:					$this->notification->addNotification(_t("Your searches have been deleted"), __NOTIFICATION_TYPE_INFO__);
./manage/SavedSearchesController.php:				$this->notification->addNotification(_t("Please use the checkboxes to select searches for deletion"), __NOTIFICATION_TYPE_WARNING__);
./manage/SavedSearchesController.php: 			$this->ListSearches();
./manage/SavedSearchesController.php: 			$this->view->setVar('search_count', Session::getVar('saved_search_count'));
./manage/SavedSearchesController.php: 			return $this->render('widget_saved_searches_info_html.php', true);
./manage/SearchFormController.php: 			$this->view->setVar('t_form', $t_form);
./manage/SearchFormController.php: 			$this->view->setVar('form_list', $va_forms = caExtractValuesByUserLocale($t_form->getForms(array('user_id' => $this->request->getUserID(), 'access' => __CA_SEARCH_FORM_EDIT_ACCESS__)), null, null, array()));
./manage/SearchFormController.php: 			$o_result_context = new ResultContext($this->request, 'ca_search_forms', 'basic_search');
./manage/SearchFormController.php: 			$this->view->setVar('table_list', caFilterTableList($t_form->getFieldInfo('table_num', 'BOUNDS_CHOICE_LIST')));
./manage/SearchFormController.php: 			$this->render('search_form_list_html.php');
./manage/SearchFormController.php: 			$this->view->setVar('form_count', $t_form->getFormCount(array('user_id' => $this->request->getUserID(), 'access' => __CA_SEARCH_FORM_EDIT_ACCESS__)));
./manage/SearchFormController.php: 			return $this->render('widget_search_form_info_html.php', true);
./manage/TagsController.php: 		 	$this->opa_views = array(
./manage/TagsController.php: 			$this->view->setVar('tags_list', $t_tag->getUnmoderatedTags());
./manage/TagsController.php: 				$this->notification->addNotification(_t("There are no unmoderated tags"), __NOTIFICATION_TYPE_INFO__);
./manage/TagsController.php: 			$this->render('tag_list_html.php');
./manage/TagsController.php: 			$pa_tag_relation_ids = $this->request->getParameter('tag_relation_id', pArray);
./manage/TagsController.php: 			$ps_mode = $this->request->getParameter('mode', pString);
./manage/TagsController.php:					if (!$t_item_x_tag->moderate($this->request->getUserID())) {
./manage/TagsController.php:					$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/TagsController.php:					$this->notification->addNotification(_t("Your tags have been approved"), __NOTIFICATION_TYPE_INFO__);
./manage/TagsController.php:				$this->notification->addNotification(_t("Please use the checkboxes to select tags for approval"), __NOTIFICATION_TYPE_WARNING__);
./manage/TagsController.php: 					$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./manage/TagsController.php: 					$this->ListUnmoderated();
./manage/TagsController.php: 			$pa_tag_relation_ids = $this->request->getParameter('tag_relation_id', pArray);
./manage/TagsController.php: 			$ps_mode = $this->request->getParameter('mode', pString);
./manage/TagsController.php:					$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/TagsController.php:					$this->notification->addNotification(_t("Your tags have been deleted"), __NOTIFICATION_TYPE_INFO__);
./manage/TagsController.php:				$this->notification->addNotification(_t("Please use the checkboxes to select tags for deletion"), __NOTIFICATION_TYPE_WARNING__);
./manage/TagsController.php: 					$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./manage/TagsController.php: 					$this->ListUnmoderated();
./manage/TagsController.php: 			$pa_tag_ids = $this->request->getParameter('tag_id', pArray);
./manage/TagsController.php:					$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/TagsController.php:					$this->notification->addNotification(_t("Your tags have been deleted"), __NOTIFICATION_TYPE_INFO__);
./manage/TagsController.php:				$this->notification->addNotification(_t("Please use the checkboxes to select tags for deletion"), __NOTIFICATION_TYPE_WARNING__);
./manage/TagsController.php: 			$this->Index();
./manage/TagsController.php: 			$this->view->setVar('unmoderated_tag_count', ($t_tag->getUnmoderatedTagCount()));
./manage/TagsController.php: 			$this->view->setVar('moderated_tag_count', ($t_tag->getModeratedTagCount()));
./manage/TagsController.php: 			$this->view->setVar('total_taggings_count', ($t_tag->getTagCount()));
./manage/TagsController.php: 			$this->view->setVar('total_tag_count', ($t_tag->getItemTagsCount()));
./manage/TagsController.php: 			return $this->render('widget_tags_info_html.php', true);
./manage/UserSortController.php:			$this->getResponse()->setRedirect($po_request->config->get('error_display_url').'/n/3500?r='.urlencode($po_request->getFullUrlPath()));
./manage/UserSortController.php:		$this->getView()->setVar('user_sorts', $va_list);
./manage/UserSortController.php:			$this->opo_notification_manager->addNotification(_t("There are no user sorts"), __NOTIFICATION_TYPE_INFO__);
./manage/UserSortController.php:		$this->render('user_sort_list_html.php');
./manage/UserSortController.php:		$pa_sort_ids = $this->request->getParameter('sort_id', pArray);
./manage/UserSortController.php:				$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/UserSortController.php:				$this->notification->addNotification(_t("Your sorts have been deleted"), __NOTIFICATION_TYPE_INFO__);
./manage/UserSortController.php:			$this->notification->addNotification(_t("Please use the checkboxes to select sorts to remove"), __NOTIFICATION_TYPE_WARNING__);
./manage/UserSortController.php:		$this->ListSorts();
./manage/UserSortController.php:		$vn_sort_id = $this->getRequest()->getParameter('sort_id', pInteger);
./manage/UserSortController.php:			$this->getView()->setVar('sort_id', $vn_sort_id);
./manage/UserSortController.php:		$this->getView()->setVar('t_sort', $t_sort);
./manage/UserSortController.php:		$this->getView()->setVar('sort_element_list', caGetAvailableSortFields(
./manage/UserSortController.php:		$this->getView()->setVar('sort_bundle_names', $t_sort->getSortBundleNames());
./manage/UserSortController.php:		$this->render('user_sort_edit_html.php');
./manage/UserSortController.php:		if($vn_sort_id = $this->getRequest()->getParameter('sort_id', pInteger)) {
./manage/UserSortController.php:				$this->notification->addNotification(_t("Sort doesn't exist"), __NOTIFICATION_TYPE_ERROR__);
./manage/UserSortController.php:				$this->ListSorts();
./manage/UserSortController.php:			if($vs_name = $this->getRequest()->getParameter('name', pString)) {
./manage/UserSortController.php:			if($vs_name = $this->getRequest()->getParameter('name', pString)) {
./manage/UserSortController.php:			if($vn_table_num = $this->getRequest()->getParameter('table_num', pInteger)) {
./manage/UserSortController.php:			$t_sort->set('user_id', $this->getRequest()->getUserID());
./manage/UserSortController.php:			$this->notification->addNotification(join("; ", $t_sort->getErrors()), __NOTIFICATION_TYPE_ERROR__);
./manage/UserSortController.php:			while(strlen($vs_sort_item_i = $this->getRequest()->getParameter('sort_item_'.$i, pString)) > 0) {
./manage/UserSortController.php:		$this->ListSorts();
./manage/UserSortController.php:		$vn_table_num = $this->getRequest()->getParameter('table_num', pInteger);
./manage/UserSortController.php:		$this->getView()->setVar('available_sort_fields', caGetAvailableSortFields(
./manage/UserSortController.php:		$this->render('user_sort_table_bundles_json.php');
./manage/WatchedItemsController.php:		$va_watched_items = $t_watch_list->getWatchedItems($this->request->user->get("user_id"));
./manage/WatchedItemsController.php:		$this->view->setVar("watched_items", $va_watched_items);
./manage/WatchedItemsController.php:			$this->notification->addNotification(_t("There are no watched items"), __NOTIFICATION_TYPE_INFO__);
./manage/WatchedItemsController.php:		$this->render('watched_items_list_html.php');
./manage/WatchedItemsController.php:		$ps_mode = $this->request->getParameter('mode', pString);
./manage/WatchedItemsController.php:		$pa_watch_ids = $this->request->getParameter('watch_id', pArray);
./manage/WatchedItemsController.php:				$this->notification->addNotification(implode("; ", $va_errors), __NOTIFICATION_TYPE_ERROR__);
./manage/WatchedItemsController.php:				$this->notification->addNotification(_t("Your watched items have been deleted"), __NOTIFICATION_TYPE_INFO__);
./manage/WatchedItemsController.php:			$this->notification->addNotification(_t("Please use the checkboxes to select items to remove from your watch list"), __NOTIFICATION_TYPE_WARNING__);
./manage/WatchedItemsController.php:			$this->response->setRedirect(caNavUrl($this->request, "", "Dashboard", "Index"));
./manage/WatchedItemsController.php:			$this->ListItems();
./manage/WatchedItemsController.php:		$this->getView()->setVar('t_watch_list', new ca_watch_list());
./manage/WatchedItemsController.php:		return $this->render('widget_watched_items_info_html.php', true);
./manage/WatchedItemsController.php:		$ps_table = $this->getRequest()->getParameter('set_table', pString);
./manage/WatchedItemsController.php:			$this->opo_notification_manager->addNotification(_t("Invalid table"), __NOTIFICATION_TYPE_ERROR__);
./manage/WatchedItemsController.php:			$this->ListItems();
./manage/WatchedItemsController.php:		$ps_set_name = $this->getRequest()->getParameter('set_name', pString);
./manage/WatchedItemsController.php:		$va_items = $t_watch_list->getWatchedItems($this->getRequest()->getUserID(), $t_instance->tableNum());
./manage/WatchedItemsController.php:		$t_set->set('type_id', $this->getRequest()->getAppConfig()->get('ca_sets_default_type'));
./manage/WatchedItemsController.php:		$t_set->set('user_id', $this->getRequest()->getUserID());
./manage/WatchedItemsController.php:			$this->opo_notification_manager->addNotification(join(': ', $t_set->getErrors()), __NOTIFICATION_TYPE_ERROR__);
./manage/WatchedItemsController.php:			$this->ListItems();
./manage/WatchedItemsController.php:		$this->opo_notification_manager->addNotification(_t("Added set '%1' with %2 items", $ps_set_name, $vn_added_items_count), __NOTIFICATION_TYPE_INFO__);
./manage/WatchedItemsController.php:		$this->ListItems();
./manage/NotificationsController.php:		$pn_subject_id = $this->getRequest()->getParameter('subject_id', pInteger);
./manage/NotificationsController.php:		if (!ca_notifications::markAsRead($pn_subject_id, $this->request->getUserID())) {
./manage/NotificationsController.php:			$this->notification->addNotification(_t("Could not mark notification as read"), __NOTIFICATION_TYPE_ERROR__);
./manage/NotificationsController.php:		if (!ca_notifications::markAllAsRead($this->request->getUserID())) {
./manage/NotificationsController.php:			$this->notification->addNotification(_t("Could not mark notification as read"), __NOTIFICATION_TYPE_ERROR__);
./manage/DownloadsController.php:		$this->view->setVar('t_download', $t_download);
./manage/DownloadsController.php:		$this->view->setVar('download_list', $t_download->getDownloads(['user_id' => $this->request->getUserID()]));
./manage/DownloadsController.php:		$this->render('download_list_html.php');
./manage/DownloadsController.php:		$download_id = $this->request->getParameter('download_id', pInteger);
./manage/DownloadsController.php:		$t_download = ca_user_export_downloads::findAsInstance(['download_id' => $download_id, 'user_id' => $this->request->getUserID()]);
./manage/DownloadsController.php:			$this->view->setVar('t_download', $t_download);
./manage/DownloadsController.php:			$this->view->setVar('file_path', $file_path = $t_download->getFilePath('export_file'));
./manage/DownloadsController.php:			$this->view->setVar('download_name', preg_replace("![^A-Za-z0-9_\-\.]+!", '', $md['searchExpressionForDisplay']).'.'.$md['extension']);
./manage/DownloadsController.php:		$this->render('download_export_binary.php');
./manage/DownloadsController.php:		$ids_to_delete = $this->request->getParameter('delete_id', pArray);
./manage/DownloadsController.php:		$downloaded = $this->request->getParameter('downloadedOnly', pInteger);
./manage/DownloadsController.php:			if(is_array($downloads_to_delete =  ca_user_export_downloads::find(['user_id' => $this->request->getUserID(), 'downloaded_on' => ['>', 0]], ['returnAs' => 'modelInstances']))) {
./manage/DownloadsController.php:				if($t_download = ca_user_export_downloads::findAsInstance(['download_id' => $download_id, 'user_id' => $this->request->getUserID()])) {
./manage/DownloadsController.php:		if(!$this->request->isAjax()) {
./manage/DownloadsController.php:				$this->notification->addNotification($delete_count == 1 ? _t("Deleted %1 download", $delete_count) : _t("Deleted %1 downloads", $delete_count), __NOTIFICATION_TYPE_INFO__);
./manage/DownloadsController.php:				$this->notification->addNotification($delete_count == 1 ? _t("Could not delete %1 download", $failed_deletes) : _t("Could not delete %1 downloads", $failed_deletes), __NOTIFICATION_TYPE_ERROR__);
./manage/DownloadsController.php:		$this->List();
./manage/DownloadsController.php:		$this->view->setVar('download_count', ca_user_export_downloads::getDownloadCount(['generatedOnly' => true, 'user_id' => $this->request->getUserID()]));
./manage/DownloadsController.php:		return $this->render('widget_download_info_html.php', true);
./manage/GroupsController.php:			$o_result_context = new ResultContext($this->request, 'ca_user_groups', 'basic_search');
./manage/GroupsController.php: 			if (!($t_group = $this->getGroupObject())) {
./manage/GroupsController.php: 				$this->notification->addNotification(_t("You cannot edit this group"), __NOTIFICATION_TYPE_ERROR__);	
./manage/GroupsController.php: 				$this->render('group_list_html.php');
./manage/GroupsController.php:				$va_groups = $t_group->getGroupList('name', 'asc', $this->request->user->getUserID());
./manage/GroupsController.php: 			$this->render('group_edit_html.php');
./manage/GroupsController.php: 			if (!($t_group = $this->getGroupObject())) {
./manage/GroupsController.php: 				$this->notification->addNotification(_t("You cannot edit this group"), __NOTIFICATION_TYPE_ERROR__);	
./manage/GroupsController.php: 				$this->render('group_list_html.php');
./manage/GroupsController.php: 					$this->request->addActionErrors($t_group->errors(), 'field_'.$vs_f);
./manage/GroupsController.php: 			$t_group->set('user_id', $this->request->user->getUserID());
./manage/GroupsController.php: 			//$t_group->set('code', $this->request->user->getUserID().'_'.substr(preg_replace('![^A-Za-z0-9]+!', '_', $_REQUEST['name']), 0, 10));
./manage/GroupsController.php: 			if ($this->request->getParameter('password', pString) != $this->request->getParameter('password_confirm', pString)) {
./manage/GroupsController.php: 				$this->request->addActionError(new ApplicationError(1050, _t("Password does not match confirmation. Please try again."), "manage/GroupsController->Save()", '', false, false), 'field_password');
./manage/GroupsController.php: 			if($this->request->numActionErrors() == 0) {
./manage/GroupsController.php:						$this->request->addActionError($o_e, 'general');
./manage/GroupsController.php:						$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./manage/GroupsController.php:					$va_users = $this->request->getParameter('group_users', pArray);
./manage/GroupsController.php:					$va_user_list = $this->request->user->getUserList(array('sort' => 'lname', 'sort_direction' => 'asc', 'userclass' => array(0, 1)));	//userclass 0 ="back-end" users; 1=front-end users
./manage/GroupsController.php:				$this->notification->addNotification(_t("Your entry has errors. See below for details."), __NOTIFICATION_TYPE_ERROR__);
./manage/GroupsController.php:			if ($this->request->numActionErrors()) {
./manage/GroupsController.php:				$this->render('group_edit_html.php');
./manage/GroupsController.php: 				$this->view->setVar('group_list', $t_group->getGroupList('name', 'asc', $this->request->user->getUserID()));
./manage/GroupsController.php: 				$this->render('group_list_html.php');
./manage/GroupsController.php: 			$vs_sort_field = $this->request->getParameter('sort', pString);
./manage/GroupsController.php: 			$this->view->setVar('group_list', $t_group->getGroupList('name', 'asc', $this->request->user->getUserID()));
./manage/GroupsController.php: 			$this->render('group_list_html.php');
./manage/GroupsController.php: 			if (!($t_group = $this->getGroupObject())) {
./manage/GroupsController.php: 				$this->notification->addNotification(_t("You cannot delete this group"), __NOTIFICATION_TYPE_ERROR__);	
./manage/GroupsController.php: 				$this->render('group_list_html.php');
./manage/GroupsController.php: 			if ($this->request->getParameter('confirm', pInteger)) {
./manage/GroupsController.php:						$this->request->addActionError($o_e, 'general');
./manage/GroupsController.php: 				$o_result_context = new ResultContext($this->request, 'ca_user_groups', 'basic_search');
./manage/GroupsController.php: 				$this->ListGroups();
./manage/GroupsController.php: 				$this->render('group_delete_html.php');
./manage/GroupsController.php: 			if (!($t_group = $this->pt_group)) {
./manage/GroupsController.php:				if (!($vn_group_id = $this->request->getParameter('group_id', pInteger))) {
./manage/GroupsController.php:			if ($t_group->getPrimaryKey() && ($t_group->get('user_id') != $this->request->user->getUserID())) { return false; }
./manage/GroupsController.php: 				$this->view->setVar('group_id', $vn_group_id);
./manage/GroupsController.php: 				$this->view->setVar('t_group', $t_group);
./manage/GroupsController.php: 			$this->pt_group = $t_group;
./manage/GroupsController.php: 			$this->view->setVar('group_count', $t_group->getGroupCount($this->request->user->getUserID()));
./manage/GroupsController.php: 			if ($t_group = $this->getGroupObject()) {
./manage/GroupsController.php: 				$this->view->setVar('t_item', $t_group);
./manage/GroupsController.php: 				$this->view->setVar('result_context', $o_result_context = new ResultContext($this->request, 'ca_user_groups', 'basic_search'));
./manage/GroupsController.php: 			return $this->render('widget_group_info_html.php', true);
./manage/PawtucketController.php:		if(!$this->request->isLoggedIn() || (!$this->request->getUser()->canDoAction('can_edit_theme_global_values') && !$this->request->getUser()->canDoAction('can_edit_theme_page_content'))) {
./manage/PawtucketController.php:		if(!$this->request->getUser()->canDoAction('can_edit_ca_site_pages')) { throw new ApplicationException("No access"); }
./manage/PawtucketController.php:		$o_result_context = new ResultContext($this->request, 'ca_site_pages', 'basic_search');
./manage/PawtucketController.php:		$this->view->setVar('t_page', new ca_site_pages());
./manage/PawtucketController.php:		$this->view->setVar('page_list', $va_page_list = ca_site_pages::getPageList());
./manage/PawtucketController.php:		$this->render("Pawtucket/page_list_html.php");	
./manage/PawtucketController.php:		if(!$this->request->getUser()->canDoAction('can_edit_theme_global_values')) { throw new ApplicationException("No access"); }
./manage/PawtucketController.php:		if (!is_array($va_toolbar_config = $this->request->config->getAssoc('wysiwyg_editor_toolbar'))) { $va_toolbar_config = array(); }
./manage/PawtucketController.php:		if(is_array($va_template_values = $this->request->config->getAssoc('global_template_values'))) {
./manage/PawtucketController.php:		$this->view->setVar('form_elements', $va_form_elements);
./manage/PawtucketController.php:		$this->render("Pawtucket/edit_global_values_html.php");
./manage/PawtucketController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./manage/PawtucketController.php:			$this->editGlobalValues();
./manage/PawtucketController.php:		if(!$this->request->getUser()->canDoAction('can_edit_theme_global_values')) { throw new ApplicationException("No access"); }
./manage/PawtucketController.php:		if(is_array($va_template_values = $this->request->config->getAssoc('global_template_values'))) {
./manage/PawtucketController.php:				$o_appvars->setVar("pawtucket_global_{$vs_name}", $this->request->getParameter($vs_name, pString));
./manage/PawtucketController.php:		$this->notification->addNotification(_t('Saved values'), __NOTIFICATION_TYPE_INFO__);
./manage/PawtucketController.php:		$this->editGlobalValues();
./manage/PawtucketController.php:		$this->view->setVar('result_context', new ResultContext($this->request, 'ca_site_pages', 'basic_search'));
./manage/PawtucketController.php:		if ($pn_page_id = $this->request->getParameter('page_id', pInteger)) { 
./manage/PawtucketController.php:			$this->view->setVar('page_id', $pn_page_id);
./manage/PawtucketController.php:			$this->view->setVar('t_item', new ca_site_pages($pn_page_id));
./manage/PawtucketController.php:			$this->view->setVar('num_pages', ca_site_pages::pageCount());
./manage/PawtucketController.php:			$this->view->setVar('num_public_pages', ca_site_pages::pageCountForAccess(1));
./manage/PawtucketController.php:		return $this->render('Pawtucket/widget_pawtucket_info_html.php', true);
./manage/SetController.php:		$o_result_context = new ResultContext($this->request, 'ca_sets', 'basic_search');
./manage/SetController.php:		$this->opn_items_per_page = ((int) $this->request->config->get('items_per_page_default_for_ca_sets_search') ?: 20);
./manage/SetController.php:		$this->view->setVar('items_per_page', $this->opn_items_per_page);
./manage/SetController.php:		$this->opn_list_set_type_id = $this->request->getParameter('list_set_type_id', pInteger);
./manage/SetController.php:		if (strlen($this->opn_list_set_type_id) > 0) {
./manage/SetController.php:			if((int)$o_result_context->getParameter('set_type_id') != (int)$this->opn_list_set_type_id){
./manage/SetController.php:				$this->opb_criteria_has_changed = true;
./manage/SetController.php:			if((int)$this->opn_list_set_type_id < 0){
./manage/SetController.php:				$this->opn_list_set_type_id = null;
./manage/SetController.php:				$o_result_context->setParameter('list_set_type_id', (int)$this->opn_list_set_type_id);
./manage/SetController.php:			$this->opn_list_set_type_id = (int)$o_result_context->getParameter('list_set_type_id');
./manage/SetController.php:		$this->ops_set_type_singular = _t("set");
./manage/SetController.php:		$this->ops_set_type_plural = _t("sets");
./manage/SetController.php:		if($this->opn_list_set_type_id){
./manage/SetController.php:			$this->ops_set_type_singular = $t_list->getItemForDisplayByItemID($this->opn_list_set_type_id);
./manage/SetController.php:			$this->ops_set_type_plural = $t_list->getItemForDisplayByItemID($this->opn_list_set_type_id, ['return' => 'plural']);
./manage/SetController.php:		$this->view->setVar('list_set_type_id', $this->opn_list_set_type_id);
./manage/SetController.php:		$this->view->setVar('type_name_singular', $this->ops_set_type_singular);
./manage/SetController.php:		$this->view->setVar('type_name_plural', $this->ops_set_type_plural);
./manage/SetController.php:		$this->opa_sorts = array("name", "set_content_type", "access", "lname", "item_count", "set_type", "access", "status", "rank", "created");
./manage/SetController.php:		$o_result_context = new ResultContext($this->request, 'ca_sets', 'basic_search');
./manage/SetController.php:		$this->view->setVar('table_list', caFilterTableList($t_set->getFieldInfo('table_num', 'BOUNDS_CHOICE_LIST')));
./manage/SetController.php:		$this->view->setVar('t_set', $t_set);
./manage/SetController.php:		$vn_user_id = !(bool)$this->request->config->get('ca_sets_all_users_see_all_sets') ? $this->request->getUserID() : null;            
./manage/SetController.php:		$o_result_context->setItemsPerPage($this->opn_items_per_page);
./manage/SetController.php:		$this->view->setVar('page', $vn_page_num = $o_result_context->getCurrentResultsPageNumber());
./manage/SetController.php:		if (!$vn_page_num || $this->opb_criteria_has_changed) {
./manage/SetController.php:		if ($this->request->user->canDoAction('is_administrator') || $this->request->user->canDoAction('can_administrate_sets')) {
./manage/SetController.php:			$ps_mode = $this->request->getParameter('mode', pString);
./manage/SetController.php:				$this->opb_criteria_has_changed = true;
./manage/SetController.php:					$va_set_list = caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $vn_user_id, 'access' => __CA_SET_EDIT_ACCESS__, 'setType' => $this->opn_list_set_type_id)), null, null, array());
./manage/SetController.php:					$va_set_list = caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $vn_user_id, 'allUsers' => true, 'setType' => $this->opn_list_set_type_id)), null, null, array());
./manage/SetController.php:					$va_set_list = caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $vn_user_id, 'publicUsers' => true, 'setType' => $this->opn_list_set_type_id)), null, null, array());
./manage/SetController.php:			$va_set_list = caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $vn_user_id, 'access' => __CA_SET_EDIT_ACCESS__, 'setType' => $this->opn_list_set_type_id)), null, null, array());
./manage/SetController.php:		if (!($vs_sort 	= $o_result_context->getCurrentSort()) || (!in_array($vs_sort, $this->opa_sorts))) { 
./manage/SetController.php:			$this->opb_criteria_has_changed = true;
./manage/SetController.php:		$this->view->setVar('current_sort', $vs_sort);
./manage/SetController.php:		$this->view->setVar('current_sort_direction', $vs_sort_direction);	
./manage/SetController.php:				$va_set_list[$id]['can_delete'] = $this->UserCanDeleteSet($va_set['user_id']);
./manage/SetController.php:		$this->view->setVar('mode', $pn_mode);
./manage/SetController.php:		$this->view->setVar('num_hits', $vn_num_hits = sizeof($va_set_list_sorted));
./manage/SetController.php:		$this->view->setVar('num_pages', $vn_num_pages = ceil($vn_num_hits/$this->opn_items_per_page));
./manage/SetController.php:			$vn_start = $this->opn_items_per_page * ($vn_page_num - 1);
./manage/SetController.php:			$va_set_list_sorted = array_slice($va_set_list_sorted, $vn_start, $this->opn_items_per_page, true);
./manage/SetController.php:		$this->view->setVar('set_list', $va_set_list_sorted);
./manage/SetController.php:		$this->render('set_list_html.php');
./manage/SetController.php:		$o_result_context = new ResultContext($this->request, 'ca_sets', 'by_user');
./manage/SetController.php:		$this->view->setVar('table_list', caFilterTableList($t_set->getFieldInfo('table_num', 'BOUNDS_CHOICE_LIST')));
./manage/SetController.php:		$this->view->setVar('t_set', $t_set);
./manage/SetController.php:		$this->view->setVar('page', $vn_page_num = $o_result_context->getCurrentResultsPageNumber());
./manage/SetController.php:		$vn_user_id = !(bool)$this->request->config->get('ca_sets_all_users_see_all_sets') ? $this->request->getUserID() : null;            
./manage/SetController.php:		$o_result_context->setItemsPerPage($this->opn_items_per_page);
./manage/SetController.php:		if (!$vn_page_num || $this->opb_criteria_has_changed) {
./manage/SetController.php:		if ($this->request->user->canDoAction('is_administrator') || $this->request->user->canDoAction('can_administrate_sets')) {
./manage/SetController.php:			$ps_mode = $this->request->getParameter('mode', pString);
./manage/SetController.php:				$this->opb_criteria_has_changed = true;
./manage/SetController.php:					$va_set_list = $t_set->getSets(['user_id' => $vn_user_id, 'access' => __CA_SET_EDIT_ACCESS__, 'setType' => $this->opn_list_set_type_id, 'byUser' => true]);
./manage/SetController.php:					$va_set_list = $t_set->getSets(['user_id' => $vn_user_id, 'allUsers' => true, 'setType' => $this->opn_list_set_type_id, 'byUser' => true]);
./manage/SetController.php:					$va_set_list = $t_set->getSets(['user_id' => $vn_user_id, 'publicUsers' => true, 'setType' => $this->opn_list_set_type_id, 'byUser' => true]);
./manage/SetController.php:			$va_set_list = $t_set->getSets(['user_id' => $vn_user_id, 'access' => __CA_SET_EDIT_ACCESS__, 'setType' => $this->opn_list_set_type_id, 'byUser' => true]);
./manage/SetController.php:		$this->view->setVar('num_hits', $vn_num_hits = sizeof($va_set_list));
./manage/SetController.php:		$this->view->setVar('num_pages', $vn_num_pages = ceil($vn_num_hits/$this->opn_items_per_page));
./manage/SetController.php:			$vn_start = $this->opn_items_per_page * ($vn_page_num - 1);
./manage/SetController.php:				$this->view->setVar('page', $vn_page_num);
./manage/SetController.php:			$va_set_list = array_slice($va_set_list, $vn_start, $this->opn_items_per_page, true);
./manage/SetController.php:		$this->view->setVar('set_list', $va_set_list);
./manage/SetController.php:		$this->view->setVar('type_name_singular', _t('user'));
./manage/SetController.php:		$this->view->setVar('type_name_plural', _t('users'));
./manage/SetController.php:		$this->render('set_list_by_user_html.php');
./manage/SetController.php:		if ($vb_confirm = ($this->request->getParameter('confirm', pInteger) == 1) ? true : false) {
./manage/SetController.php:			if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./manage/SetController.php:				$this->ListSets();
./manage/SetController.php:			if (!is_array($pa_set_ids = $this->request->getParameter('row_id', pArray))) {
./manage/SetController.php:				$this->notification->addNotification(_t("At least two sets must be selected"), __NOTIFICATION_TYPE_ERROR__);
./manage/SetController.php:				$this->ListSets();
./manage/SetController.php:			$vn_user_id = $this->request->getUserID();
./manage/SetController.php:								$this->notification->addNotification(($delete_count === 1) ? _t("Deleted %1 set", $delete_count) : _t("Deleted %1 sets", $delete_count), __NOTIFICATION_TYPE_INFO__);
./manage/SetController.php:							$this->notification->addNotification(_t("Could not delete set %1: %2", $t_set->get('set_code'), join("; ", $t_set->getErrors())), __NOTIFICATION_TYPE_ERROR__);
./manage/SetController.php:							$this->ListSets();
./manage/SetController.php:				$this->notification->addNotification(($delete_count === 1) ? _t("Deleted %1 set", $delete_count) : _t("Deleted %1 sets", $delete_count), __NOTIFICATION_TYPE_INFO__);
./manage/SetController.php:				$this->notification->addNotification(_t("You do not have access to the selected sets"), __NOTIFICATION_TYPE_ERROR__);
./manage/SetController.php:		$this->ListSets();
./manage/SetController.php:		$set_mode = $this->request->getParameter('algebra_set_mode', pString);	
./manage/SetController.php:		$set_name = $this->request->getParameter('algebra_set_name', pString);
./manage/SetController.php:		$ps_op = $this->request->getParameter('algebra_set_operation', pString);
./manage/SetController.php:		if (!is_array($pa_set_ids = $this->request->getParameter('algebra_set_id', pArray))) {
./manage/SetController.php:			$this->notification->addNotification(_t("At least two sets must be selected"), __NOTIFICATION_TYPE_ERROR__);
./manage/SetController.php:			$this->ListSets();
./manage/SetController.php:		$vn_user_id = $this->request->getUserID();
./manage/SetController.php:				$this->view->setVar('sets', $pa_set_ids);
./manage/SetController.php:				$this->render('set_delete_html.php');
./manage/SetController.php:							$this->notification->addNotification(_t("Invalid operation"), __NOTIFICATION_TYPE_ERROR__);
./manage/SetController.php:							$this->notification->addNotification(_t("Could not create new set: %1", join("; ", $t_set->getErrors()), __NOTIFICATION_TYPE_ERROR__));
./manage/SetController.php:								$this->notification->addNotification(_t("Could not add label to new set: %1", join("; ", $t_set->getErrors()), __NOTIFICATION_TYPE_ERROR__));
./manage/SetController.php:								$this->notification->addNotification(_t("Could not add items to new set: %1", join("; ", $t_set->getErrors()), __NOTIFICATION_TYPE_ERROR__));
./manage/SetController.php:								$this->notification->addNotification(_t("Created new set <em>%1</em>", $set_name), __NOTIFICATION_TYPE_INFO__);
./manage/SetController.php:						$this->notification->addNotification(_t("Set was not created because it has no contents"), __NOTIFICATION_TYPE_WARNING__);
./manage/SetController.php:					$this->notification->addNotification(_t("At least two sets must be selected"), __NOTIFICATION_TYPE_ERROR__);
./manage/SetController.php:		$this->ListSets();
./manage/SetController.php:		if ($this->request->user->canDoAction('is_administrator') || $this->request->user->canDoAction('can_administrate_sets')) {
./manage/SetController.php:		if ($this->request->user->canDoAction('can_delete_sets')) {
./manage/SetController.php:		if ($this->request->user->canDoAction('can_delete_own_sets')) {
./manage/SetController.php:			if ($user_id == $this->request->getUserID()) {
./manage/SetController.php:		$t_set = new ca_sets($vn_set_id = $this->request->getParameter('set_id', pInteger));
./manage/SetController.php:		$vn_user_id = !(bool)$this->request->config->get('ca_sets_all_users_see_all_sets') ? $this->request->getUserID() : null;
./manage/SetController.php:		$va_set_stats = array('mine' => caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $this->request->getUserID(), 'access' => __CA_SET_EDIT_ACCESS__, 'setType' => $this->opn_list_set_type_id)), null, null, array()));
./manage/SetController.php:		if ($this->request->user->canDoAction('is_administrator') || $this->request->user->canDoAction('can_administrate_sets')) {
./manage/SetController.php:			$va_set_stats['user'] = caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $vn_user_id, 'allUsers' => true, 'setType' => $this->opn_list_set_type_id)), null, null, array());
./manage/SetController.php:			$va_set_stats['public'] = caExtractValuesByUserLocale($t_set->getSets(array('user_id' => $vn_user_id, 'publicUsers' => true, 'setType' => $this->opn_list_set_type_id)), null, null, array());
./manage/SetController.php:		$o_result_context = new ResultContext($this->request, 'ca_sets', 'basic_search');
./manage/SetController.php:		$this->view->setVar('mode', $pn_mode);
./manage/SetController.php:		$this->view->setVar('sets', $va_set_stats);
./manage/SetController.php:		return $this->render('widget_set_info_html.php', true);
./manage/SetController.php:					!(bool)$this->getRequest()->config->get('ca_sets_navigation_new_menu_shows_top_level_types_only')
./manage/SetController.php:					!(bool)$this->getRequest()->config->get('ca_sets_enforce_strict_type_hierarchy')
./manage/SetController.php:						$va_subtypes = $this->_getSubTypes($va_types_by_parent_id[$va_item['item_id']], $va_types_by_parent_id, $vn_sort_type, $va_restrict_to_types);
./manage/SetController.php:				$va_subsubtypes = $this->_getSubTypes($pa_types_by_parent_id[$va_type['item_id']], $pa_types_by_parent_id, $pn_sort_type, $pa_restrict_to_types);
./manage/SubmissionsController.php: 			if(!$this->request->isLoggedIn() || (!$this->request->getUser()->canDoAction('can_manage_user_media_submissions'))) {
./manage/SubmissionsController.php:			$this->view->setVar('key', GraphQLServices\GraphQLServiceController::encodeJWTRefresh(['id' => $this->request->user->getPrimaryKey()]));
./manage/SubmissionsController.php: 			$this->render("submission_index_html.php");	
./manage/SubmissionsController.php: 			return $this->render('widget_sumbission_info_html.php', true);
./manage/ToolsController.php:			$this->response->setRedirect($po_request->config->get('error_display_url').'/n/3000?r='.urlencode($po_request->getFullUrlPath()));
./manage/ToolsController.php:		$this->opo_tools_manager = new ToolsManager();
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$this->view->setVar('tool_list', $this->opo_tools_manager->getTools());
./manage/ToolsController.php:		$this->render('tools/tools_list_html.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_tool_name = $this->request->getParameter('tool', pString);
./manage/ToolsController.php:		if(!($o_tool = $this->opo_tools_manager->getTool($ps_tool_name))) {
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3510?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$this->view->setVar('tool', $o_tool);
./manage/ToolsController.php:		$this->view->setVar('tool_identifier', $vs_tool_identifier = $o_tool->getToolIdentifier());
./manage/ToolsController.php:		$this->view->setVar('form_id', "caTool{$vs_tool_identifier}");
./manage/ToolsController.php:		$this->view->setVar('available_settings', $settings = $o_tool->getAvailableSettings());
./manage/ToolsController.php:		$this->view->setVar('settings_visibility_map', $settings_visibility_map);
./manage/ToolsController.php:		if(!is_array($va_last_settings = $this->request->user->getVar("{$vs_tool_identifier}_last_settings"))) { $va_last_settings = array(); }
./manage/ToolsController.php:		$this->view->setVar('last_settings', $va_last_settings);
./manage/ToolsController.php:		$this->render('tools/tool_settings_html.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_tool_name = 	$this->request->getParameter('tool', pString);
./manage/ToolsController.php:		$ps_command = 		$this->request->getParameter('command', pString);
./manage/ToolsController.php:		$ps_log_level = 	$this->request->getParameter('logLevel', pString);
./manage/ToolsController.php:		if(!($o_tool = $this->opo_tools_manager->getTool($ps_tool_name))) {
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3510?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3520?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$this->view->setVar('tool', $o_tool);
./manage/ToolsController.php:		$this->view->setVar('tool_identifier', $vs_tool_identifier = $o_tool->getToolIdentifier());
./manage/ToolsController.php:		$this->view->setVar('command', $ps_command);
./manage/ToolsController.php:		$this->view->setVar('form_id', $vs_form_id = "caTool{$vs_tool_identifier}");
./manage/ToolsController.php:		$this->view->setVar('available_settings', $va_settings = $o_tool->getAvailableSettings());
./manage/ToolsController.php:			$va_setting_values[$vs_setting] = $va_last_setting_values[$vs_setting] = $this->request->getParameter("{$vs_form_id}_{$vs_setting}", pString);
./manage/ToolsController.php:		$this->view->setVar('setting_values', $va_setting_values);
./manage/ToolsController.php:		$this->request->user->setVar("{$vs_tool_identifier}_last_settings", $va_last_setting_values);
./manage/ToolsController.php:		$vs_job_id = $o_tool->setJobID(null, array('data' => 'U'.$this->request->getUserID()));
./manage/ToolsController.php:		$this->view->setVar('job_id', $vs_job_id);
./manage/ToolsController.php:		$this->render('tools/tool_run_html.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_tool_name = $this->request->getParameter('tool', pString);
./manage/ToolsController.php:		$ps_command = $this->request->getParameter('command', pString);
./manage/ToolsController.php:		$ps_job_id = $this->request->getParameter('job_id', pString);
./manage/ToolsController.php:		if(!($o_tool = $this->opo_tools_manager->getTool($ps_tool_name))) {
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3510?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3520?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$va_settings = $this->request->getParameter('settings', pArray);
./manage/ToolsController.php:		$this->view->setVar('jobinfo', array(
./manage/ToolsController.php:		$this->render('tools/tool_runjob_json.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_job_id = $this->request->getParameter('job_id', pString);
./manage/ToolsController.php:		$this->view->setVar('jobinfo', $va_data);
./manage/ToolsController.php:		$this->render('tools/tool_runjob_json.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_id = $this->request->getParameter('id', pString);
./manage/ToolsController.php:		$pn_max = $this->request->getParameter('max', pString);
./manage/ToolsController.php:		if ($this->request->getParameter('init', pInteger)) { 
./manage/ToolsController.php:				$va_level_data[$vs_k] = $va_file_list = $this->_getDirectoryListing($vs_root_directory.'/'.$vs_directory, false, 20, (int)$vn_start, (int)$pn_max);
./manage/ToolsController.php:				$va_level_data[$vs_k] = $va_file_list = $this->_getDirectoryListing($vs_root_directory.'/'.$ps_directory, false, 20, (int)$pn_start, (int)$pn_max);
./manage/ToolsController.php:		$this->view->setVar('directory_list', $va_level_data);
./manage/ToolsController.php:		$this->render('tools/directory_level_json.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_id = $this->request->getParameter('id', pString);
./manage/ToolsController.php:		$this->view->setVar("ancestors", $va_ancestors);
./manage/ToolsController.php:		$this->render('tools/directory_ancestors_json.php');
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$ps_job_id = $this->request->getParameter('job_id', pString);
./manage/ToolsController.php:		$this->view->setVar('file_path', $va_data['data']['filepath']);
./manage/ToolsController.php:		$this->view->setVar('download_name', $va_data['data']['filename']);
./manage/ToolsController.php:		$this->response->addContent($this->render('tools/download_binary.php', true));
./manage/ToolsController.php:		if (!$this->request->isLoggedIn() || !$this->request->user->canDoAction('can_use_plugin_tools')) { 
./manage/ToolsController.php:			$this->response->setRedirect($this->request->config->get('error_display_url').'/n/3500?r='.urlencode($this->request->getFullUrlPath()));
./manage/ToolsController.php:		$this->view->setVar('tool_count', $this->opo_tools_manager->getToolCount());
./manage/ToolsController.php:		$this->view->setVar('tool_manager', $this->opo_tools_manager);
./manage/ToolsController.php:		return $this->render('tools/widget_tool_list_html.php', true);
./manage/MetadataExportController.php:		$this->opo_app_plugin_manager = new ApplicationPluginManager();
./manage/MetadataExportController.php:		$this->cleanOldExportFilesFromTmpDir();
./manage/MetadataExportController.php:		$this->getView()->setVar('exporter_list', $va_exporters);
./manage/MetadataExportController.php:		$this->render('export/exporter_list_html.php');
./manage/MetadataExportController.php:		$this->getView()->setVar('response', $va_response);
./manage/MetadataExportController.php:		$this->render('export/file_upload_response_json.php');
./manage/MetadataExportController.php:		if (!$this->getRequest()->user->canDoAction('can_batch_export_metadata')) {
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3440?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		$t_exporter = $this->getExporterInstance();
./manage/MetadataExportController.php:		if (!$this->getRequest()->user->canDoAction('can_export_'.$t_subject->tableName())) {
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3430?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		$this->getView()->setVar("t_subject", $t_subject);
./manage/MetadataExportController.php:		$app->registerPlugin(new BatchMetadataExportProgress($this->getRequest()));
./manage/MetadataExportController.php:		$this->render('export/export_results_html.php');
./manage/MetadataExportController.php:		$t_exporter = $this->getExporterInstance();
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3420?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		if (!$this->getRequest()->user->canDoAction('can_export_'.$t_subject->tableName())) {
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3430?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:			$this->getView()->setVar("errors",$va_errors);
./manage/MetadataExportController.php:			$this->render('export/export_errors_html.php');
./manage/MetadataExportController.php:			$vn_id = $this->getRequest()->getParameter('item_id', pInteger);
./manage/MetadataExportController.php:			$this->getView()->setVar("t_subject", $t_subject);
./manage/MetadataExportController.php:			$this->getView()->setVar('exporter_alternate_destinations', $va_alt_dest);
./manage/MetadataExportController.php:			$vs_filename = $this->getRequest()->getParameter('file_name', pString);
./manage/MetadataExportController.php:			$this->getView()->setVar('file_name', $vs_filename);
./manage/MetadataExportController.php:			if(!caCanRead($this->getRequest()->getUserID(), $t_exporter->get('table_num'), $vn_id)) {
./manage/MetadataExportController.php:				$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/2320?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:			$this->getView()->setVar('item_id',$vn_id);
./manage/MetadataExportController.php:			$this->getView()->setVar("export", $vs_export);
./manage/MetadataExportController.php:			if($this->request->user->getPreference('immediate_download_of_exports') === 'immediate') {
./manage/MetadataExportController.php:				$this->getView()->setVar('file_name', $vs_filename);
./manage/MetadataExportController.php:				$this->getView()->setVar('export_file', $vs_tmp_file);
./manage/MetadataExportController.php:				$this->getView()->setVar('export_content_type', $t_exporter->getContentType());
./manage/MetadataExportController.php:				$this->render('export/download_export_binary.php');
./manage/MetadataExportController.php:			$this->render('export/export_destination_html.php');
./manage/MetadataExportController.php:		$target = $this->request->getParameter('target', pString);
./manage/MetadataExportController.php:		$id = $this->request->getParameter('item_id', pInteger);
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/2320?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/2320?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		if (!$this->getRequest()->user->canDoAction('can_export_'.$t_subject->tableName())) {
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3430?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		if(!caCanRead($this->getRequest()->getUserID(), $target_info['table'], $id)) {
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/2320?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		$this->view->setVar('export_file', $f =array_shift($t_exporter->process($target_info['table'], $id, null, ['target' => $target])));
./manage/MetadataExportController.php:		$this->view->setVar('file_name', pathinfo($f, PATHINFO_BASENAME));
./manage/MetadataExportController.php:		$this->view->setVar('export_content_type', 'application/octet-stream'); 
./manage/MetadataExportController.php:		$this->render('export/download_export_binary.php');
./manage/MetadataExportController.php:		$this->getView()->setVar('exporter_alternate_destinations', $va_alt_dest);
./manage/MetadataExportController.php:		$vs_filename = $this->getRequest()->getParameter('file_name', pString);
./manage/MetadataExportController.php:		$this->getView()->setVar('file_name', $vs_filename);
./manage/MetadataExportController.php:		$this->getView()->setVar('export_file', $vs_tmp_file);
./manage/MetadataExportController.php:		$this->getView()->setVar('export_content_type', $vs_content_type);
./manage/MetadataExportController.php:		$vs_dest_code = $this->getRequest()->getParameter('destination', pString);
./manage/MetadataExportController.php:			$this->render('export/download_export_binary.php');
./manage/MetadataExportController.php:					$this->getView()->setVar('dest_display_name', $va_dest['display']);
./manage/MetadataExportController.php:					$this->getView()->setVar('dest_display_name', $va_dest['display']);
./manage/MetadataExportController.php:		$this->getView()->setVar('alternate_destination_success', $vb_success);
./manage/MetadataExportController.php:		$this->render('export/download_feedback_html.php');
./manage/MetadataExportController.php:		$t_exporter = $this->getExporterInstance();
./manage/MetadataExportController.php:		if ($this->getRequest()->getParameter('confirm', pInteger)) {
./manage/MetadataExportController.php:					$this->getRequest()->addActionError($o_e, 'general');
./manage/MetadataExportController.php:					$this->notification->addNotification($o_e->getErrorDescription(), __NOTIFICATION_TYPE_ERROR__);
./manage/MetadataExportController.php:				$this->notification->addNotification(_t("Deleted importer"), __NOTIFICATION_TYPE_INFO__);
./manage/MetadataExportController.php:			$this->Index();
./manage/MetadataExportController.php:			$this->render('export/exporter_delete_html.php');
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3420?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:			$this->getResponse()->setRedirect($this->getRequest()->config->get('error_display_url').'/n/3420?r='.urlencode($this->getRequest()->getFullUrlPath()));
./manage/MetadataExportController.php:		$this->getView()->setVar('exporter_alternate_destinations', $va_alt_dest);
./manage/MetadataExportController.php:		$vs_filename = $this->getRequest()->getParameter('file_name', pString);
./manage/MetadataExportController.php:		$this->getView()->setVar('file_name', $vs_filename);
./manage/MetadataExportController.php:		$this->render('export/export_destination_html.php');
./manage/MetadataExportController.php:		if (!($exporter_id = $this->getRequest()->getParameter('exporter_id', pString))) {
./manage/MetadataExportController.php:			$this->getView()->setVar('exporter_id', $exporter_id);
./manage/MetadataExportController.php:			$this->getView()->setVar('t_exporter', $t_exporter);
./manage/MetadataExportController.php:		if(($this->getRequest()->getAction()=="Index") || ($this->getRequest()->getAction()=="Delete")){
./manage/MetadataExportController.php:			$t_exporter = $this->getExporterInstance(false);
./manage/MetadataExportController.php:			$this->getView()->setVar('t_item', $t_exporter);
./manage/MetadataExportController.php:			$this->getView()->setVar('exporter_count', ca_data_exporters::getExporterCount());
./manage/MetadataExportController.php:			return $this->render('export/widget_exporter_list_html.php', true);
./manage/MetadataExportController.php:			$t_exporter = $this->getExporterInstance();
./manage/MetadataExportController.php:			$this->getView()->setVar('t_item', $t_exporter);
./manage/MetadataExportController.php:			return $this->render('export/widget_exporter_info_html.php', true);
./manage/BundleDisplaysController.php:		$this->view->setVar('t_display', $t_display);
./manage/BundleDisplaysController.php:		$this->view->setVar('display_list', $va_displays = caExtractValuesByUserLocale($t_display->getBundleDisplays(array('user_id' => $this->request->getUserID(), 'access' => __CA_BUNDLE_DISPLAY_EDIT_ACCESS__)), null, null, array()));
./manage/BundleDisplaysController.php:		$o_result_context = new ResultContext($this->request, 'ca_bundle_displays', 'basic_search');
./manage/BundleDisplaysController.php:		$this->view->setVar('table_list', caFilterTableList($t_display->getFieldInfo('table_num', 'BOUNDS_CHOICE_LIST')));
./manage/BundleDisplaysController.php:		$this->render('bundle_display_list_html.php');
./manage/BundleDisplaysController.php:		return $this->request->getParameter('display_id', pInteger);
./manage/BundleDisplaysController.php:		$t_display = new ca_bundle_displays($vn_display_id = $this->_getDisplayID());
./manage/BundleDisplaysController.php:		$this->view->setVar('bundle_displays', caExtractValuesByUserLocale($t_display->getBundleDisplays(array('user_id' => $this->request->getUserID(), 'access' => __CA_BUNDLE_DISPLAY_EDIT_ACCESS__)), null, array()));
./manage/BundleDisplaysController.php:		return $this->render('widget_bundle_display_info_html.php', true);
./system/AuthController.php:		if (AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_USE_ADAPTER_LOGIN_FORM__) && !in_array($this->request->getAction(), ['logout', 'callback'])) {
./system/AuthController.php:		$vs_redirect = $this->_getRedirectUrl();
./system/AuthController.php:		$this->getView()->setVar('redirect', $vs_redirect);
./system/AuthController.php:		$this->render('login_html.php');
./system/AuthController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./system/AuthController.php:			$this->view->setVar('notifications', $this->notification->getNotifications());
./system/AuthController.php:			$this->render('login_html.php');
./system/AuthController.php:		$vs_redirect_url = $this->_getRedirectUrl();
./system/AuthController.php:		if (!$this->request->doAuthentication(array('dont_redirect_to_login' => true, 'redirect' => $vs_redirect_url, 'noPublicUsers' => true, 'user_name' => $this->request->getParameter('username', pString), 'password' => $this->request->getParameter('password', pString)))) {
./system/AuthController.php:			$this->notification->addNotification(_t("Login was invalid"), __NOTIFICATION_TYPE_ERROR__);
./system/AuthController.php:			$this->view->setVar('notifications', $this->notification->getNotifications());
./system/AuthController.php:			$this->render('login_html.php');
./system/AuthController.php:			$g_ui_locale_id = $this->request->user->getPreferredUILocaleID();			// get current UI locale as locale_id	 			(available as global)
./system/AuthController.php:			$g_ui_locale = $this->request->user->getPreferredUILocale();				// get current UI locale as locale string 			(available as global)
./system/AuthController.php:			$g_ui_units_pref = $this->request->user->getPreference('units');			// user's selected display units for measurements 	(available as global)
./system/AuthController.php:			AppNavigation::clearMenuBarCache($this->request);	// want to clear menu bar on login
./system/AuthController.php:			$this->notification->addNotification(_t("You are now logged in"), __NOTIFICATION_TYPE_INFO__);
./system/AuthController.php:			if ($vs_redirect_url) $this->redirect($vs_redirect_url);
./system/AuthController.php:			$this->render('welcome_html.php');
./system/AuthController.php:		AppNavigation::clearMenuBarCache($this->request);	// clear menu bar cache on welcome (stealth debugging tool)
./system/AuthController.php:		$this->render('welcome_html.php');
./system/AuthController.php:		$this->request->deauthenticate();
./system/AuthController.php:		AppNavigation::clearMenuBarCache($this->request);	// clear menu bar cache on logout just in case
./system/AuthController.php:		$this->notification->addNotification(_t("You are now logged out"), __NOTIFICATION_TYPE_INFO__);
./system/AuthController.php:		$this->view->setVar('notifications', $this->notification->getNotifications());
./system/AuthController.php:		$this->render('logged_out_html.php');
./system/AuthController.php:		if(!AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_RESET_PASSWORDS__)) { $this->Login(); return; }
./system/AuthController.php:		$this->render('forgot_password_html.php');
./system/AuthController.php:		if(!AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_RESET_PASSWORDS__)) { $this->Login(); return; }
./system/AuthController.php:		if (caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./system/AuthController.php:			$vs_username = $this->getRequest()->getParameter('username',pString);
./system/AuthController.php:		$this->render('password_reset_instructions_html.php');
./system/AuthController.php:		if(!AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_RESET_PASSWORDS__)) { $this->Login(); return; }
./system/AuthController.php:		$vs_token = $this->getRequest()->getParameter('token',pString);
./system/AuthController.php:		$vs_username = $this->getRequest()->getParameter('username',pString);
./system/AuthController.php:		$this->view->setVar('renderForm', $vb_render_form);
./system/AuthController.php:		$this->view->setVar('token', $vs_token);
./system/AuthController.php:		$this->view->setVar('username', $vs_username);
./system/AuthController.php:		$this->render('password_reset_form_html.php');
./system/AuthController.php:		if(!AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_RESET_PASSWORDS__)) { $this->Login(); return; }
./system/AuthController.php:		if (!caValidateCSRFToken($this->request, null, ['notifications' => $this->notification])) {
./system/AuthController.php:			$this->Login();
./system/AuthController.php:		$vs_token = $this->getRequest()->getParameter('token',pString);
./system/AuthController.php:		$vs_username = $this->getRequest()->getParameter('username',pString);
./system/AuthController.php:		$vs_pw = $this->getRequest()->getParameter('password',pString);
./system/AuthController.php:		$vs_pw_check = $this->getRequest()->getParameter('password2',pString);
./system/AuthController.php:					$this->notification->addNotification(_t("Passwords did not match. Please try again."), __NOTIFICATION_TYPE_ERROR__);
./system/AuthController.php:					$this->view->setVar('notifications', $this->notification->getNotifications());
./system/AuthController.php:					$this->view->setVar('renderForm', true);
./system/AuthController.php:					$this->view->setVar('token', $vs_token);
./system/AuthController.php:					$this->view->setVar('username', $vs_username);
./system/AuthController.php:					$this->render('password_reset_form_html.php');
./system/AuthController.php:					$this->notification->addNotification(_t("Password was successfully changed. You can now log in with your new password."), __NOTIFICATION_TYPE_INFO__);
./system/AuthController.php:					$this->view->setVar('notifications', $this->notification->getNotifications());
./system/AuthController.php:					$this->Login();
./system/AuthController.php:			$this->notification->addNotification($e->getMessage(), __NOTIFICATION_TYPE_ERROR__);
./system/AuthController.php:			$this->view->setVar('notifications', $this->notification->getNotifications());
./system/AuthController.php:			$this->render('auth_error_html.php');
./system/AuthController.php:		$redirect_url = $this->request->getParameter('redirect', pString, null, ['forcePurify' => true]) ?: caNavUrl($this->request, null, null, null);
./system/ErrorController.php:		$va_nums = explode(';', $this->request->getParameter('n', pString));
./system/ErrorController.php:		$this->view->setVar('error_messages', $va_error_messages);
./system/ErrorController.php:		$this->view->setVar('referrer', $o_purify->purify($this->request->getParameter('r', pString)));
./system/ErrorController.php:		$this->render('error_html.php');
./system/PreferencesController.php:		$this->request->user->loadUserPrefDefs(true); 
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'ui');
./system/PreferencesController.php:		$this->render('preferences_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'cataloguing');
./system/PreferencesController.php:		$this->render('preferences_cataloguing_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'batch');
./system/PreferencesController.php:		$this->render('preferences_batch_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'find');
./system/PreferencesController.php:		$this->render('preferences_find_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'quickadd');
./system/PreferencesController.php:		$this->render('preferences_quickadd_html.php');
./system/PreferencesController.php:		if (!is_array($va_search_list = $this->request->user->getPreference("quicksearch_search_list"))) { $va_search_list = []; }
./system/PreferencesController.php:		$this->view->setVar('available_searches', $va_available_display_items);
./system/PreferencesController.php:		$this->view->setVar('selected_searches', $va_selected_display_items);
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'quicksearch');
./system/PreferencesController.php:		$this->render('preferences_quicksearch_html.php');
./system/PreferencesController.php:		$current_table = 'ca_'.$this->request->getActionExtra();	// url action extra is table name without "ca_" (eg. places => ca_places)
./system/PreferencesController.php:		if (!is_array($selected_filter_list = $this->request->user->getPreference("{$current_table}_searchbuilder_bundle_list"))) { 
./system/PreferencesController.php:		if (!is_array($selected_priority_filter_list = $this->request->user->getPreference("{$current_table}_searchbuilder_priority_list"))) { 
./system/PreferencesController.php:		$this->view->setVar('available_bundles', $available_filters);
./system/PreferencesController.php:		$this->view->setVar('selected_bundles', $selected_filters);
./system/PreferencesController.php:		$this->view->setVar('available_priority_bundles', $available_priority_filters);
./system/PreferencesController.php:		$this->view->setVar('selected_priority_bundles', $selected_priority_filters);
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'searchbuilder');
./system/PreferencesController.php:		$this->render('preferences_searchbuilder_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'units');
./system/PreferencesController.php:		$this->render('preferences_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'profile');
./system/PreferencesController.php:		$this->render('preferences_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'duplication');
./system/PreferencesController.php:		$vs_current_table = 'ca_'.$this->request->getActionExtra();	// url action extra is table name without "ca_" (eg. places => ca_places)
./system/PreferencesController.php:			throw new ApplicationException(_t('No duplication preferences for %1', $this->request->getActionExtra()));
./system/PreferencesController.php:			throw new ApplicationException(_t('Invalid table: %1', $this->request->getActionExtra()));
./system/PreferencesController.php:		$this->view->setVar('current_table', $vs_current_table);
./system/PreferencesController.php:		if (!is_array($va_duplication_element_settings = $this->request->user->getPreference($vs_current_table.'_duplicate_element_settings'))) { $va_duplication_element_settings = []; }
./system/PreferencesController.php:		$this->view->setVar('bundle_list', $va_bundle_list);
./system/PreferencesController.php:		$this->render('preferences_duplication_html.php');
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->view->setVar('group', 'developer');
./system/PreferencesController.php:		$this->render('preferences_html.php');
./system/PreferencesController.php:		$vs_action = $this->request->getParameter('action', pString);
./system/PreferencesController.php:				$this->request->user->setPreference('cataloguing_locale', $this->request->getParameter('pref_cataloguing_locale', pString));
./system/PreferencesController.php:				$this->request->user->setPreference('cataloguing_delete_reference_handling_default', $this->request->getParameter('pref_cataloguing_delete_reference_handling_default', pString));
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:						$this->request->user->setPreference($vs_pref, $va_values);
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:							$this->request->user->setPreference($vs_pref, $vs_v);
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:				$this->request->user->setPreference($vs_pref, $find_prefs);
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:						$this->request->user->setPreference($vs_pref, $va_values);
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:					$this->request->user->setPreference($vs_pref, $this->request->getParameter('pref_'.$vs_pref, pString));
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:					$this->request->user->setPreference($vs_pref, $this->request->getParameter('pref_'.$vs_pref, pString));
./system/PreferencesController.php:				$vs_current_table = 'ca_'.$this->request->getActionExtra();
./system/PreferencesController.php:					$this->view->setVar('current_table', $vs_current_table);
./system/PreferencesController.php:					foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:						if(!$this->getRequest()->getUser()->isValidPreference("{$vs_current_table}_{$vs_pref}")) { continue; }
./system/PreferencesController.php:								$vm_val = $this->request->getParameter("pref_{$vs_current_table}_{$vs_pref}", pArray);
./system/PreferencesController.php:								$vm_val = $this->request->getParameter("pref_{$vs_current_table}_{$vs_pref}", pString);
./system/PreferencesController.php:						$this->request->user->setPreference("{$vs_current_table}_{$vs_pref}", $vm_val);
./system/PreferencesController.php:					if ((bool)$this->request->getParameter("pref_{$vs_current_table}_duplicate_attributes", pString)) {
./system/PreferencesController.php:						$vm_val = $this->request->getParameter("duplicate_element_settings", pArray);
./system/PreferencesController.php:						$this->request->user->setPreference("{$vs_current_table}_duplicate_element_settings", $vm_val);
./system/PreferencesController.php:				$this->request->user->update();
./system/PreferencesController.php:				$this->notification->addNotification(_t("Saved preference settings"), __NOTIFICATION_TYPE_INFO__);	
./system/PreferencesController.php:				$this->response->setRedirect(caNavUrl($this->request, '*', '*', 'EditDuplicationPrefs/'.$this->request->getActionExtra()));
./system/PreferencesController.php:				$va_bundle_list = array_unique(array_map(function($v) { return preg_replace("!_[\d]+$!", "", $v); }, explode(';', $this->request->getParameter('displayBundleList', pString))));
./system/PreferencesController.php:				$this->request->user->setPreference("quicksearch_search_list", $va_bundle_list);
./system/PreferencesController.php:				$this->notification->addNotification(_t("Saved preference settings"), __NOTIFICATION_TYPE_INFO__);	
./system/PreferencesController.php:				return $this->EditQuickSearchPrefs();
./system/PreferencesController.php:				$action_extra = $this->request->getActionExtra();
./system/PreferencesController.php:					$this->view->setVar('current_table', $current_table);
./system/PreferencesController.php:					foreach($this->request->user->getValidPreferences($group) as $pref) {
./system/PreferencesController.php:						if(!$this->getRequest()->getUser()->isValidPreference("{$current_table}_{$pref}")) { continue; }
./system/PreferencesController.php:						$bundle_list = array_unique(array_map(function($v) { return preg_replace("!_[\d]+$!", "", $v); }, explode(';', $this->request->getParameter($k, pString))));
./system/PreferencesController.php:						$this->request->user->setPreference("{$current_table}_{$pref}", $bundle_list);
./system/PreferencesController.php:				$this->request->user->update();
./system/PreferencesController.php:				$this->notification->addNotification(_t("Saved preference settings"), __NOTIFICATION_TYPE_INFO__);	
./system/PreferencesController.php:				$this->response->setRedirect(caNavUrl($this->request, '*', '*', 'EditSearchBuilderPrefs/'.$this->request->getActionExtra()));
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:					$this->request->user->setPreference($vs_pref, $this->request->getParameter('pref_'.$vs_pref, pString));
./system/PreferencesController.php:				foreach($this->request->user->getValidPreferences($vs_group) as $vs_pref) {
./system/PreferencesController.php:					$this->request->user->setPreference($vs_pref, $vs_locale = $this->request->getParameter('pref_'.$vs_pref, pString));
./system/PreferencesController.php:						$this->request->user->setPreference('ui_locale', $vs_locale);
./system/PreferencesController.php:						$g_ui_locale_id = $this->request->user->getPreferredUILocaleID();			// get current UI locale as locale_id	 			(available as global)
./system/PreferencesController.php:						$g_ui_locale = $this->request->user->getPreferredUILocale();				// get current UI locale as locale string 			(available as global)
./system/PreferencesController.php:						AppNavigation::clearMenuBarCache($this->request);
./system/PreferencesController.php:						$this->view->setViewPath($this->request->getViewsDirectoryPath().'/'.$this->request->getModulePath());
./system/PreferencesController.php:		$this->request->setAction($vs_action);
./system/PreferencesController.php:		$this->view->setVar('group', $vs_group);
./system/PreferencesController.php:		$this->notification->addNotification(_t("Saved preference settings"), __NOTIFICATION_TYPE_INFO__);	
./system/PreferencesController.php:		$this->view->setVar('t_user', $this->request->user);
./system/PreferencesController.php:		$this->render($vs_view_name);
./statistics/DashboardController.php:		$can_view_system_statistics = (bool)$this->request->user->canDoAction('can_view_system_statistics');
./statistics/DashboardController.php:		$can_access_non_local_system_statistics = (bool)$this->request->user->canDoAction('can_view_non_local_system_statistics');
./statistics/DashboardController.php:		$can_access_non_local_system_statistics = (bool)$this->request->user->canDoAction('can_view_non_local_system_statistics');
./statistics/DashboardController.php:		$cur_site = $this->request->getParameter('site', pString);
./statistics/DashboardController.php:		$cur_group = $this->request->getParameter('group', pString);
./statistics/DashboardController.php:		$this->view->setVar('groups', $groups);
./statistics/DashboardController.php:		$this->view->setVar('sites', $sites);
./statistics/DashboardController.php:		$this->view->setVar('data', $data);
./statistics/DashboardController.php:		$this->view->setVar('panels', StatisticsDashboard::getPanelList());
./statistics/DashboardController.php:			$site_links[] = caNavLink($this->request, $site_info['name'], '', '*', '*' , '*', ['site' => $site, 'group' => $cur_group]);
./statistics/DashboardController.php:		$this->view->setVar('site_links', $site_links);
./statistics/DashboardController.php:			$group_links[] = caNavLink($this->request, $group_info['name'], '', '*', '*' , '*', ['group' => $group]);
./statistics/DashboardController.php:		$this->view->setVar('group_links', $group_links);
./statistics/DashboardController.php:			$this->view->setVar('all_link', caNavLink($this->request, _t('view all'), '', '*', '*' , '*', []));
./statistics/DashboardController.php:		$this->view->setVar('message', $message);
./statistics/DashboardController.php:		$this->view->setVar('last_update', ($d = PersistentCache::fetch('site_statistics_last_fetch', 'statistics')) ? caGetLocalizedDate($d) : "");
./statistics/DashboardController.php:		$this->render('dashboard/dashboard_html.php');
./DashboardController.php:		$this->opo_dashboard_manager = DashboardManager::load($po_request);
./DashboardController.php:		$this->render('dashboard/dashboard_html.php');
./DashboardController.php:		$this->view->setVar('widget_manager', new WidgetManager());
./DashboardController.php:		$this->render('dashboard/available_widget_list_html.php');
./DashboardController.php:		if ($ps_widget = $this->request->getParameter('widget', pString)) {
./DashboardController.php:			if (!($pn_col = $this->request->getParameter('col', pInteger))) { $pn_col = 1; }
./DashboardController.php:			$this->opo_dashboard_manager->addWidget($ps_widget, (int)$pn_col);
./DashboardController.php:		$this->render('dashboard/dashboard_html.php');
./DashboardController.php:		if ($ps_widget_id = $this->request->getParameter('widget_id', pString)) {
./DashboardController.php:			$this->opo_dashboard_manager->removeWidget($ps_widget_id);
./DashboardController.php:		$this->render('dashboard/dashboard_html.php');
./DashboardController.php:			1 => explode(';', $this->request->getParameter('sort_column1', pString)),
./DashboardController.php:			2 => explode(';', $this->request->getParameter('sort_column2', pString))
./DashboardController.php:		$this->opo_dashboard_manager->moveWidgets($va_move_info);
./DashboardController.php:		$this->render('dashboard/move_widgets_json.php');
./DashboardController.php:		$this->opo_dashboard_manager->clearDashboard();
./DashboardController.php:		$this->render('dashboard/dashboard_html.php');
./DashboardController.php:		$this->opo_dashboard_manager->defaultDashboard();
./DashboardController.php:		$this->render('dashboard/dashboard_html.php');
./DashboardController.php:		if ($ps_widget_id = $this->request->getParameter('widget_id', pString)) {
./DashboardController.php:			$this->view->setVar('widget_id', $ps_widget_id);
./DashboardController.php:			$this->view->setVar('form', $this->opo_dashboard_manager->getWidgetSettingsFormHTML($ps_widget_id));
./DashboardController.php:			$this->render('dashboard/ajax_settings_html.php');			
./DashboardController.php:		if ($ps_widget_id = $this->request->getParameter('widget_id', pString)) {
./DashboardController.php:			$va_widget_info = $this->opo_dashboard_manager->getWidgetByID($ps_widget_id);
./DashboardController.php:			$this->view->setVar('widget_id', $va_widget_info['widget_id']);
./DashboardController.php:			$this->response->addContent($this->opo_dashboard_manager->renderWidget($va_widget_info['widget'], $va_widget_info['widget_id'], $va_widget_info['settings']));
./DashboardController.php:		if ($widget_id = $this->request->getParameter('widget_id', pString)) {
./DashboardController.php:			$widget_info = $this->opo_dashboard_manager->getWidgetByID($widget_id);
./DashboardController.php:			$method = $this->request->getParameter('method', pString);
./DashboardController.php:			$options = json_decode($this->request->getParameter('options', pString), true);
./DashboardController.php:			print_R($this->opo_dashboard_manager->runWidgetFunction($widget_info['widget'], $widget_id, $method, $options));
./DashboardController.php:		if ($ps_widget_id = $this->request->getParameter('widget_id', pString)) {
./DashboardController.php:			$this->view->setVar('widget_id', $ps_widget_id);
./DashboardController.php:			$this->opo_dashboard_manager->saveWidgetSettings($ps_widget_id);
./DashboardController.php:			$this->getWidget();
